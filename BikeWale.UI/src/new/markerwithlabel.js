function MarkerLabel_(e) { var t = this; this.marker_ = e, this.labelDiv_ = document.createElement("div"), this.labelDiv_.onselectstart = function () { return !1 }, this.containerDiv_ = document.createElement("div"), this.containerDiv_.appendChild(this.labelDiv_), this.containerDiv_.style.cssText = "position: absolute; display: none;", this.setMap(this.marker_.getMap()), google.maps.event.addListener(this.marker_, "map_changed", function () { t.setMap(t.marker_.getMap()) }) } function MarkerWithLabel(e) { e.labelText = e.labelText || "", e.labelClass = e.labelClass || "markerLabels", e.labelStyle = e.labelStyle || {}, e.labelZIndex = e.labelZIndex || null, "undefined" == typeof e.labelVisible && (e.labelVisible = !0), this.setValues(e), this.theLabel_ = new MarkerLabel_(this) } MarkerLabel_.prototype = new google.maps.OverlayView, MarkerLabel_.prototype.onAdd = function () { var e, t, a, i, l = this, n = !1, r = !1; this.getPanes().overlayImage.appendChild(this.containerDiv_), this.listeners_ = [google.maps.event.addDomListener(document, "mouseup", function (t) { r && (t.latLng = e, i = !0, google.maps.event.trigger(l.marker_, "dragend", t)), google.maps.event.trigger(l.marker_, "mouseup", t), n = !1, r = !1 }), google.maps.event.addListener(l.marker_.getMap(), "mousemove", function (i) { n && l.marker_.getDraggable() && (i.latLng = new google.maps.LatLng(i.latLng.lat() - t, i.latLng.lng() - a), e = i.latLng, r ? (l.marker_.setPosition(i.latLng), google.maps.event.trigger(l.marker_, "drag", i)) : (t = i.latLng.lat() - l.marker_.getPosition().lat(), a = i.latLng.lng() - l.marker_.getPosition().lng(), r = !0, google.maps.event.trigger(l.marker_, "dragstart", i))) }), google.maps.event.addDomListener(this.containerDiv_, "mouseover", function (e) { l.containerDiv_.style.cursor = "pointer", google.maps.event.trigger(l.marker_, "mouseover", e) }), google.maps.event.addDomListener(this.containerDiv_, "mouseout", function (e) { l.containerDiv_.style.cursor = l.marker_.getCursor(), google.maps.event.trigger(l.marker_, "mouseout", e) }), google.maps.event.addDomListener(this.containerDiv_, "click", function (e) { i ? i = !1 : google.maps.event.trigger(l.marker_, "click", e) }), google.maps.event.addDomListener(this.containerDiv_, "dblclick", function (e) { google.maps.event.trigger(l.marker_, "dblclick", e), e.cancelBubble = !0, e.stopPropagation && e.stopPropagation() }), google.maps.event.addDomListener(this.containerDiv_, "mousedown", function (e) { n = !0, r = !1, t = 0, a = 0, google.maps.event.trigger(l.marker_, "mousedown", e), e.cancelBubble = !0, e.stopPropagation && e.stopPropagation() }), google.maps.event.addListener(this.marker_, "labeltext_changed", function () { l.labelDiv_.innerHTML = l.marker_.get("labelText") }), google.maps.event.addListener(this.marker_, "labelclass_changed", function () { l.labelDiv_.className = l.marker_.get("labelClass") }), google.maps.event.addListener(this.marker_, "labelstyle_changed", function () { var e, t; l.labelDiv_.className = l.marker_.get("labelClass"), t = l.marker_.get("labelStyle"); for (e in t) t.hasOwnProperty(e) && (l.labelDiv_.style[e] = t[e]); "undefined" != typeof l.labelDiv_.style.opacity && (l.labelDiv_.style.filter = "alpha(opacity=" + 100 * l.labelDiv_.style.opacity + ")"), l.labelDiv_.style.position = "relative" }), google.maps.event.addListener(this.marker_, "labelzindex_changed", function () { l.containerDiv_.style.zIndex = l.marker_.get("labelZIndex") }), google.maps.event.addListener(this.marker_, "labelvisible_changed", function () { l.marker_.get("labelVisible") ? l.containerDiv_.style.display = l.marker_.getVisible() ? "block" : "none" : l.containerDiv_.style.display = "none" }), google.maps.event.addListener(this.marker_, "position_changed", function () { var e = l.getProjection().fromLatLngToDivPixel(l.marker_.getPosition()); l.containerDiv_.style.left = e.x + "px", l.containerDiv_.style.top = e.y + "px" }), google.maps.event.addListener(this.marker_, "visible_changed", function () { l.marker_.get("labelVisible") ? l.containerDiv_.style.display = l.marker_.getVisible() ? "block" : "none" : l.containerDiv_.style.display = "none" }), google.maps.event.addListener(this.marker_, "title_changed", function () { l.containerDiv_.title = l.marker_.getTitle() })] }, MarkerLabel_.prototype.onRemove = function () { var e; for (this.containerDiv_.parentNode.removeChild(this.containerDiv_), e = 0; e < this.listeners_.length; e++) google.maps.event.removeListener(this.listeners_[e]) }, MarkerLabel_.prototype.draw = function () { var e, t, a = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition()); this.containerDiv_.style.left = a.x + "px", this.containerDiv_.style.top = a.y + "px", this.containerDiv_.style.zIndex = this.marker_.get("labelZIndex"), this.marker_.get("labelVisible") ? this.containerDiv_.style.display = this.marker_.getVisible() ? "block" : "none" : this.containerDiv_.style.display = "none", this.containerDiv_.title = this.marker_.getTitle() || "", this.labelDiv_.className = this.marker_.get("labelClass"), t = this.marker_.get("labelStyle"); for (e in t) t.hasOwnProperty(e) && (this.labelDiv_.style[e] = t[e]); "undefined" != typeof this.labelDiv_.style.opacity && (this.labelDiv_.style.filter = "alpha(opacity=" + 100 * this.labelDiv_.style.opacity + ")"), this.labelDiv_.style.position = "relative", this.labelDiv_.innerHTML = this.marker_.get("labelText") }, MarkerWithLabel.prototype = new google.maps.Marker;