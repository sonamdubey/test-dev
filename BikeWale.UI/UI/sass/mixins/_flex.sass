@mixin flexbox
	display: -webkit-box // OLD - iOS 6-, Safari 3.1-6
	display: -moz-box // OLD - Firefox 19- (buggy but mostly works)
	display: -ms-flexbox // TWEENER - IE 10
	display: -webkit-flex // NEW - Chrome
	display: flex // NEW, Spec - Opera 12.1, Firefox 20+

/*
 * https: //developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Advanced_layouts_with_flexbox
 */

/*
 * Flexbox Containers
 * The 'flex' value causes an element to generate a block-level flex container box.
 */

/*
 * Flexbox Wrap
 * The 'flex-grow' property sets the flex grow factor. Negative numbers are invalid.
 * Values: nowrap | wrap | wrap-reverse
 * Default: nowrap
 */
@mixin flex-wrap($value: nowrap)
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value
  @if $value == nowrap
    -ms-flex-wrap: none
  @else
    -ms-flex-wrap: $value

  flex-wrap: $value

/*
 * Flexbox Grow
 * The 'flex-grow' property sets the flex grow factor. Negative numbers are invalid.
 * Default: 0
 */
@mixin flex-grow($int: 1)
	-webkit-box-flex: $int
	-moz-box-flex: $int
	-webkit-flex-grow: $int
	-ms-flex: $int
	flex-grow: $int

/*
 * Flexbox Align Items
 * Values: flex-start | flex-end | center | baseline | stretch Default: stretch
 */
@mixin align-items($value: stretch)
	@if $value == flex-start
		-webkit-box-align: start
		-moz-box-align: start
		-ms-flex-align: start
	@else if $value == flex-end
		-webkit-box-align: end
		-moz-box-align: end
		-ms-flex-align: end
	@else
		-webkit-box-align: $value
		-moz-box-align: $value
		-ms-flex-align: $value

	-webkit-align-items: $value
	align-items: $value

/*
 * Flexbox Shrink
 * The 'flex-shrink' property sets the flex shrink factor. Negative numbers are invalid.
 * Default: 1
 */
@mixin flex-shrink($int: 0)
	-webkit-flex-shrink: $int
	-moz-flex-shrink: $int
	-ms-flex: $int
	flex-shrink: $int

/*
 * Flexbox Justify Content
 * The 'justify-content' property aligns flex items along the main axis of the current line of the flex container.
 *
 * Values: flex-start | flex-end | center | space-between | space-around
 * Default: flex-start
 */
@mixin justify-content($value: flex-start)
	@if $value == flex-start
		-webkit-box-pack: start
		-moz-box-pack: start
		-ms-flex-pack: start
	@else if $value == flex-end
		-webkit-box-pack: end
		-moz-box-pack: end
		-ms-flex-pack: end
	@else if $value == space-between
		-webkit-box-pack: justify
		-moz-box-pack: justify
		-ms-flex-pack: justify
	@else if $value == space-around
		-ms-flex-pack: distribute
	@else
		-webkit-box-pack: $value
		-moz-box-pack: $value
		-ms-flex-pack: $value

	-webkit-justify-content: $value
	justify-content: $value


/*
 * Flexbox direction
 * The 'flex-direction' property specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.
 *
 * Values: row | row-reverse | column | column-reverse
 * Default: row
 */
@mixin flex-direction($value: row)
  @if $value == row-reverse
    -webkit-box-direction: reverse
    -webkit-box-orient: horizontal
    -moz-box-direction: reverse
    -moz-box-orient: horizontal
  @else if $value == column
    -webkit-box-direction: normal
    -webkit-box-orient: vertical
    -moz-box-direction: normal
    -moz-box-orient: vertical
  @else if $value == column-reverse
    -webkit-box-direction: reverse
    -webkit-box-orient: vertical
    -moz-box-direction: reverse
    -moz-box-orient: vertical
  @else
    -webkit-box-direction: normal
    -webkit-box-orient: horizontal
    -moz-box-direction: normal
    -moz-box-orient: horizontal

  -webkit-flex-direction: $value
  -ms-flex-direction: $value
  flex-direction: $value

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null)

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list'
		$fg-boxflex: nth($fg, 1);


	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;