@{
    var isOperaBrowser = false;
    var ClientIP = Bikewale.Common.CommonOpn.GetClientIP();
    Bikewale.Entities.Location.GlobalCityAreaEntity cityArea = Bikewale.Utility.GlobalCityArea.GetGlobalCityArea();
    uint CityId = cityArea.CityId, AreaId = cityArea.AreaId;

    var browserDetection = Request.Browser;
    if (browserDetection != null)
    {
        string browserType = browserDetection.Type, browser = browserDetection.Browser, browserVersion = browserDetection.Version;
        isOperaBrowser = !string.IsNullOrEmpty(browserType) && browserType.ToLower().Contains("mini");

    }

}

<!-- pricequote widget starts here-->
<div class="bw-city-popup bwm-fullscreen-popup bw-popup-sm text-center hide" id="popupWrapper">
    <div class="city-popup-wrapper">
        <div class="city-area-banner"></div>
        <div class="popup-inner-container">
            <div class="bwmsprite onroad-price-close-btn close-btn position-abt pos-top10 pos-right10 cur-pointer"></div>
            <div id="popupHeading" class="content-inner-block-20">
                <p class="font18 margin-bottom5 text-capitalize">Please Tell Us Your Location</p>
                <div class="text-light-grey margin-bottom5"><span class="red">*</span><span data-bind="text:subTitle"></span></div>
                @{ if (isOperaBrowser)
                 {

                    <div class="form-control-box margin-bottom10 ">
                        <select id="opCityList" class="form-control" tabindex="2" data-bind="options: BookingCities, value: SelectedCityId, optionsText: 'name', optionsValue: 'id', optionsCaption: '--Select City--', event: { change: function(d,e){selectCity(d,e);} }"></select>
                        <span class="fa fa-spinner fa-spin position-abt  text-black btnSpinner"></span>
                    </div>
                    <div class="form-control-box" data-bind="visible: BookingAreas().length > 0">
                        <select id="opAreaList" class="form-control" data-bind="options: BookingAreas, value: SelectedAreaId, optionsText: 'name', optionsValue: 'id', optionsCaption: '--Select Area--', event: { change: function (d,e) { selectArea(d,e); } }"></select>
                        <span class="fa fa-spinner fa-spin position-abt  text-black btnSpinner"></span>
                    </div>

                 }
                 else
                 {

                    <div id="citySelection" class="form-control text-left input-sm position-rel margin-bottom10">
                        <div class="selected-city" data-bind="text: (SelectedCity() != null && SelectedCity().name != '') ? SelectedCity().name : 'Select City'"></div>
                        <span class="bwmsprite fa-angle-right position-abt pos-top10 pos-right10"></span>
                    </div>
                    <div id="areaSelection" class="form-control text-left input-sm position-rel margin-bottom10" data-bind="visible: BookingAreas().length > 0">
                        <div class="selected-area" data-bind="text: (SelectedArea() != null && SelectedArea().name != '') ? SelectedArea().name : 'Select Area'">Select Area</div>
                        <span class="bwmsprite fa-angle-right position-abt pos-top10 pos-right10"></span>

                    </div>

                    <div id="btnPriceLoader" class="center-align margin-top20 text-center position-rel">
                        <a id="btnDealerPricePopup" class="btn btn-orange btn-full-width font18" data-bind="visible: SelectedCityId() > 0 && IsPersistance() && (!hasAreas() || SelectedAreaId() > 0),click: function(){ IsPersistance(false); InitializePQ();} ">Show on-road price</a>
                    </div>

                    <div id="popupContent" class="bwm-city-area-popup-wrapper">
                        <div class="bw-city-popup-box bwm-city-area-box city-list-container form-control-box text-left">
                            <div class="user-input-box">
                                <span class="back-arrow-box">
                                    <span class="bwmsprite back-long-arrow-left"></span>
                                </span>
                                <input type="text" class="form-control padding-right40" placeholder="Type to select city" id="popupCityInput" autocomplete="off" data-bind="textInput: cityFilter,attr: { value: (SelectedCity() != undefined) ? SelectedCity().name : '' }">
                            </div>
                            <ul id="popupCityList" data-bind="template: { name: 'bindCityList-template', foreach: visibleCities }"></ul>
                            <script type="text/html" id="bindCityList-template">
                                <li data-bind="text: name, attr: { 'cityId': id }, click: function (d, e) { $parent.selectCity(d, e); }"></li>
                            </script>
                            <div class="margin-top30 font24 text-center margin-top60 "></div>
                        </div>

                        <div class="bw-area-popup-box bwm-city-area-box area-list-container form-control-box text-left" data-bind="visible: BookingAreas().length > 0">
                            <div class="user-input-box">
                                <span class="back-arrow-box">
                                    <span class="bwmsprite back-long-arrow-left"></span>
                                </span>
                                <input type="text" class="form-control padding-right40" placeholder="Type to select area" id="popupAreaInput" autocomplete="off" data-bind="textInput: areaFilter,attr: { value: (SelectedArea() != undefined) ? SelectedArea().name : '' }">
                            </div>
                            <ul id="popupAreaList" data-bind="template: { name: 'bindAreaList-template', foreach: visibleAreas }"></ul>
                            <script type="text/html" id="bindAreaList-template">
                                <li data-bind="text: name, attr: { 'areaId': id }, click: function (d, e) { $parent.selectArea(d, e); }"></li>
                            </script>
                            <div class="margin-top30 font24 text-center margin-top60 "></div>
                        </div>
                    </div>

                 }
                }

            </div>

        </div>
        <div id="popup-loader-container">
            <div class="cover-popup-loader"></div>
            <div class="cover-popup-loader-text">
                <p data-bind="text : LoadingText()" class="font14"></p>
            </div>
        </div>
    </div>
</div>
<!-- pricequote widget ends here-->
<!-- widget script starts here-->
<script type="text/javascript">
    var PopupTriggerSourceEnum = { CitySelectionIcon : 1, LeadCaptureButton : 2 };
    var pCityId = @CityId ,pAreaId = @AreaId ,onCookieObj = {},vmquotation;

    var mPopup = function () {
        var self = this;
        self.MakeName = "";
        self.ModelName = "";
        self.PageCatId = "";
        self.PageSourceId = "";
        self.SelectedModelId = ko.observable();
        self.SelectedCity = ko.observable();
        self.SelectedArea = ko.observable();
        self.SelectedCityId = ko.observable(@Html.Raw(CityId));
        self.SelectedAreaId = ko.observable(@Html.Raw(AreaId));
        self.BookingCities = ko.observableArray([]);
        self.BookingAreas = ko.observableArray([]);
        self.oBrowser = ko.observable(@Html.Raw(isOperaBrowser.ToString().ToLower()));
        self.IsPersistance = ko.observable(false);
        self.IsReload = ko.observable(false);
        self.cityFilter =  ko.observable("");
        self.areaFilter = ko.observable("");
        self.hasAreas = ko.observable();
        self.LoadingText = ko.observable("Loading...");
        self.DealerId = ko.observable();
        self.VersionId = ko.observable();
        self.RedirectUrl = ko.observable("");
        self.areaDropdown = $("#areaSelection");
        self.subTitle = ko.observable("");
        self.popupTriggerSource = ko.observable();
        self.isLeadPopupFlow = ko.computed(function(){ return self.popupTriggerSource() == PopupTriggerSourceEnum.LeadCaptureButton;});
        self.ExitUrl = ko.observable("");
        self.Origin = ko.observable("");
        self.LeadSourceId = ko.observable("");
        self.FilterData = function (data,filter)
        {
            filterObj = data;
            if(filter && filter.length > 0)
            {
                var pat = new RegExp(filter,"i");
                filterObj = data.filter(function(place){
                    if(pat.test(place.name)) return place;
                });

            }
            return filterObj;
        };

        
        self.closeLocationPopup = function () {
            $('.getquotation').removeClass('ui-btn-active');
            $("#popupContent").hide();
            $('#popupWrapper').removeClass('loader-active').hide();
        };

        self.visibleCities = ko.computed(function(){
            return self.FilterData(self.BookingCities(),self.cityFilter());
        });

        self.visibleAreas = ko.computed(function(){
            return self.FilterData(self.BookingAreas(),self.areaFilter());
        });

        self.setOptions = function (options, e) {
            if (options != null) {
                self.popupTriggerSource( e != undefined && e.currentTarget != undefined && e.currentTarget.dataset!= undefined && e.currentTarget.dataset.popupsource === 'leadcapturebtn'? 
                    PopupTriggerSourceEnum.LeadCaptureButton : PopupTriggerSourceEnum.CitySelectionIcon);
                if(options.isleadpopstateflow != undefined && options.isleadpopstateflow)
                {
                    self.popupTriggerSource(PopupTriggerSourceEnum.LeadCaptureButton);
                }

                if(self.isLeadPopupFlow()) {
                    self.subTitle("We will connect you to nearest authorized dealership.");
                    appendState('fetchCampaign');
                }
                else {
                    self.subTitle("Get on-road prices by just sharing your location!");
                    appendHash("onRoadPrice");
                    appendState('onRoadPrice');
                }

                $('#popupWrapper').addClass('loader-active').show();
                $("#popupContent").show();

                self.SelectedModelId(options.modelId || 0);
                self.SelectedCityId(options.cityId || 0);

                if (self.SelectedCityId() == 0)  self.LoadingText('Fetching Cities...');

                self.SelectedAreaId(options.areaId || 0);
                self.SelectedCity(options.city || null);
                self.SelectedArea(options.area || null);
                self.ModelName = options.modelname || "";
                self.MakeName = options.makename || "";
                self.PageCatId = options.pagecatid || "";
                self.PageSourceId = options.pagesrcid || "";
                self.IsPersistance(options.ispersistent || false);
                self.IsReload(options.isreload || false);
                self.DealerId(options.dealerid || 0);
                self.VersionId(options.versionid || 0);
                self.RedirectUrl(options.redirectUrl || "");
                self.ExitUrl(options.exitUrl || "");
                self.Origin(options.origin);
                self.LeadSourceId(options.leadsourceid || "");
                if (self.IsPersistance())  self.LoadingText("Loading locations...");

                if (self.SelectedModelId()) {
                    self.InitializePQ();
                }

                if(!self.isLeadPopupFlow()) {
                    gtmCodeAppender(self.PageCatId, "Get_On_Road_Price_Click", self.MakeName + "_" + self.ModelName);
                }
            }
        };

        self.createMPQ = function (pqId) {
            if (self.SelectedCityId() && self.SelectedModelId() && self.VersionId() && pqId) {
                return btoa("CityId=" + self.SelectedCityId() + "&AreaId=" + +self.SelectedAreaId() +"&PQId=" + pqId +"&VersionId=" + self.VersionId() + "&DealerId=" + self.DealerId());
            }
        };

        self.InitializePQ = function(isLocChanged)
        {
            $('#popupWrapper').addClass('loader-active');

            if (self.SelectedModelId() != null && self.SelectedModelId()  > 0) {
                var objData = {
                    "CityId":self.SelectedCityId(),
                    "AreaId":self.SelectedAreaId(),
                    "ModelId":self.SelectedModelId(),
                    "ClientIP":"",
                    "SourceType":"2",
                    "VersionId": self.VersionId(),
                    "pQLeadId":self.PageSourceId,
                    'deviceId': getCookie('BWC'),
                    'isPersistance' : self.IsPersistance()  ,
                    'refPQId': typeof pqId != 'undefined' ? pqId : '',
                    'isReload' : self.IsReload()
                };

                $.ajax({
                    type: "POST",
                    url: "/api/v2/generatepq/",
                    data : objData,
                    dataType: 'json',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('utma', getCookie('__utma'));
                        xhr.setRequestHeader('utmz', getCookie('_bwutmz'));
                    },
                    success: function (response) {
                        var _responseData = ko.toJS(response);
                        if (_responseData && _responseData.pqCities && _responseData.pqCities.length > 0) {

                            var cities = ko.toJS(_responseData.pqCities);
                            if (cities!=null && cities.length > 0) {
                                self.BookingCities(cities);
                                if(self.SelectedCityId() > 0)
                                {
                                    self.SelectedCity(self.findItemById(self.BookingCities(), "id", self.SelectedCityId()));

                                    self.hasAreas((self.SelectedCity() != null && self.SelectedCity().hasAreas) ? true : false);

                                    var areas = ko.toJS(_responseData.pqAreas);
                                    if (areas != null && areas.length > 0) {

                                        self.BookingAreas(areas);
                                        if (self.SelectedAreaId() > 0) {
                                            self.SelectedArea(self.findItemById(self.BookingAreas(), "id", self.SelectedAreaId()));
                                        }
                                        else self.SelectedArea(null);
                                    }
                                    else{
                                        self.BookingAreas([]);
                                        self.SelectedArea(null);
                                        self.SelectedAreaId(0);
                                    }
                                }
                            }
                            $('#popupWrapper').removeClass('loader-active');

                        }
                        else  if(_responseData.priceQuote != null) {

                            cityArea.close();

                            var jsonObj = _responseData.priceQuote;


                            if (self.SelectedCityId() > 0 ) {
                                if (self.SelectedCity() && self.SelectedCity().id > 0) {
                                    lbtext = "Fetching on-road price for " + self.SelectedCity().name;
                                    cookieValue = self.SelectedCity().id + "_" + self.SelectedCity().name;
                                    if (self.SelectedArea() && jsonObj.isDealerAvailable) {
                                        cookieValue += ("_" + self.SelectedArea().id + "_" + self.SelectedArea().name);
                                        lbtext = "Fetching on-road price for " + (self.SelectedArea().name + ", " + self.SelectedCity().name);
                                    }
                                    if (self.SelectedCityId() != onCookieObj.PQCitySelectedId || (self.SelectedAreaId() > 0 && jsonObj.isDealerAvailable))
                                        SetCookieInDays("location", cookieValue, 365);

                                    self.LoadingText(lbtext);
                                }

                            }

                            gaLabel = GetGlobalCityArea() + ', ';

                            if (self.MakeName || self.ModelName )
                                gaLabel += self.MakeName + ',' + self.ModelName + ',';


                            if(jsonObj.dealerId > 0)
                                gtmCodeAppender(self.PageCatId, 'Dealer_PriceQuote_Success_Submit', gaLabel);
                            else gtmCodeAppender(self.PageCatId, 'BW_PriceQuote_Success_Submit', gaLabel);

                            if (self.DealerId() > 0 && _responseData.qStr.length) {
                                _responseData.qStr = self.createMPQ(_responseData.priceQuote.quoteId);
                            }
                            self.triggerABTestGA();
                            if(self.RedirectUrl() != "")
                            {
                                window.location.href = self.RedirectUrl();
                            }
                            else if(!self.IsReload() && _responseData.qStr!='')
                            {
                                window.location.href = "/m/pricequote/dealer/" + "?MPQ=" + _responseData.qStr + "&exiturl=" + self.ExitUrl();
                            }
                            else  window.location.reload(true);
                        }
                        else
                        {
                            if (self.SelectedCityId() > 0 ) {
                                if (self.SelectedCity() && self.SelectedCity().id > 0) {
                                    lbtext = "Fetching on-road price for " + self.SelectedCity().name;
                                    cookieValue = self.SelectedCity().id + "_" + self.SelectedCity().name;
                                    if (self.SelectedArea() && self.SelectedArea().id > 0 ) {
                                        cookieValue += ("_" + self.SelectedArea().id + "_" + self.SelectedArea().name);
                                        lbtext = "Fetching on-road price for " + (self.SelectedArea().name + ", " + self.SelectedCity().name);
                                    }
                                    if (self.SelectedCityId() != onCookieObj.PQCitySelectedId || self.SelectedAreaId() > 0)
                                        SetCookieInDays("location", cookieValue, 365);

                                    self.LoadingText(self.isLeadPopupFlow() ? "" : lbtext);
                                }

                            }
                            self.triggerABTestGA();
                            if(self.isLeadPopupFlow()) {
                                if(typeof(LeadPopupState) != "undefined") {
                                    self.closeLocationPopup();
                                    if(LeadPopupState.setLeadOrigin != undefined)
                                        LeadPopupState.setLeadOrigin(self.Origin(), self.LeadSourceId());
                                    if(LeadPopupState.fetchCampaign != undefined)
                                    LeadPopupState.fetchCampaign();
                                }
                            }
                            else {
                                if(self.RedirectUrl() != "") {
                                    window.location.href = self.RedirectUrl();
                                }
                                else if (self.VersionId() != 0){
                                    window.location.href = window.location.origin + window.location.pathname + "?versionId=" + self.VersionId() + "#onRoadPrice";
                                }
                                else {
                                    window.location.reload(true);
                                }
                            }
                        }
                    }
                });
            }
        };


        self.selectCity = function (data, event) {

            if (!self.oBrowser()) {
                $(".bwm-city-area-popup-wrapper .back-arrow-box").click();
                self.SelectedCity(data);
                self.SelectedCityId(data.id);
            }
            else {
                self.SelectedCity(findCityById(self.SelectedCityId()));
                if(!event.originalEvent) return;
            }

            if(self.SelectedCity()!=null && !self.SelectedCity().hasAreas)
            {
                $('#city-area-content').addClass('city-selected');
                self.LoadingText(self.isLeadPopupFlow() ? "" : "Fetching on-road price for " + self.SelectedCity().name);
                self.IsPersistance(false);
            }
            else{
                self.LoadingText("Loading areas for " + self.SelectedCity().name);
            }

            self.SelectedArea(null);
            self.SelectedAreaId(0);
            self.BookingAreas([]);

            if (self.SelectedCity().hasAreas || self.SelectedCity().id != onCookieObj.PQCitySelectedId) {
                self.InitializePQ(true);
                areaSelectionClick();
            }

            if (ga_pg_id != null && ga_pg_id == 2) {
                var actText = '';
                if (self.SelectedCity().hasAreas) {
                    actText = 'City_Selected_Has_Area';
                }
                else {
                    actText = 'City_Selected_Doesnt_Have_Area';
                }
                dataLayer.push({ 'event': 'Bikewale_all', 'cat': 'Model_Page', 'act': actText, 'lab': getBikeVersion() + '_' + self.SelectedCity().name });
            }

        };

        self.selectArea = function (data, event) {

            if (!self.oBrowser()) {
                $(".bwm-city-area-popup-wrapper .back-arrow-box").click();
                self.SelectedArea(data);
                self.SelectedAreaId(data.id);
            }
            else {
                self.SelectedArea(findAreaById(self.SelectedAreaId()));
                if(!event.originalEvent) return;
            }

            self.IsPersistance(false);

            if(data.id != onCookieObj.PQAreaSelectedId){
                self.LoadingText(self.isLeadPopupFlow() ? "": "Fetching on-road price for " + self.SelectedArea().name + ", " + self.SelectedCity().name);
                self.InitializePQ(true);
            }

            if (ga_pg_id != null && ga_pg_id == 2 ) {
                dataLayer.push({ 'event': 'Bikewale_all', 'cat': 'Model_Page', 'act': 'Area_Selected', 'lab': self.MakeName + ' ' + self.ModelName + '_' + getBikeVersion() + '_' + self.SelectedCity().name + '_' + self.SelectedArea().name });
            }


        };

        self.CheckCookies = function () {
            try {
                c = document.cookie.split('; ');
                for (i = c.length - 1; i >= 0; i--) {
                    C = c[i].split('=');
                    if (C[0] == "location") {
                        var cData = (String(C[1])).split('_');
                        onCookieObj.PQCitySelectedId = parseInt(cData[0]) || 0;
                        onCookieObj.PQCitySelectedName = cData[1] || "";
                        onCookieObj.PQAreaSelectedId = parseInt(cData[2]) || 0;
                        onCookieObj.PQAreaSelectedName = cData[3] || "";
                        break;
                    }
                }
            } catch (e) {
                console.warn(e);
            }
        };

        self.findItemById = function (items, attr, item) {
            return ko.utils.arrayFirst(items, function (child) {
                return (child[attr] == item);
            });
        };

        self.triggerABTestGA = function () {
            try {
                var abuser = getCookie("_bwtest"),
                    bikeandcity = self.MakeName + "_" + self.ModelName + "_" + (self.SelectedCity() ? self.SelectedCity().name : ""),
                    pgSource = (gaObj ? gaObj.id : 0);
                bikeandcity = bikeandcity.replace("/\s+/gi", "_");
                triggerGA("PQ_PopUP", "PQSuccess", abuser + "_" + pgSource + "_" + bikeandcity);
            }
            catch (e) {
                console.log(e.message)
            }
        };
    };

    docReady(function(){
        $('#popupWrapper .close-btn').click(function () {
            var rUrl=$(this).data("returnurl");
            if(vmquotation.isLeadPopupFlow()){
                triggerGA("LocationPopUp", "CloseClick", leadBikeName);
                cwTracking.trackCustomData("LocationPopUp", "CloseClick", "modelname=" + leadBikeName );
            }
            if (rUrl && rUrl != "")
            {
                window.location=rUrl;
            }
            
            vmquotation.closeLocationPopup();
        });

        $(document).on("click", ".getquotation", function (e) {
            var ele = $(this); e.stopPropagation();

            vmquotation.CheckCookies();
            var options = {
                "modelId": ele.attr('data-modelid') ,
                "cityId": onCookieObj.PQCitySelectedId,
                "areaId": onCookieObj.PQAreaSelectedId,
                "city" : (onCookieObj.PQCitySelectedId > 0)?{ 'id': onCookieObj.PQCitySelectedId, 'name': onCookieObj.PQCitySelectedName }:null,
                "area" : (onCookieObj.PQAreaSelectedId > 0)?{ 'id': onCookieObj.PQAreaSelectedId, 'name': onCookieObj.PQAreaSelectedName }:null,
                "makename" : ele.attr('data-makeName'),
                "modelname" : ele.attr('data-modelName'),
                "pagecatid" : ele.attr('data-pagecatid'),
                "pagesrcid" : ele.attr('data-pqSourceId'),
                "ispersistent" : ele.attr('data-persistent') !=null ? true : false,
                "isreload" : ele.attr("data-reload") !=null ? true : false,
                "versionid" : ele.attr("data-versionid") != undefined ? ele.attr("data-versionid") : 0,
                "origin": ele.attr("data-origin"),
                "leadsourceid": ele.attr("data-leadsourceid")
            };

            options.cityId = ele.attr('data-preselcity') || options.cityId;

            vmquotation.setOptions(options, e);

        });

        vmquotation = new mPopup;
        ko.applyBindings(vmquotation, $("#popupWrapper")[0]);
    });

    function gtmCodeAppender(pageId, action, label) {
        var category = '';
        if (pageId != null) {
            switch (pageId) {
                case "1":
                    category = 'Make_Page';
                    break;
                case "2":
                    category = "CheckPQ_Series";
                    action = "CheckPQ_Series_" + action;
                    break;
                case "3":
                    category = "Model_Page";
                    action = "CheckPQ_Model_" + action;
                    break;
                case '4':
                    category = 'New_Bikes_Page';
                    break;
                case '5':
                    category = 'HP';
                    break;
                case '6':
                    category = 'Search_Page';
                    break;
                case "7":
                    category = "Editorial_List_Page";
                    break;
                case "8":
                    category = "Editorial_Details_Page";
                    break;
                case "9":
                    category = "Make_Page_AMP";
                    break;
            }
            if (label) {
                dataLayer.push({ 'event': 'Bikewale_all', 'cat': category, 'act': action, 'lab': label });
            }
            else {
                dataLayer.push({ 'event': 'Bikewale_all', 'cat': category, 'act': action });
            }
        }

    }


</script>
<!-- widget script ends here-->