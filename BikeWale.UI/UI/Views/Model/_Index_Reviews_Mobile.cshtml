@model Bikewale.Models.BikeModels.ModelPageVM
<div class="rating-review-content">
@if (Model.ModelPageEntity != null && Model.ModelPageEntity.ModelDetails != null && Model.ModelPageEntity.ModelDetails.ReviewRate > 0)
{
    <div class="inline-block margin-right5">
        <span class="rate-count-@Math.Round(Convert.ToDouble(Model.ModelPageEntity.ModelDetails.ReviewUIRating))">
            <span class="bwmsprite star-icon"></span>
            <span class="font14 text-bold">@Model.ModelPageEntity.ModelDetails.ReviewUIRating</span>
        </span>
 </div>
}
    <div class="model-top__review-list">
        @if (Model.ModelPageEntity != null && Model.ModelPageEntity.ModelDetails != null && Model.ModelPageEntity.ModelDetails.ReviewRate > 0 && Model.ModelPageEntity.ModelDetails.RatingCount > 0)
        {
        <span class="model-top-review-list__item">
            @if (Model.ModelPageEntity.ModelDetails.ReviewCount > 0)
            {
                <a href="@string.Format("/m{0}", Bikewale.Utility.UrlFormatter.FormatShowReviewLink(Model.ModelPageEntity.ModelDetails.MakeBase.MaskingName, Model.ModelPageEntity.ModelDetails.MaskingName))" title="@string.Format("{0} {1} review{2}", Model.ModelPageEntity.ModelDetails.MakeBase.MakeName, Model.ModelPageEntity.ModelDetails.ModelName, (Model.ModelPageEntity.ModelDetails.ReviewCount > 1 ? "s" : ""))" class="leftfloat font12">
                    <span>@Model.ModelPageEntity.ModelDetails.ReviewCount</span><span>&nbsp;Review@((Model.ModelPageEntity.ModelDetails.ReviewCount) > 1 ? "s" : "")</span>
                </a>
            }
        </span>
        }
        else
        {
            <span class="model-top-review-list__item">
                <span class="star-span star-zero-icon leftfloat"></span>
                <span class="font12 text-light-grey leftfloat">Not rated yet</span>
            </span>
          
        }
        @{
            var ModelDetails = Model.ModelPageEntity.ModelDetails;
            var MakeDetails = Model.ModelPageEntity.ModelDetails.MakeBase;
            string q = Bikewale.Utility.EncodingDecodingHelper.EncodeTo64(string.Format("csrc={0}&makeId={1}&modelId={2}&makeName={3}&modelName={4}&makeMaskingName={5}&modelMaskingName={6}", (int)Bikewale.Entities.UserReviews.UserReviewPageSourceEnum.Mobile_ModelPage, MakeDetails.MakeId, ModelDetails.ModelId, MakeDetails.MakeName, ModelDetails.ModelName, MakeDetails.MaskingName,ModelDetails.MaskingName));

        }

        <a class="model-top-review-list__item bw-ga bw-anchor-link" rel="nofollow" href="javascript:void(0)" data-href="@string.Format("/m/bike-review-contest/?q={0}" , q)" l='@string.Format("{0}_{1}", Model.ModelPageEntity.ModelDetails.MakeBase.MakeName, Model.ModelPageEntity.ModelDetails.ModelName)' data-act="Clicked_RateThisBike" data-cat="Model_Page">
            <span>Rate & Win</span>
        </a>
        @if (Model.IsQAModel)
        {
            if (Model.IsQAAvailable)
            {
                <a href="@(Model.QAUrl)" title="@(Model.BikeName) Questions and Answers">
                    <span id="qnaReviewListItem" class="model-top-review-list__item bw-ga" data-cat="Model_Page" data-act="Q&A_Link_Clicked" data-lab="@(MakeDetails != null && ModelDetails != null ? String.Format("{0}_{1}", MakeDetails.MakeName, ModelDetails.ModelName) : "")">
                        Q&amp;A (@(Model.QACount))
                    </span>
                </a>
            }
            else
            {
                <span id ="askQuestionReviewListItem" class="ask-question__link model-top-review-list__item" data-platform="@((int)Model.QASlug.Platform)" data-source="@((int)Bikewale.Entities.QuestionAndAnswers.Sources.ModelPage_Top_Ask_Question_Link)" data-modelid="@Model.ModelId" data-tags="@Model.QASlug.Tags">Ask a Question</span>   
            }
        }
       
    </div>
</div>



