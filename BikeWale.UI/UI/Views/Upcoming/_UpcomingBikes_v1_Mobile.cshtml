@model IEnumerable<Bikewale.Entities.BikeData.UpcomingBikeEntityBase>
@using Bikewale.Utility
@if (Model != null && Model.Any())
{

	<div>
		@if (Model != null && Model.Count() == 1)
				{
					var firstUpcomingModel = Model.FirstOrDefault();
			<div class="model-card margin-left15 margin-right15">
				<a href="@string.Format("/m/{0}-bikes/{1}/", firstUpcomingModel.BikeMake.MakeMaskingName, firstUpcomingModel.BikeModel.MaskingName)" title="@string.Format("{0} {1}", firstUpcomingModel.BikeMake.MakeName, firstUpcomingModel.BikeModel.ModelName)">
					<div class="model-card__image">
						<img class="lazy" data-original="@Image.GetPathToShowImages(firstUpcomingModel.BikeImage.OriginalImagePath, firstUpcomingModel.BikeImage.HostUrl, ImageSize._310x174, QualityFactor._70)" alt="@string.Format("{0} {1}", firstUpcomingModel.BikeMake.MakeName, firstUpcomingModel.BikeModel.ModelName)" src="" border="0">
					</div>
					<div class="model-card__desc">
						<div class="model-card__list">
							<div class="model-card__list-block">
								<h3 class="model-card__label">@string.Format("{0} {1}", firstUpcomingModel.BikeMake.MakeName, firstUpcomingModel.BikeModel.ModelName)</h3>
							</div>
							<div class="model-card__list-block">
								<p class="model-card__sub-title">Expected Price</p>
								<p class="font18">&#x20b9; <span class="font-bold">@Format.FormatPrice(Convert.ToString(firstUpcomingModel.ExpectedPrice.MinPrice), Convert.ToString(firstUpcomingModel.ExpectedPrice.MaxPrice))</span></p>
							</div>
							<div class="model-card__list-block">
								<p class="model-card__sub-title">Expected launch date</p>
								<p class="font16 font-bold">@FormatDate.GetFormatDate(Convert.ToString(firstUpcomingModel.ExpectedLaunch), "MMM yyyy")</p>
							</div>
						</div>
					</div>
				</a>
			</div>
				}
				else
				{
			<div class="swiper-container upcoming-model-swiper card-container">
				<div class="swiper-wrapper">
					@foreach (var bike in Model)
					{
						<div class="swiper-slide">
							<div class="model-card">
								<a href="@string.Format("/m/{0}-bikes/{1}/", bike.BikeMake.MakeMaskingName, bike.BikeModel.MaskingName)" title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)">
									<div class="model-card__image">
										<img class="swiper-lazy" data-src="@Image.GetPathToShowImages(bike.BikeImage.OriginalImagePath, bike.BikeImage.HostUrl, ImageSize._310x174, QualityFactor._70)" alt="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" src="" border="0">
									</div>
									<div class="model-card__desc">
										<div class="model-card__list">
											<div class="model-card__list-block">
												<h3 class="model-card__label">@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)</h3>
											</div>
											<div class="model-card__list-block">
												<p class="model-card__sub-title">Expected Price</p>
												<p class="font18">&#x20b9; <span class="font-bold">@Format.FormatPrice(Convert.ToString(bike.ExpectedPrice.MinPrice), Convert.ToString(bike.ExpectedPrice.MaxPrice))</span></p>
											</div>
											<div class="model-card__list-block">
												<p class="model-card__sub-title">Expected launch date</p>
												<p class="font16 font-bold">@FormatDate.GetFormatDate(Convert.ToString(bike.ExpectedLaunch), "MMM yyyy")</p>
											</div>
										</div>
									</div>
								</a>
							</div>
						</div>
					}
				</div>
			</div>
				}
	</div>

	}
