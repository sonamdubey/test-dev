@model Bikewale.Models.WriteReviewPageVM
@{
    Model.Page_ATF_CSS = "<link rel='stylesheet' type='text/css' href='/m/css/user-review/write-review.css' inline />";
    Model.Page_JS_Path = "/m/src/user-review/write-review.js";
    Layout = "~/Views/Shared/_Layout_Mobile.cshtml";
    Model.PageMetaTags.CanonicalUrl = string.Format("https://www.bikewale.com/rate-your-bike/{0}/", Model.Model.ModelId);
}

@if (Model != null && Model.Make != null && Model.Model != null && Model.Rating != null)
{
	<section>
		<div class="contest-slug-sm slug-grey-info">
			<span class="bwmsprite trophy-grey"></span>
			<p class="contest-slug__label">Great! A detailed review can win you Amazon voucher worth &#x20B9;1000</p>
		</div>
	</section>

    <form action="/user-reviews/save/" method="post">
        <section>
            <div id="write-review-form">
                <div class="container content-box-shadow card-bottom-margin font14">
                    <div class="padding-10-20 content-box-shadow">
                        <div class="model-image-grid inline-block">
                            <img src="@Bikewale.Utility.Image.GetPathToShowImages(Model.OriginalImagePath, Model.HostUrl, Bikewale.Utility.ImageSize._110x61, Bikewale.Utility.QualityFactor._75)" alt="" />
                        </div>
                        <div class="model-details-grid inline-block">                           
                            <h1 class="text-truncate margin-bottom5">@Model.Make.MakeName @Model.Model.ModelName</h1>
                            <div>
                                <span class="font12 text-slate-grey">You rated:</span><span class="bwmsprite star-one"></span><span class="text-bold">@Model.Rating.Value</span><span class="font12 text-xx-light">/5</span>
                            </div>                            
                        </div>
                    </div>
                    <div class="write-review-padding">
                        <h2 class="margin-bottom10">@Model.Rating.ResponseHeading</h2>
                        <p class="text-slate-grey margin-bottom10">Tell us more about it. You may consider writing about:</p>
                        <ol id="guidelineList" class="numeric-list margin-bottom15">
                            <li>Buying experience</li>
                            <li>Riding experience</li>
                            <li>Details about looks, performance etc.</li>
                            <li>Servicing and maintenance</li>
                            <li>Pros and Cons</li>
                        </ol>
                        <div class="textarea-box margin-bottom15">
                            <textarea id="reviewDesc" data-validate="@((Model.SubmitResponse != null && !string.IsNullOrEmpty(Model.SubmitResponse.ReviewErrorText)) ? Model.SubmitResponse.ReviewErrorText : "")" data-bind="textInput: detailedReview" rows="9" cols="42" maxlength="7999" placeholder="@Html.Raw("Write a detailed review & stand a chance to win Amazon vouchers worth &#x20B9; 1,000.")"></textarea>

                            <div data-bind="visible: !detailedReviewFlag() && descLength() < 300" class="review-char-count position-abt font12">
                                <span data-bind="visible: descLength() > 0"><span data-bind="text: descLength"></span>/</span><span data-bind="text: reviewCharLimit"></span>&nbsp;min
                            </div>

                            <div data-bind="visible: detailedReviewFlag" class="textarea-error position-abt">
                                <span class="error-text" data-bind="text: detailedReviewError"></span>
                            </div>
                        </div>

                        <h3 class="font15 margin-bottom10">Give a title to your review</h3>
                        <p class="text-slate-grey margin-bottom20">A catchy title will grab eyeballs, and more people will read your review.</p>

                        <div class="input-box form-control-box" data-bind="css: reviewTitle().length > 0 ? 'not-empty' : ''">
                            <input name="reviewTitle" type="text" id="getReviewTitle" maxlength="149" data-validate="@((Model.SubmitResponse != null && !string.IsNullOrEmpty(Model.SubmitResponse.TitleErrorText)) ? Model.SubmitResponse.TitleErrorText : "")" data-bind="textInput: reviewTitle" />
                            <label for="getReviewTitle">Your title</label>
                            <span class="boundary"></span>
                            <span class="error-text"></span>
                        </div>

                    </div>
                </div>

                <div class="container content-box-shadow content-inner-block-20 card-bottom-margin font14">
                    <h2 class="padding-bottom20">Can you share a little more about this bike?<span class="text-light-grey text-unbold font14">&nbsp;(Optional)</span></h2>

					<div class="review-question-mileage">
                        <p class="margin-bottom5 text-bold">Mileage</p>
						<p class="text-slate-grey margin-bottom15">What mileage does your bike offer? Enter a numeric value between 0 & 150.</p>
						<div class="input-box form-control-box" data-bind="css: bikeMileage() && bikeMileage().length > 0 ? 'not-empty' : ''">
							<input name="mileage" type="number" id="getMileage" data-bind="textInput: bikeMileage" maxlength="190">
							<label for="getMileage">Your mileage (kmpl)</label>
							<span class="boundary"></span>
							<span class="error-text"></span>
						</div>
					</div>

                    <ul id="bike-review-questions" data-make-model="@string.Format("{0}_{1}_", Model.Make.MakeName, Model.Model.ModelName)" class="review-question-list margin-bottom20" data-bind="foreach: reviewQuestions">
                        <!-- ko if: displayType == 1 -->
                        <li class="list-item question-type-star">
                            <p class="item-title" data-bind="text: heading"></p>
                            <p class="item-subtitle" data-bind="text: description"></p>

                            <div class="answer-star-list inline-block" data-bind="foreach: rating.slice(0).reverse()">
                                <input type="radio" data-bind="attr: {questiontId : $parent.qId, id: 'review-' + $parent.qId + '-' + (5 - $index()), name: 'review-q-' + $parentContext.$index(), value: (5 - $index())}" data-type="star" />
                                <label class="bwmsprite star-zero" data-bind="attr: {for: 'review-' + $parent.qId + '-' + (5 - $index()), 'data-value': (5 - $index())}"></label>
                            </div>
                            <p class="feedback-text inline-block"></p>
                        </li>
                        <!-- /ko -->
                        <!-- ko if: displayType == 2 -->
                        <li class="list-item question-type-text">
                            <p class="item-title" data-bind="text: heading"></p>
                            <p class="item-subtitle" data-bind="text: description"></p>

                            <div class="answer-radio-list" data-bind="foreach: rating">
                                <input type="radio" data-bind="attr: {questiontId : $parent.qId, id: 'review-' + $parent.qId + '-' + ($index() + 1), name: 'review-q-' + $parentContext.$index(), value: $index() + 1}" data-type="text" />
                                <label data-bind="attr: {for: 'review-' + $parent.qId + '-' + ($index() + 1), name: 'review-q-' + $parentContext.$index(), 'data-value': $index() + 1}, text: ratingText"></label>
                            </div>
                            <div class="clear"></div>
                        </li>
                        <!-- /ko -->
                    </ul>
                    <div class="clear"></div>

                    <input type="hidden" id="reviewQuestion" name="reviewQuestion" />
                    <input type="hidden" id="formattedDescripton" name="reviewDescription" />
                    <input type="hidden" id="reviewId" name="reviewId" value="@Model.ReviewId" />
                    <input type="hidden" name="encodedId" value="@Utils.Utils.EncryptTripleDES(string.Format("customerid={0}&reviewid={1}", Model.CustomerId, Model.ReviewId))" />
                    <input type="hidden" name="userName" value="@Model.UserName" />
                    <input type="hidden" name="emailId" value="@Model.EmailId" />
                    <input type="hidden" name="makeName" value="@Model.Make.MakeName" />
                    <input type="hidden" name="modelName" value="@Model.Model.ModelName" />
                    <input type="hidden" name="encodedString" value="@Model.EncodedWriteUrl" />  
                    <input type="hidden" id="pageSourceId" value="@Model.PageSourceId" />
                    <input type="hidden" id="overAllRatings" value="@Model.Rating.Value" />                  
                    <input type="hidden" id="contestSrc" value="@Model.ContestSrc" />
                    <h3 class="font15 margin-bottom10">Maintenance tips for other riders</h3>
                    <p class="text-light-grey margin-bottom10">Share key tips which you think were useful while owning/riding this bike.</p>
                    <div class="textarea-box margin-bottom15">
                    <textarea name="reviewTips" data-bind="textInput: reviewTips" rows="3" cols="42" placeholder="Eg. Change oil after 3,000 kms, Use tubeless tyres etc" maxlength="1000"></textarea>
                    </div>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="queryEncoded" value="@Model.EncodedWriteUrl" />
                    <input id="submitReviewBtn" type="submit" class="btn btn-orange" value="Submit review" data-bind="click: submitReview" />
                </div>
            </div>

            <span id="review-page-data" class="hide">@Model.JsonReviewSummary</span>
            <span id="review-question-list" class="hide">@Model.JsonQuestionList</span>
            <span id="previousPageUrl" class="hide">@Model.PreviousPageUrl</span>
        </section>
    </form>
}
<script type="text/javascript">
    var page = "writeReview";
    var vmWriteReview;
    window.addEventListener("beforeunload", function (event) {
        vmWriteReview.SaveToBwCache();
    });
</script>