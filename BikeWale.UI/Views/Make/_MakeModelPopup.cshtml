@model Bikewale.Models.Make.UserReviewPopupVM

<div class="bw-popup hide bw-popup-sm" id="divUserReviewBikePopup">
    <div class="popup-inner-container">
        <div class="bwsprite popup-close-btn close-btn position-abt pos-top10 pos-right10 cur-pointer"></div>
        <div class="cityPop-icon-container">
            <div class="icon-outer-container rounded-corner50 margin-bottom20">
                <div class="icon-inner-container rounded-corner50">
                    <span class="bwsprite cityPopup-icon margin-top20"></span>
                </div>
            </div>
        </div>


        <p class="font18 margin-top15 text-center">Help fellow bikers make the right choice</p>
        <p class="text-light-grey margin-bottom15 margin-top15 text-center">Select brand and model to write a review</p>

        <div class="padding-top10">
            <div id="divMakesPopup" class="margin-top10 form-control-box">
                <div>
                    <select id="ddlMakesPopup" class="chosen-select" data-placeholder="--Select Brand--" data-bind="
                            value: selectedMake,
                            event: {change: onMakeChange}
                            ">
                        <option value="" selected disabled>--Select Brand--</option>
                        @if (Model != null && Model.Makes != null && Model.Makes.Count() > 0)
                        {
                            foreach (var make in Model.Makes)
                            {
                                <option value="@make.MakeId">@make.MakeName</option>
                            }
                        }
                    </select>
                    <span class="bwsprite error-icon error-tooltip-siblings"></span>
                    <div class="bw-blackbg-tooltip error-tooltip-siblings"></div>
                </div>
                <span class="position-abt progress-bar"></span>
            </div>

            <div id="divModelsPopup" class="margin-top10 form-control-box">
                <div class="placeholder-loading-text form-control">Loading Models..<span class="fa fa-spinner fa-spin position-abt text-black btnSpinner"></span></div>
                <div class="divModelsSelectPopup">
                    <select data-placeholder="--Select Model--" class="chosen-select" id="ddlModelsPopup" tabindex="2" data-bind="options: models, value: selectedModel, optionsText: 'modelName', optionsValue: 'modelId', optionsCaption: '--Select Model--', event: {change: onModelChange}, chosen: {width: '100%'}"></select>
                    <span class="bwsprite error-icon error-tooltip-siblings"></span>
                    <div class="bw-blackbg-tooltip error-tooltip-siblings"></div>
                </div>
                <span class="position-abt progress-bar"></span>
            </div>

            <input id="btnWriteYourReviewPopup" data-bind="event: {click: onClickWriteReview}" class="action-btn margin-top15 margin-left70 " style="display: block;" type="button" value="Write Your Review">
        </div>
    </div>
</div>


<script type="text/javascript">
    var ddlMakesPopup;
    var ddlModelsPopup;

    docReady(function () {
        ddlMakesPopup = $('#ddlMakesPopup');
        ddlModelsPopup = $('#ddlModelsPopup');

        var makeModelPopupModel = function () {
            var self = this;
            var modelCacheKeyPrefix = "userReviewsPopupModels-";
            self.selectedMake = ko.observable();
            self.models = ko.observableArray([]);
            self.selectedModel = ko.observable();

            self.showMakeModelError = function (errMsgParent, errMsg) {
                errMsgParent.find('.error-tooltip-siblings').show();
                errMsgParent.css({ 'border-color': 'red' });
                errMsgParent.find('.bw-blackbg-tooltip').text("Please select " + errMsg);
            };

            self.removeMakeModelError = function (errMsgParent) {
                errMsgParent.css({ 'border-color': '#ccc' });
                errMsgParent.find('.error-tooltip-siblings').hide();
                errMsgParent.find('.bw-blackbg-tooltip').text("");
            };

            self.checkCacheModels = function checkCacheCityAreas(cityId) {
                bKey = modelCacheKeyPrefix + cityId;
                if (bwcache.get(bKey)) return true;
                else return false;
            }

            self.onModelChange = function () {
                if (!isNaN(self.selectedModel()) && self.selectedModel() != "0") {
                    self.removeMakeModelError($("#divModelsPopup.form-control-box"));
                }
            };

            self.onMakeChange = function () {
                if (!isNaN(self.selectedMake()) && self.selectedMake() != "0") {
                    self.removeMakeModelError($("#divMakesPopup.form-control-box"));
                    $("#divModelsPopup .divModelsSelectPopup").hide();
                    $("#divModelsPopup .placeholder-loading-text").show();

                    if (!self.checkCacheModels(self.selectedMake())) {
                        $.ajax({
                            type: "GET",
                            url: "/api/modellist/?requestType=3&makeId=" + self.selectedMake(),
                            contentType: "application/json",
                            dataType: 'json',
                            success: function (responseData) {
                                bwcache.set(modelCacheKeyPrefix + self.selectedMake(), responseData.modelList, 15);
                                self.models(responseData.modelList);
                                self.selectedModel(undefined);
                                ddlModelsPopup.trigger("chosen:updated").chosen({ "width": "100%" });
                            },
                            complete: function (xhr) {
                                if (xhr.status == 404 || xhr.status == 204) {
                                }
                            }
                        });
                    }
                    else {
                        cachedModels = bwcache.get(modelCacheKeyPrefix + self.selectedMake());
                        self.models(cachedModels);
                        self.selectedModel(undefined);
                        ddlModelsPopup.trigger("chosen:updated").chosen({ "width": "100%" });
                    }
                }
                else {
                    self.models(null);
                    self.selectedModel(undefined);
                    ddlModelsPopup.trigger("chosen:updated").chosen({ "width": "100%" });
                }

                $("#divModelsPopup .placeholder-loading-text").hide();
                $("#divModelsPopup .divModelsSelectPopup").show();
            }

            self.onClickWriteReview = function () {
                var isValidMakeModel = false;
                if (Number(self.selectedMake()) <= 0 || isNaN(Number(self.selectedMake())))
                    self.showMakeModelError($("#divMakesPopup.form-control-box"), "Make");
                else if (Number(self.selectedModel()) <= 0 || isNaN(Number(self.selectedModel())))
                    self.showMakeModelError($("#divModelsPopup.form-control-box"), "Model");
                else
                    isValidMakeModel = true;

                if (isValidMakeModel)
                    window.location = "/rate-your-bike/" + self.selectedModel() + "/?q=" + $('#querystring').data('query');

            }
        };

        ko.applyBindings(makeModelPopupModel, $("#divUserReviewBikePopup")[0]);

        $('.error-tooltip-siblings').hide();
        $("#divModelsPopup .placeholder-loading-text").hide();

        $('#divUserReviewBikePopup .close-btn, .blackOut-window').mouseup(function () {
            popup.unlock();
            $('#divUserReviewBikePopup').fadeOut(100);
        });

        $('body').on('click', "#bannerTargetBtn", function (e) {
            $('#divUserReviewBikePopup').fadeIn(100);
            popup.lock();
            e.preventDefault();
            $("#errMsgPopUp").empty();

            ddlMakesPopup.trigger("chosen:updated").chosen({ "width": "100%" });
            ddlModelsPopup.trigger("chosen:updated").chosen({ "width": "100%" });

            ddlMakesPopup.siblings(".chosen-container").find("input[type=text]").prop("placeholder", ddlMakesPopup.attr("data-placeholder"));
        });
    });

</script>
