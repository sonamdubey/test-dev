@model Bikewale.Models.BikeModels.ModelPageVM

<div id="coloursContent" class="bw-model-tabs-data content-box-shadow padding-15-20-20 card-bottom-margin content-details-wrapper">
    <h2>@Model.BikeName Colours</h2>
    <ul id="modelColorsList" class="padding-top5">
        @foreach (var modelColor in Model.ModelPageEntity.ModelColors)
        {
            var returnUrl = string.Format("{0}#coloursContent", Model.PageMetaTags.AlternateUrl);
            <li>
                <a href="@(modelColor.ColorImageId > 0 ? string.Format("/m{0}?q={1}", Bikewale.Utility.UrlFormatter.FormatPhotoPageUrl(Model.ModelPageEntity.ModelDetails.MakeBase.MaskingName, Model.ModelPageEntity.ModelDetails.MaskingName), Bikewale.Utility.EncodingDecodingHelper.EncodeTo64(string.Format("colorImageId={0}&retUrl={1}", modelColor.ColorImageId, returnUrl))) : "javascript:void(0)")" class="text-black @(modelColor.ColorImageId > 0 ?"" : " cur-default" )">

                    <div title="@modelColor.ColorName" class="color-box inline-block @(modelColor.HexCodes.Count() == 1 ? " color-count-one" : (modelColor.HexCodes.Count() == 3 ? "color-count-three" : "color-count-two"))">
                        @if (Model.ModelPageEntity.ModelColors != null)
                        {
                            foreach (var HexCode in modelColor.HexCodes)
                            {
                                <span style="background-color: #@HexCode"></span>
                            }
                        }
                    </div>
                    <p class="font14 inline-block text-truncate text-default">@Convert.ToString(modelColor.ColorName)</p>
                </a>

            </li>
        }
    </ul>
</div>