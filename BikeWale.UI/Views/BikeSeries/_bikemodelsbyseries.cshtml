@model Bikewale.Models.BikeSeries.BikeSeriesModelsVM
@using Bikewale.Utility
@if (Model != null && Model.SeriesModels != null)
{
    <div class="jcarousel-wrapper inner-content-carousel horizontal-card-swiper">
        <div class="jcarousel">
            <ul>
                @if (Model.IsNewAvailable)
                {
                    foreach (var bike in Model.SeriesModels.NewBikes)
                    {
                        if (bike.BikeMake != null && bike.BikeModel != null)
                        {
                            <li>
                                <a href=@string.Format("{0}{1}", BWConfiguration.Instance.BwHostUrl, UrlFormatter.BikePageUrl(bike.BikeMake.MakeMaskingName, bike.BikeModel.MaskingName)) title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" class="horizontal-swiper__target bw-ga" data-cat="@Model.Page" data-act="Series_WidgetClicked" data-lab="@string.Format("{0} {1}", bike.BikeMake.MakeName, Model.SeriesBase.SeriesName)">
                                    @if (bike.BikeImage != null)
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="lazy" data-original=@(Image.GetPathToShowImages(bike.BikeImage.OriginalImagePath, bike.BikeImage.HostUrl, ImageSize._110x61, QualityFactor._70)) alt="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" src="">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="lazy" data-original=@(Image.GetPathToShowImages(string.Empty, string.Empty, ImageSize._110x61)) alt="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" src="">
                                        </div>
                                    }
                                    <div class="horizontal-swiper__details inline-block">
                                        <h3 class="horizontal-swiper__card-title text-truncate">@bike.BikeModel.ModelName</h3>
                                        <p class="horizontal-swiper__card-subtitle text-truncate">@FormatMinSpecs.GetMinSpecsAsText(bike.MinSpecsList)</p>
                                    </div>
                                </a>
                            </li>
                        }
                    }
                }
                @if (Model.IsUpcomingAvailable)
                {
                    foreach (var bike in Model.SeriesModels.UpcomingBikes)
                    {
                        if (bike.BikeMake != null && bike.BikeModel != null)
                        {
                            <li>
                                <a href=@string.Format("{0}{1}", BWConfiguration.Instance.BwHostUrl, UrlFormatter.BikePageUrl(bike.BikeMake.MakeMaskingName, bike.BikeModel.MaskingName)) title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" class="horizontal-swiper__target bw-ga" data-cat="@Model.Page" data-act="Series_WidgetClicked" data-lab="@string.Format("{0} {1}", bike.BikeMake.MakeName, Model.SeriesBase.SeriesName)">
                                    <span class="horizontal-swiper__tag">Upcoming</span>
                                    @if (bike.BikeImage != null)
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="lazy" data-original=@(Image.GetPathToShowImages(bike.BikeImage.OriginalImagePath, bike.BikeImage.HostUrl, ImageSize._110x61, QualityFactor._70)) alt="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" src="">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="lazy" data-original=@(Image.GetPathToShowImages(string.Empty, string.Empty, ImageSize._110x61)) alt="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" title="@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName)" src="">
                                        </div>
                                    }
                                    <div class="horizontal-swiper__details inline-block">
                                        <h3 class="horizontal-swiper__card-title text-truncate">@bike.BikeModel.ModelName</h3>
                                        <p class="horizontal-swiper__card-subtitle text-truncate">Expected Launch @bike.ExpectedLaunch.ToString("MMM yyyy")</p>
                                    </div>
                                </a>
                            </li>
                        }
                    }
                }
            </ul>
        </div>
        <span class="jcarousel-control-left">
            <a href="#" class="bwsprite jcarousel-control-prev" rel="nofollow"></a>
        </span>
        <span class="jcarousel-control-right">
            <a href="#" class="bwsprite jcarousel-control-next" rel="nofollow"></a>
        </span>
    </div>
}

