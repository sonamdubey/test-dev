@model Bikewale.Models.BikeSeries.BikeSeriesModelsVM
@using Bikewale.Entities.GenericBikes
@using Bikewale.Utility
@if (Model != null && Model.SeriesModels != null)
{
    <div class="swiper-container card-container horizontal-card-swiper">
        <ul class="swiper-wrapper">
            @if (Model.IsNewAvailable)
            {
                foreach (var bike in Model.SeriesModels.NewBikes)
                {
                    if (bike.BikeMake != null && bike.BikeModel != null)
                    {
                        <li class="swiper-slide horizontal-swiper__slide">
                            <div class="swiper-card horizontal-swiper__card">
                                <a href=@string.Format("{0}/m{1}", BWConfiguration.Instance.BwHostUrl, UrlFormatter.BikePageUrl(bike.BikeMake.MakeMaskingName, bike.BikeModel.MaskingName)) title=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) class="horizontal-swiper__target bw-ga" c="@Model.Page" a="Series_WidgetClicked" l="@string.Format("{0} {1}", bike.BikeMake.MakeName, Model.SeriesBase.SeriesName)">
                                    @if (bike.BikeImage != null)
                                    { 
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="swiper-lazy" data-src=@(Image.GetPathToShowImages(bike.BikeImage.OriginalImagePath, bike.BikeImage.HostUrl, "110x61", "80")) alt=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) src="">
                                        </div> 
                                    }
                                    else
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="swiper-lazy" data-src=@(Image.GetPathToShowImages(string.Empty, string.Empty, "110x61")) alt=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) src="">
                                        </div>
                                    }
                                    @if (bike.MinSpecs != null)
                                    {
                                        <div class="horizontal-swiper__details inline-block">
                                            <h3 class="horizontal-swiper__card-title text-truncate">@bike.BikeModel.ModelName</h3>
                                            <p class="horizontal-swiper__card-subtitle text-truncate">@FormatMinSpecs.GetMinSpecsAsText(Convert.ToString(bike.MinSpecs.Displacement), Convert.ToString(bike.MinSpecs.FuelEfficiencyOverall), Convert.ToString(bike.MinSpecs.MaxPower), string.Empty)</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="horizontal-swiper__details inline-block">
                                            <h3 class="horizontal-swiper__card-title text-truncate">@bike.BikeModel.ModelName</h3>
                                            <p class="horizontal-swiper__card-subtitle text-truncate">@FormatMinSpecs.GetMinSpecsAsText(string.Empty, string.Empty, string.Empty, string.Empty)</p>
                                        </div>
                                    }
                                </a>
                            </div>
                        </li>
                    }
                }
            }
            @if (Model.IsUpcomingAvailable)
            {
                foreach (var bike in Model.SeriesModels.UpcomingBikes)
                {
                    if (bike.BikeMake != null && bike.BikeModel != null)
                    {
                        <li class="swiper-slide horizontal-swiper__slide">
                            <div class="swiper-card horizontal-swiper__card">
                                <a href=@string.Format("{0}/m{1}", BWConfiguration.Instance.BwHostUrl, UrlFormatter.BikePageUrl(bike.BikeMake.MakeMaskingName, bike.BikeModel.MaskingName)) title=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) class="horizontal-swiper__target bw-ga" c="@Model.Page" a="Series_WidgetClicked" l="@string.Format("{0} {1}", bike.BikeMake.MakeName, Model.SeriesBase.SeriesName)">
                                    <span class="horizontal-swiper__tag">Upcoming</span>
                                    @if (bike.BikeImage != null)
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="swiper-lazy" data-src=@(Image.GetPathToShowImages(bike.BikeImage.OriginalImagePath, bike.BikeImage.HostUrl, "110x61", "80")) alt=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) src="">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="horizontal-swiper__image inline-block">
                                            <img class="swiper-lazy" data-src=@(Image.GetPathToShowImages(string.Empty, string.Empty, "110x61")) alt=@string.Format("{0} {1}", bike.BikeMake.MakeName, bike.BikeModel.ModelName) src="">
                                        </div>
                                    }
                                    <div class="horizontal-swiper__details inline-block">
                                        <h3 class="horizontal-swiper__card-title text-truncate">@bike.BikeModel.ModelName</h3>
                                        <p class="horizontal-swiper__card-subtitle text-truncate">Expected Launch @bike.ExpectedLaunch.ToString("MMM yyyy")</p>
                                    </div>
                                </a>
                            </div>
                        </li>
                    }
                }
            }
        </ul>
    </div>
}


