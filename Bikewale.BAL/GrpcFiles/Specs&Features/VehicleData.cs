// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicleData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VehicleData.Service.ProtoClass {

  /// <summary>Holder for reflection information generated from vehicleData.proto</summary>
  public static partial class VehicleDataReflection {

    #region Descriptor
    /// <summary>File descriptor for vehicleData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF2ZWhpY2xlRGF0YS5wcm90bxILVmVoaWNsZURhdGEaDmNhdGVnb3J5LnBy",
            "b3RvGgppdGVtLnByb3RvGg51bml0VHlwZS5wcm90bxoUY3VzdG9tRGF0YVR5",
            "cGUucHJvdG8aDmRhdGFUeXBlLnByb3RvIm8KEVVwZGF0ZUl0ZW1SZXF1ZXN0",
            "Eg4KBkl0ZW1JZBgBIAEoBRIRCglWZXJzaW9uSWQYAiABKAUSDQoFVmFsdWUY",
            "AyABKAkSEQoJVXBkYXRlZEJ5GAQgASgFEhUKDUFwcGxpY2F0aW9uSWQYBSAB",
            "KAUiPQocVmVoaWNsZURhdGFCeVZlcnNpb25SZXNwb25zZRIOCgZJdGVtSWQY",
            "ASABKAUSDQoFVmFsdWUYAiABKAkihAEKFkNvcHlWZWhpY2xlRGF0YVJlcXVl",
            "c3QSFAoMU3JjVmVyc2lvbklkGAEgASgFEhQKDFRhclZlcnNpb25JZBgCIAEo",
            "BRISCgpDYXRlZ29yeUlkGAMgASgFEhUKDUFwcGxpY2F0aW9uSWQYBCABKAUS",
            "EwoLUmVxdWVzdGVkQnkYBSABKAUiDAoKRW1wdHlQYXJhbSIYCgdHcnBjSW50",
            "Eg0KBVZhbHVlGAEgASgFIhkKCEdycGNCb29sEg0KBVZhbHVlGAEgASgIIjIK",
            "DURlbGV0ZVJlcXVlc3QSCgoCSWQYASABKAUSFQoNQXBwbGljYXRpb25JZBgC",
            "IAEoBSIxCgxJbnB1dFJlcXVlc3QSCgoCSWQYASABKAUSFQoNQXBwbGljYXRp",
            "b25JZBgCIAEoBSLEAQoJSXRlbVZhbHVlEgoKAklkGAEgASgFEhEKCVZlcnNp",
            "b25JZBgCIAEoBRIVCg1BcHBsaWNhdGlvbklkGAMgASgFEg4KBkl0ZW1JZBgE",
            "IAEoBRISCgpEYXRhVHlwZUlkGAUgASgFEg0KBVZhbHVlGAYgASgBEhQKDEN1",
            "c3RvbVR5cGVJZBgHIAEoBRISCgpDdXN0b21UZXh0GAggASgJEhEKCVVwZGF0",
            "ZWRPbhgJIAEoCRIRCglVcGRhdGVkQnkYCiABKAUiUAoQSXRlbVZhbHVlUmVx",
            "dWVzdBIRCglWZXJzaW9uSWQYASABKAUSEgoKQ2F0ZWdvcnlJZBgCIAEoBRIV",
            "Cg1BcHBsaWNhdGlvbklkGAMgASgFIiYKCVZhbHVlRGF0YRIKCgJJZBgBIAEo",
            "BRINCgVWYWx1ZRgCIAEoCSI6Cg1WYWx1ZURhdGFMaXN0EikKCUl0ZW1WYWx1",
            "ZRgBIAMoCzIWLlZlaGljbGVEYXRhLlZhbHVlRGF0YSJAChNTcGVjc1N1bW1h",
            "cnlSZXF1ZXN0EhIKClZlcnNpb25JZHMYASADKAUSFQoNQXBwbGljYXRpb25J",
            "ZBgCIAEoBSJLChNWZXJzaW9uU3BlY3NTdW1tYXJ5EgoKAklkGAEgASgFEigK",
            "BVNwZWNzGAIgAygLMhkuVmVoaWNsZURhdGEuU3BlY3NTdW1tYXJ5IksKF1Zl",
            "cnNpb25TcGVjc1N1bW1hcnlMaXN0EjAKBlZhbHVlcxgBIAMoCzIgLlZlaGlj",
            "bGVEYXRhLlZlcnNpb25TcGVjc1N1bW1hcnkiVgoYTW9kZWxTcGVjc1N1bW1h",
            "cnlSZXF1ZXN0EhIKClZlcnNpb25JZHMYASADKAUSDwoHTW9kZWxJZBgCIAEo",
            "BRIVCg1BcHBsaWNhdGlvbklkGAMgASgFIlEKDFNwZWNzU3VtbWFyeRIOCgZJ",
            "dGVtSWQYASABKAUSEAoISXRlbU5hbWUYAiABKAkSDQoFVmFsdWUYAyABKAkS",
            "EAoIVW5pdFR5cGUYBCABKAkiQgoVTW9kZWxTcGVjc1N1bW1hcnlMaXN0EikK",
            "BlZhbHVlcxgBIAMoCzIZLlZlaGljbGVEYXRhLlNwZWNzU3VtbWFyeSKPAQoQ",
            "VmVoaWNsZURhdGFWYWx1ZRItCg5TcGVjaWZpY2F0aW9ucxgBIAMoCzIVLlZl",
            "aGljbGVEYXRhLkNhdGVnb3J5EicKCEZlYXR1cmVzGAIgAygLMhUuVmVoaWNs",
            "ZURhdGEuQ2F0ZWdvcnkSIwoIT3ZlcnZpZXcYAyADKAsyES5WZWhpY2xlRGF0",
            "YS5JdGVtIj8KElZlaGljbGVEYXRhUmVxdWVzdBISCgpWZXJzaW9uSWRzGAEg",
            "AygFEhUKDUFwcGxpY2F0aW9uSWQYAiABKAUypxIKElZlaGljbGVEYXRhU2Vy",
            "dmljZRI/Cg5DcmVhdGVDYXRlZ29yeRIVLlZlaGljbGVEYXRhLkNhdGVnb3J5",
            "GhQuVmVoaWNsZURhdGEuR3JwY0ludCIAEkAKDlVwZGF0ZUNhdGVnb3J5EhUu",
            "VmVoaWNsZURhdGEuQ2F0ZWdvcnkaFS5WZWhpY2xlRGF0YS5HcnBjQm9vbCIA",
            "EkUKDkRlbGV0ZUNhdGVnb3J5EhouVmVoaWNsZURhdGEuRGVsZXRlUmVxdWVz",
            "dBoVLlZlaGljbGVEYXRhLkdycGNCb29sIgASTAoWR2V0Q2F0ZWdvcnlEZXRh",
            "aWxzQnlJZBIZLlZlaGljbGVEYXRhLklucHV0UmVxdWVzdBoVLlZlaGljbGVE",
            "YXRhLkNhdGVnb3J5IgASVAoXR2V0QWxsQ2F0ZWdvcmllc0RldGFpbHMSHC5W",
            "ZWhpY2xlRGF0YS5DYXRlZ29yeVJlcXVlc3QaGS5WZWhpY2xlRGF0YS5DYXRl",
            "Z29yeUxpc3QiABI3CgpDcmVhdGVJdGVtEhEuVmVoaWNsZURhdGEuSXRlbRoU",
            "LlZlaGljbGVEYXRhLkdycGNJbnQiABI4CgpVcGRhdGVJdGVtEhEuVmVoaWNs",
            "ZURhdGEuSXRlbRoVLlZlaGljbGVEYXRhLkdycGNCb29sIgASQQoKRGVsZXRl",
            "SXRlbRIaLlZlaGljbGVEYXRhLkRlbGV0ZVJlcXVlc3QaFS5WZWhpY2xlRGF0",
            "YS5HcnBjQm9vbCIAEkQKEkdldEl0ZW1EZXRhaWxzQnlJZBIZLlZlaGljbGVE",
            "YXRhLklucHV0UmVxdWVzdBoRLlZlaGljbGVEYXRhLkl0ZW0iABJTChRHZXRJ",
            "dGVtc0J5Q2F0ZWdvcnlJZBIiLlZlaGljbGVEYXRhLkl0ZW1CeUNhdGVnb3J5",
            "UmVxdWVzdBoVLlZlaGljbGVEYXRhLkl0ZW1MaXN0IgASSwoaR2V0QWxsSXRl",
            "bXNCeUFwcGxpY2F0aW9uSWQSFC5WZWhpY2xlRGF0YS5HcnBjSW50GhUuVmVo",
            "aWNsZURhdGEuSXRlbUxpc3QiABI/Cg5DcmVhdGVVbml0VHlwZRIVLlZlaGlj",
            "bGVEYXRhLlVuaXRUeXBlGhQuVmVoaWNsZURhdGEuR3JwY0ludCIAEkAKDlVw",
            "ZGF0ZVVuaXRUeXBlEhUuVmVoaWNsZURhdGEuVW5pdFR5cGUaFS5WZWhpY2xl",
            "RGF0YS5HcnBjQm9vbCIAEj8KDkRlbGV0ZVVuaXRUeXBlEhQuVmVoaWNsZURh",
            "dGEuR3JwY0ludBoVLlZlaGljbGVEYXRhLkdycGNCb29sIgASTgoWR2V0QWxs",
            "VW5pdFR5cGVzRGV0YWlscxIXLlZlaGljbGVEYXRhLkVtcHR5UGFyYW0aGS5W",
            "ZWhpY2xlRGF0YS5Vbml0VHlwZUxpc3QiABJLChRDcmVhdGVDdXN0b21EYXRh",
            "VHlwZRIbLlZlaGljbGVEYXRhLkN1c3RvbURhdGFUeXBlGhQuVmVoaWNsZURh",
            "dGEuR3JwY0ludCIAEkwKFFVwZGF0ZUN1c3RvbURhdGFUeXBlEhsuVmVoaWNs",
            "ZURhdGEuQ3VzdG9tRGF0YVR5cGUaFS5WZWhpY2xlRGF0YS5HcnBjQm9vbCIA",
            "EkUKFERlbGV0ZUN1c3RvbURhdGFUeXBlEhQuVmVoaWNsZURhdGEuR3JwY0lu",
            "dBoVLlZlaGljbGVEYXRhLkdycGNCb29sIgASWgocR2V0QWxsQ3VzdG9tRGF0",
            "YVR5cGVzRGV0YWlscxIXLlZlaGljbGVEYXRhLkVtcHR5UGFyYW0aHy5WZWhp",
            "Y2xlRGF0YS5DdXN0b21EYXRhVHlwZUxpc3QiABI/Cg5DcmVhdGVEYXRhVHlw",
            "ZRIVLlZlaGljbGVEYXRhLkRhdGFUeXBlGhQuVmVoaWNsZURhdGEuR3JwY0lu",
            "dCIAEkEKD1VwZGF0ZWREYXRhVHlwZRIVLlZlaGljbGVEYXRhLkRhdGFUeXBl",
            "GhUuVmVoaWNsZURhdGEuR3JwY0Jvb2wiABI/Cg5EZWxldGVEYXRhVHlwZRIU",
            "LlZlaGljbGVEYXRhLkdycGNJbnQaFS5WZWhpY2xlRGF0YS5HcnBjQm9vbCIA",
            "EkcKFkdldERhdGFUeXBlRGV0YWlsc0J5SWQSFC5WZWhpY2xlRGF0YS5HcnBj",
            "SW50GhUuVmVoaWNsZURhdGEuRGF0YVR5cGUiABJNChVHZXRBbGxEYXRhVHlw",
            "ZURldGFpbHMSFy5WZWhpY2xlRGF0YS5FbXB0eVBhcmFtGhkuVmVoaWNsZURh",
            "dGEuRGF0YVR5cGVMaXN0IgASQQoPSW5zZXJ0SXRlbVZhbHVlEhYuVmVoaWNs",
            "ZURhdGEuSXRlbVZhbHVlGhQuVmVoaWNsZURhdGEuR3JwY0ludCIAEkIKD1Vw",
            "ZGF0ZUl0ZW1WYWx1ZRIWLlZlaGljbGVEYXRhLkl0ZW1WYWx1ZRoVLlZlaGlj",
            "bGVEYXRhLkdycGNCb29sIgASVQoWR2V0SXRlbURhdGFCeVZlcnNpb25JZBId",
            "LlZlaGljbGVEYXRhLkl0ZW1WYWx1ZVJlcXVlc3QaGi5WZWhpY2xlRGF0YS5W",
            "YWx1ZURhdGFMaXN0IgASTwoPQ29weVZlaGljbGVEYXRhEiMuVmVoaWNsZURh",
            "dGEuQ29weVZlaGljbGVEYXRhUmVxdWVzdBoVLlZlaGljbGVEYXRhLkdycGNC",
            "b29sIgASXgoaR2V0VmVoaWNsZURhdGFGb3JWZXJzaW9uSWQSHy5WZWhpY2xl",
            "RGF0YS5WZWhpY2xlRGF0YVJlcXVlc3QaHS5WZWhpY2xlRGF0YS5WZWhpY2xl",
            "RGF0YVZhbHVlIgASYgoWR2V0VmVyc2lvblNwZWNzU3VtbWFyeRIgLlZlaGlj",
            "bGVEYXRhLlNwZWNzU3VtbWFyeVJlcXVlc3QaJC5WZWhpY2xlRGF0YS5WZXJz",
            "aW9uU3BlY3NTdW1tYXJ5TGlzdCIAEmMKFEdldE1vZGVsU3BlY3NTdW1tYXJ5",
            "EiUuVmVoaWNsZURhdGEuTW9kZWxTcGVjc1N1bW1hcnlSZXF1ZXN0GiIuVmVo",
            "aWNsZURhdGEuTW9kZWxTcGVjc1N1bW1hcnlMaXN0IgBCIaoCHlZlaGljbGVE",
            "YXRhLlNlcnZpY2UuUHJvdG9DbGFzc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::VehicleData.Service.ProtoClass.CategoryReflection.Descriptor, global::VehicleData.Service.ProtoClass.ItemReflection.Descriptor, global::VehicleData.Service.ProtoClass.UnitTypeReflection.Descriptor, global::VehicleData.Service.ProtoClass.CustomDataTypeReflection.Descriptor, global::VehicleData.Service.ProtoClass.DataTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.UpdateItemRequest), global::VehicleData.Service.ProtoClass.UpdateItemRequest.Parser, new[]{ "ItemId", "VersionId", "Value", "UpdatedBy", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.VehicleDataByVersionResponse), global::VehicleData.Service.ProtoClass.VehicleDataByVersionResponse.Parser, new[]{ "ItemId", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.CopyVehicleDataRequest), global::VehicleData.Service.ProtoClass.CopyVehicleDataRequest.Parser, new[]{ "SrcVersionId", "TarVersionId", "CategoryId", "ApplicationId", "RequestedBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.EmptyParam), global::VehicleData.Service.ProtoClass.EmptyParam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.GrpcInt), global::VehicleData.Service.ProtoClass.GrpcInt.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.GrpcBool), global::VehicleData.Service.ProtoClass.GrpcBool.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.DeleteRequest), global::VehicleData.Service.ProtoClass.DeleteRequest.Parser, new[]{ "Id", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.InputRequest), global::VehicleData.Service.ProtoClass.InputRequest.Parser, new[]{ "Id", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ItemValue), global::VehicleData.Service.ProtoClass.ItemValue.Parser, new[]{ "Id", "VersionId", "ApplicationId", "ItemId", "DataTypeId", "Value", "CustomTypeId", "CustomText", "UpdatedOn", "UpdatedBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ItemValueRequest), global::VehicleData.Service.ProtoClass.ItemValueRequest.Parser, new[]{ "VersionId", "CategoryId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ValueData), global::VehicleData.Service.ProtoClass.ValueData.Parser, new[]{ "Id", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ValueDataList), global::VehicleData.Service.ProtoClass.ValueDataList.Parser, new[]{ "ItemValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.SpecsSummaryRequest), global::VehicleData.Service.ProtoClass.SpecsSummaryRequest.Parser, new[]{ "VersionIds", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.VersionSpecsSummary), global::VehicleData.Service.ProtoClass.VersionSpecsSummary.Parser, new[]{ "Id", "Specs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.VersionSpecsSummaryList), global::VehicleData.Service.ProtoClass.VersionSpecsSummaryList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ModelSpecsSummaryRequest), global::VehicleData.Service.ProtoClass.ModelSpecsSummaryRequest.Parser, new[]{ "VersionIds", "ModelId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.SpecsSummary), global::VehicleData.Service.ProtoClass.SpecsSummary.Parser, new[]{ "ItemId", "ItemName", "Value", "UnitType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ModelSpecsSummaryList), global::VehicleData.Service.ProtoClass.ModelSpecsSummaryList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.VehicleDataValue), global::VehicleData.Service.ProtoClass.VehicleDataValue.Parser, new[]{ "Specifications", "Features", "Overview" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.VehicleDataRequest), global::VehicleData.Service.ProtoClass.VehicleDataRequest.Parser, new[]{ "VersionIds", "ApplicationId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UpdateItemRequest : pb::IMessage<UpdateItemRequest> {
    private static readonly pb::MessageParser<UpdateItemRequest> _parser = new pb::MessageParser<UpdateItemRequest>(() => new UpdateItemRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateItemRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateItemRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateItemRequest(UpdateItemRequest other) : this() {
      itemId_ = other.itemId_;
      versionId_ = other.versionId_;
      value_ = other.value_;
      updatedBy_ = other.updatedBy_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateItemRequest Clone() {
      return new UpdateItemRequest(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 4;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 5;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateItemRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateItemRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (VersionId != other.VersionId) return false;
      if (Value != other.Value) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (VersionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VersionId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UpdatedBy);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (UpdatedBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateItemRequest other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            VersionId = input.ReadInt32();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 32: {
            UpdatedBy = input.ReadInt32();
            break;
          }
          case 40: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleDataByVersionResponse : pb::IMessage<VehicleDataByVersionResponse> {
    private static readonly pb::MessageParser<VehicleDataByVersionResponse> _parser = new pb::MessageParser<VehicleDataByVersionResponse>(() => new VehicleDataByVersionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleDataByVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataByVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataByVersionResponse(VehicleDataByVersionResponse other) : this() {
      itemId_ = other.itemId_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataByVersionResponse Clone() {
      return new VehicleDataByVersionResponse(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleDataByVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleDataByVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleDataByVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyVehicleDataRequest : pb::IMessage<CopyVehicleDataRequest> {
    private static readonly pb::MessageParser<CopyVehicleDataRequest> _parser = new pb::MessageParser<CopyVehicleDataRequest>(() => new CopyVehicleDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyVehicleDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyVehicleDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyVehicleDataRequest(CopyVehicleDataRequest other) : this() {
      srcVersionId_ = other.srcVersionId_;
      tarVersionId_ = other.tarVersionId_;
      categoryId_ = other.categoryId_;
      applicationId_ = other.applicationId_;
      requestedBy_ = other.requestedBy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyVehicleDataRequest Clone() {
      return new CopyVehicleDataRequest(this);
    }

    /// <summary>Field number for the "SrcVersionId" field.</summary>
    public const int SrcVersionIdFieldNumber = 1;
    private int srcVersionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcVersionId {
      get { return srcVersionId_; }
      set {
        srcVersionId_ = value;
      }
    }

    /// <summary>Field number for the "TarVersionId" field.</summary>
    public const int TarVersionIdFieldNumber = 2;
    private int tarVersionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TarVersionId {
      get { return tarVersionId_; }
      set {
        tarVersionId_ = value;
      }
    }

    /// <summary>Field number for the "CategoryId" field.</summary>
    public const int CategoryIdFieldNumber = 3;
    private int categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 4;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "RequestedBy" field.</summary>
    public const int RequestedByFieldNumber = 5;
    private int requestedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestedBy {
      get { return requestedBy_; }
      set {
        requestedBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyVehicleDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyVehicleDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcVersionId != other.SrcVersionId) return false;
      if (TarVersionId != other.TarVersionId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (RequestedBy != other.RequestedBy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcVersionId != 0) hash ^= SrcVersionId.GetHashCode();
      if (TarVersionId != 0) hash ^= TarVersionId.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (RequestedBy != 0) hash ^= RequestedBy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcVersionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcVersionId);
      }
      if (TarVersionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TarVersionId);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CategoryId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApplicationId);
      }
      if (RequestedBy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequestedBy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcVersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcVersionId);
      }
      if (TarVersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TarVersionId);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (RequestedBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestedBy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyVehicleDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.SrcVersionId != 0) {
        SrcVersionId = other.SrcVersionId;
      }
      if (other.TarVersionId != 0) {
        TarVersionId = other.TarVersionId;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.RequestedBy != 0) {
        RequestedBy = other.RequestedBy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcVersionId = input.ReadInt32();
            break;
          }
          case 16: {
            TarVersionId = input.ReadInt32();
            break;
          }
          case 24: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 32: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 40: {
            RequestedBy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyParam : pb::IMessage<EmptyParam> {
    private static readonly pb::MessageParser<EmptyParam> _parser = new pb::MessageParser<EmptyParam>(() => new EmptyParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam(EmptyParam other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam Clone() {
      return new EmptyParam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyParam other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GrpcInt : pb::IMessage<GrpcInt> {
    private static readonly pb::MessageParser<GrpcInt> _parser = new pb::MessageParser<GrpcInt>(() => new GrpcInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt(GrpcInt other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt Clone() {
      return new GrpcInt(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcInt other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrpcBool : pb::IMessage<GrpcBool> {
    private static readonly pb::MessageParser<GrpcBool> _parser = new pb::MessageParser<GrpcBool>(() => new GrpcBool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcBool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool(GrpcBool other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool Clone() {
      return new GrpcBool(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcBool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcBool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcBool other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      id_ = other.id_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputRequest : pb::IMessage<InputRequest> {
    private static readonly pb::MessageParser<InputRequest> _parser = new pb::MessageParser<InputRequest>(() => new InputRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest(InputRequest other) : this() {
      id_ = other.id_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest Clone() {
      return new InputRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemValue : pb::IMessage<ItemValue> {
    private static readonly pb::MessageParser<ItemValue> _parser = new pb::MessageParser<ItemValue>(() => new ItemValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValue(ItemValue other) : this() {
      id_ = other.id_;
      versionId_ = other.versionId_;
      applicationId_ = other.applicationId_;
      itemId_ = other.itemId_;
      dataTypeId_ = other.dataTypeId_;
      value_ = other.value_;
      customTypeId_ = other.customTypeId_;
      customText_ = other.customText_;
      updatedOn_ = other.updatedOn_;
      updatedBy_ = other.updatedBy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValue Clone() {
      return new ItemValue(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 4;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "DataTypeId" field.</summary>
    public const int DataTypeIdFieldNumber = 5;
    private int dataTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataTypeId {
      get { return dataTypeId_; }
      set {
        dataTypeId_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 6;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "CustomTypeId" field.</summary>
    public const int CustomTypeIdFieldNumber = 7;
    private int customTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomTypeId {
      get { return customTypeId_; }
      set {
        customTypeId_ = value;
      }
    }

    /// <summary>Field number for the "CustomText" field.</summary>
    public const int CustomTextFieldNumber = 8;
    private string customText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomText {
      get { return customText_; }
      set {
        customText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 9;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 10;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (VersionId != other.VersionId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (ItemId != other.ItemId) return false;
      if (DataTypeId != other.DataTypeId) return false;
      if (Value != other.Value) return false;
      if (CustomTypeId != other.CustomTypeId) return false;
      if (CustomText != other.CustomText) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (DataTypeId != 0) hash ^= DataTypeId.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (CustomTypeId != 0) hash ^= CustomTypeId.GetHashCode();
      if (CustomText.Length != 0) hash ^= CustomText.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (VersionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VersionId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemId);
      }
      if (DataTypeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DataTypeId);
      }
      if (Value != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Value);
      }
      if (CustomTypeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CustomTypeId);
      }
      if (CustomText.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomText);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UpdatedBy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (DataTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataTypeId);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (CustomTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomTypeId);
      }
      if (CustomText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomText);
      }
      if (UpdatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemValue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.DataTypeId != 0) {
        DataTypeId = other.DataTypeId;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.CustomTypeId != 0) {
        CustomTypeId = other.CustomTypeId;
      }
      if (other.CustomText.Length != 0) {
        CustomText = other.CustomText;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            VersionId = input.ReadInt32();
            break;
          }
          case 24: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 32: {
            ItemId = input.ReadInt32();
            break;
          }
          case 40: {
            DataTypeId = input.ReadInt32();
            break;
          }
          case 49: {
            Value = input.ReadDouble();
            break;
          }
          case 56: {
            CustomTypeId = input.ReadInt32();
            break;
          }
          case 66: {
            CustomText = input.ReadString();
            break;
          }
          case 74: {
            UpdatedOn = input.ReadString();
            break;
          }
          case 80: {
            UpdatedBy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemValueRequest : pb::IMessage<ItemValueRequest> {
    private static readonly pb::MessageParser<ItemValueRequest> _parser = new pb::MessageParser<ItemValueRequest>(() => new ItemValueRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemValueRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValueRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValueRequest(ItemValueRequest other) : this() {
      versionId_ = other.versionId_;
      categoryId_ = other.categoryId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemValueRequest Clone() {
      return new ItemValueRequest(this);
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 1;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "CategoryId" field.</summary>
    public const int CategoryIdFieldNumber = 2;
    private int categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemValueRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemValueRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionId != other.VersionId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VersionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VersionId);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CategoryId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemValueRequest other) {
      if (other == null) {
        return;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VersionId = input.ReadInt32();
            break;
          }
          case 16: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 24: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueData : pb::IMessage<ValueData> {
    private static readonly pb::MessageParser<ValueData> _parser = new pb::MessageParser<ValueData>(() => new ValueData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueData(ValueData other) : this() {
      id_ = other.id_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueData Clone() {
      return new ValueData(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueDataList : pb::IMessage<ValueDataList> {
    private static readonly pb::MessageParser<ValueDataList> _parser = new pb::MessageParser<ValueDataList>(() => new ValueDataList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueDataList(ValueDataList other) : this() {
      itemValue_ = other.itemValue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueDataList Clone() {
      return new ValueDataList(this);
    }

    /// <summary>Field number for the "ItemValue" field.</summary>
    public const int ItemValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.ValueData> _repeated_itemValue_codec
        = pb::FieldCodec.ForMessage(10, global::VehicleData.Service.ProtoClass.ValueData.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.ValueData> itemValue_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.ValueData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.ValueData> ItemValue {
      get { return itemValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemValue_.Equals(other.itemValue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemValue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemValue_.WriteTo(output, _repeated_itemValue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemValue_.CalculateSize(_repeated_itemValue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueDataList other) {
      if (other == null) {
        return;
      }
      itemValue_.Add(other.itemValue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemValue_.AddEntriesFrom(input, _repeated_itemValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecsSummaryRequest : pb::IMessage<SpecsSummaryRequest> {
    private static readonly pb::MessageParser<SpecsSummaryRequest> _parser = new pb::MessageParser<SpecsSummaryRequest>(() => new SpecsSummaryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecsSummaryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummaryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummaryRequest(SpecsSummaryRequest other) : this() {
      versionIds_ = other.versionIds_.Clone();
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummaryRequest Clone() {
      return new SpecsSummaryRequest(this);
    }

    /// <summary>Field number for the "VersionIds" field.</summary>
    public const int VersionIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_versionIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> versionIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VersionIds {
      get { return versionIds_; }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecsSummaryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecsSummaryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versionIds_.Equals(other.versionIds_)) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versionIds_.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versionIds_.WriteTo(output, _repeated_versionIds_codec);
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versionIds_.CalculateSize(_repeated_versionIds_codec);
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecsSummaryRequest other) {
      if (other == null) {
        return;
      }
      versionIds_.Add(other.versionIds_);
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            versionIds_.AddEntriesFrom(input, _repeated_versionIds_codec);
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionSpecsSummary : pb::IMessage<VersionSpecsSummary> {
    private static readonly pb::MessageParser<VersionSpecsSummary> _parser = new pb::MessageParser<VersionSpecsSummary>(() => new VersionSpecsSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionSpecsSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummary(VersionSpecsSummary other) : this() {
      id_ = other.id_;
      specs_ = other.specs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummary Clone() {
      return new VersionSpecsSummary(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Specs" field.</summary>
    public const int SpecsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.SpecsSummary> _repeated_specs_codec
        = pb::FieldCodec.ForMessage(18, global::VehicleData.Service.ProtoClass.SpecsSummary.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary> specs_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary> Specs {
      get { return specs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionSpecsSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionSpecsSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!specs_.Equals(other.specs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= specs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      specs_.WriteTo(output, _repeated_specs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += specs_.CalculateSize(_repeated_specs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionSpecsSummary other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      specs_.Add(other.specs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            specs_.AddEntriesFrom(input, _repeated_specs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionSpecsSummaryList : pb::IMessage<VersionSpecsSummaryList> {
    private static readonly pb::MessageParser<VersionSpecsSummaryList> _parser = new pb::MessageParser<VersionSpecsSummaryList>(() => new VersionSpecsSummaryList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionSpecsSummaryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummaryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummaryList(VersionSpecsSummaryList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSpecsSummaryList Clone() {
      return new VersionSpecsSummaryList(this);
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.VersionSpecsSummary> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::VehicleData.Service.ProtoClass.VersionSpecsSummary.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.VersionSpecsSummary> values_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.VersionSpecsSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.VersionSpecsSummary> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionSpecsSummaryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionSpecsSummaryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionSpecsSummaryList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelSpecsSummaryRequest : pb::IMessage<ModelSpecsSummaryRequest> {
    private static readonly pb::MessageParser<ModelSpecsSummaryRequest> _parser = new pb::MessageParser<ModelSpecsSummaryRequest>(() => new ModelSpecsSummaryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSpecsSummaryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryRequest(ModelSpecsSummaryRequest other) : this() {
      versionIds_ = other.versionIds_.Clone();
      modelId_ = other.modelId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryRequest Clone() {
      return new ModelSpecsSummaryRequest(this);
    }

    /// <summary>Field number for the "VersionIds" field.</summary>
    public const int VersionIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_versionIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> versionIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VersionIds {
      get { return versionIds_; }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSpecsSummaryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSpecsSummaryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versionIds_.Equals(other.versionIds_)) return false;
      if (ModelId != other.ModelId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versionIds_.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versionIds_.WriteTo(output, _repeated_versionIds_codec);
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versionIds_.CalculateSize(_repeated_versionIds_codec);
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSpecsSummaryRequest other) {
      if (other == null) {
        return;
      }
      versionIds_.Add(other.versionIds_);
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            versionIds_.AddEntriesFrom(input, _repeated_versionIds_codec);
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 24: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecsSummary : pb::IMessage<SpecsSummary> {
    private static readonly pb::MessageParser<SpecsSummary> _parser = new pb::MessageParser<SpecsSummary>(() => new SpecsSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecsSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummary(SpecsSummary other) : this() {
      itemId_ = other.itemId_;
      itemName_ = other.itemName_;
      value_ = other.value_;
      unitType_ = other.unitType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecsSummary Clone() {
      return new SpecsSummary(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemName" field.</summary>
    public const int ItemNameFieldNumber = 2;
    private string itemName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemName {
      get { return itemName_; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnitType" field.</summary>
    public const int UnitTypeFieldNumber = 4;
    private string unitType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitType {
      get { return unitType_; }
      set {
        unitType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecsSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecsSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemName != other.ItemName) return false;
      if (Value != other.Value) return false;
      if (UnitType != other.UnitType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemName.Length != 0) hash ^= ItemName.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (UnitType.Length != 0) hash ^= UnitType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ItemName);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (UnitType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnitType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (UnitType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecsSummary other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemName.Length != 0) {
        ItemName = other.ItemName;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.UnitType.Length != 0) {
        UnitType = other.UnitType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 18: {
            ItemName = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            UnitType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelSpecsSummaryList : pb::IMessage<ModelSpecsSummaryList> {
    private static readonly pb::MessageParser<ModelSpecsSummaryList> _parser = new pb::MessageParser<ModelSpecsSummaryList>(() => new ModelSpecsSummaryList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSpecsSummaryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryList(ModelSpecsSummaryList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSpecsSummaryList Clone() {
      return new ModelSpecsSummaryList(this);
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.SpecsSummary> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::VehicleData.Service.ProtoClass.SpecsSummary.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary> values_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.SpecsSummary> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSpecsSummaryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSpecsSummaryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSpecsSummaryList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleDataValue : pb::IMessage<VehicleDataValue> {
    private static readonly pb::MessageParser<VehicleDataValue> _parser = new pb::MessageParser<VehicleDataValue>(() => new VehicleDataValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleDataValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataValue(VehicleDataValue other) : this() {
      specifications_ = other.specifications_.Clone();
      features_ = other.features_.Clone();
      overview_ = other.overview_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataValue Clone() {
      return new VehicleDataValue(this);
    }

    /// <summary>Field number for the "Specifications" field.</summary>
    public const int SpecificationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.Category> _repeated_specifications_codec
        = pb::FieldCodec.ForMessage(10, global::VehicleData.Service.ProtoClass.Category.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category> specifications_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category> Specifications {
      get { return specifications_; }
    }

    /// <summary>Field number for the "Features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.Category> _repeated_features_codec
        = pb::FieldCodec.ForMessage(18, global::VehicleData.Service.ProtoClass.Category.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category> features_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Category> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "Overview" field.</summary>
    public const int OverviewFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.Item> _repeated_overview_codec
        = pb::FieldCodec.ForMessage(26, global::VehicleData.Service.ProtoClass.Item.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item> overview_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item> Overview {
      get { return overview_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleDataValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleDataValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!specifications_.Equals(other.specifications_)) return false;
      if(!features_.Equals(other.features_)) return false;
      if(!overview_.Equals(other.overview_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= specifications_.GetHashCode();
      hash ^= features_.GetHashCode();
      hash ^= overview_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      specifications_.WriteTo(output, _repeated_specifications_codec);
      features_.WriteTo(output, _repeated_features_codec);
      overview_.WriteTo(output, _repeated_overview_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += specifications_.CalculateSize(_repeated_specifications_codec);
      size += features_.CalculateSize(_repeated_features_codec);
      size += overview_.CalculateSize(_repeated_overview_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleDataValue other) {
      if (other == null) {
        return;
      }
      specifications_.Add(other.specifications_);
      features_.Add(other.features_);
      overview_.Add(other.overview_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            specifications_.AddEntriesFrom(input, _repeated_specifications_codec);
            break;
          }
          case 18: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 26: {
            overview_.AddEntriesFrom(input, _repeated_overview_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleDataRequest : pb::IMessage<VehicleDataRequest> {
    private static readonly pb::MessageParser<VehicleDataRequest> _parser = new pb::MessageParser<VehicleDataRequest>(() => new VehicleDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.VehicleDataReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataRequest(VehicleDataRequest other) : this() {
      versionIds_ = other.versionIds_.Clone();
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleDataRequest Clone() {
      return new VehicleDataRequest(this);
    }

    /// <summary>Field number for the "VersionIds" field.</summary>
    public const int VersionIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_versionIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> versionIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VersionIds {
      get { return versionIds_; }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versionIds_.Equals(other.versionIds_)) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versionIds_.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versionIds_.WriteTo(output, _repeated_versionIds_codec);
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versionIds_.CalculateSize(_repeated_versionIds_codec);
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleDataRequest other) {
      if (other == null) {
        return;
      }
      versionIds_.Add(other.versionIds_);
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            versionIds_.AddEntriesFrom(input, _repeated_versionIds_codec);
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
