// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VehicleData.Service.ProtoClass {

  /// <summary>Holder for reflection information generated from item.proto</summary>
  public static partial class ItemReflection {

    #region Descriptor
    /// <summary>File descriptor for item.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgppdGVtLnByb3RvEgtWZWhpY2xlRGF0YRoUY3VzdG9tRGF0YVR5cGUucHJv",
            "dG8iuwMKBEl0ZW0SCgoCSWQYASABKAUSEgoKQ2F0ZWdvcnlJZBgCIAEoBRIM",
            "CgROYW1lGAMgASgJEhIKCkRhdGFUeXBlSWQYBCABKAUSEgoKVW5pdFR5cGVJ",
            "ZBgFIAEoBRIUCgxVbml0VHlwZU5hbWUYBiABKAkSEQoJU29ydE9yZGVyGAcg",
            "ASgFEhMKC0Rlc2NyaXB0aW9uGAggASgJEhAKCElzQWN0aXZlGAkgASgIEhQK",
            "DEFiYnJldmlhdGlvbhgKIAEoCRIOCgZNaW5WYWwYCyABKAUSDgoGTWF4VmFs",
            "GAwgASgFEhMKC0lzUHVibGlzaGVkGA0gASgIEgwKBEljb24YDiABKAkSFQoN",
            "UHJpb3JpdHlPcmRlchgPIAEoBRIWCg5JdGVtSW1wb3J0YW5jZRgQIAEoBRIR",
            "CglVcGRhdGVkT24YESABKAkSEQoJVXBkYXRlZEJ5GBIgASgFEhUKDUFwcGxp",
            "Y2F0aW9uSWQYEyABKAUSEgoKSXRlbVZhbHVlcxgUIAMoCRI0Cg9DdXN0b21E",
            "YXRhVHlwZXMYFSADKAsyGy5WZWhpY2xlRGF0YS5DdXN0b21EYXRhVHlwZSJV",
            "ChVJdGVtQnlDYXRlZ29yeVJlcXVlc3QSEgoKQ2F0ZWdvcnlJZBgBIAEoBRIR",
            "CglWZXJzaW9uSWQYAiABKAUSFQoNQXBwbGljYXRpb25JZBgDIAEoBSIsCghJ",
            "dGVtTGlzdBIgCgVJdGVtcxgBIAMoCzIRLlZlaGljbGVEYXRhLkl0ZW1CIaoC",
            "HlZlaGljbGVEYXRhLlNlcnZpY2UuUHJvdG9DbGFzc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::VehicleData.Service.ProtoClass.CustomDataTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.Item), global::VehicleData.Service.ProtoClass.Item.Parser, new[]{ "Id", "CategoryId", "Name", "DataTypeId", "UnitTypeId", "UnitTypeName", "SortOrder", "Description", "IsActive", "Abbreviation", "MinVal", "MaxVal", "IsPublished", "Icon", "PriorityOrder", "ItemImportance", "UpdatedOn", "UpdatedBy", "ApplicationId", "ItemValues", "CustomDataTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ItemByCategoryRequest), global::VehicleData.Service.ProtoClass.ItemByCategoryRequest.Parser, new[]{ "CategoryId", "VersionId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VehicleData.Service.ProtoClass.ItemList), global::VehicleData.Service.ProtoClass.ItemList.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.ItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      id_ = other.id_;
      categoryId_ = other.categoryId_;
      name_ = other.name_;
      dataTypeId_ = other.dataTypeId_;
      unitTypeId_ = other.unitTypeId_;
      unitTypeName_ = other.unitTypeName_;
      sortOrder_ = other.sortOrder_;
      description_ = other.description_;
      isActive_ = other.isActive_;
      abbreviation_ = other.abbreviation_;
      minVal_ = other.minVal_;
      maxVal_ = other.maxVal_;
      isPublished_ = other.isPublished_;
      icon_ = other.icon_;
      priorityOrder_ = other.priorityOrder_;
      itemImportance_ = other.itemImportance_;
      updatedOn_ = other.updatedOn_;
      updatedBy_ = other.updatedBy_;
      applicationId_ = other.applicationId_;
      itemValues_ = other.itemValues_.Clone();
      customDataTypes_ = other.customDataTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "CategoryId" field.</summary>
    public const int CategoryIdFieldNumber = 2;
    private int categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataTypeId" field.</summary>
    public const int DataTypeIdFieldNumber = 4;
    private int dataTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataTypeId {
      get { return dataTypeId_; }
      set {
        dataTypeId_ = value;
      }
    }

    /// <summary>Field number for the "UnitTypeId" field.</summary>
    public const int UnitTypeIdFieldNumber = 5;
    private int unitTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTypeId {
      get { return unitTypeId_; }
      set {
        unitTypeId_ = value;
      }
    }

    /// <summary>Field number for the "UnitTypeName" field.</summary>
    public const int UnitTypeNameFieldNumber = 6;
    private string unitTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnitTypeName {
      get { return unitTypeName_; }
      set {
        unitTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SortOrder" field.</summary>
    public const int SortOrderFieldNumber = 7;
    private int sortOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortOrder {
      get { return sortOrder_; }
      set {
        sortOrder_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 9;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "Abbreviation" field.</summary>
    public const int AbbreviationFieldNumber = 10;
    private string abbreviation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Abbreviation {
      get { return abbreviation_; }
      set {
        abbreviation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MinVal" field.</summary>
    public const int MinValFieldNumber = 11;
    private int minVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinVal {
      get { return minVal_; }
      set {
        minVal_ = value;
      }
    }

    /// <summary>Field number for the "MaxVal" field.</summary>
    public const int MaxValFieldNumber = 12;
    private int maxVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxVal {
      get { return maxVal_; }
      set {
        maxVal_ = value;
      }
    }

    /// <summary>Field number for the "IsPublished" field.</summary>
    public const int IsPublishedFieldNumber = 13;
    private bool isPublished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPublished {
      get { return isPublished_; }
      set {
        isPublished_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 14;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PriorityOrder" field.</summary>
    public const int PriorityOrderFieldNumber = 15;
    private int priorityOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriorityOrder {
      get { return priorityOrder_; }
      set {
        priorityOrder_ = value;
      }
    }

    /// <summary>Field number for the "ItemImportance" field.</summary>
    public const int ItemImportanceFieldNumber = 16;
    private int itemImportance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemImportance {
      get { return itemImportance_; }
      set {
        itemImportance_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 17;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 18;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 19;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "ItemValues" field.</summary>
    public const int ItemValuesFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_itemValues_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> itemValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ItemValues {
      get { return itemValues_; }
    }

    /// <summary>Field number for the "CustomDataTypes" field.</summary>
    public const int CustomDataTypesFieldNumber = 21;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.CustomDataType> _repeated_customDataTypes_codec
        = pb::FieldCodec.ForMessage(170, global::VehicleData.Service.ProtoClass.CustomDataType.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.CustomDataType> customDataTypes_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.CustomDataType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.CustomDataType> CustomDataTypes {
      get { return customDataTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Name != other.Name) return false;
      if (DataTypeId != other.DataTypeId) return false;
      if (UnitTypeId != other.UnitTypeId) return false;
      if (UnitTypeName != other.UnitTypeName) return false;
      if (SortOrder != other.SortOrder) return false;
      if (Description != other.Description) return false;
      if (IsActive != other.IsActive) return false;
      if (Abbreviation != other.Abbreviation) return false;
      if (MinVal != other.MinVal) return false;
      if (MaxVal != other.MaxVal) return false;
      if (IsPublished != other.IsPublished) return false;
      if (Icon != other.Icon) return false;
      if (PriorityOrder != other.PriorityOrder) return false;
      if (ItemImportance != other.ItemImportance) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if(!itemValues_.Equals(other.itemValues_)) return false;
      if(!customDataTypes_.Equals(other.customDataTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DataTypeId != 0) hash ^= DataTypeId.GetHashCode();
      if (UnitTypeId != 0) hash ^= UnitTypeId.GetHashCode();
      if (UnitTypeName.Length != 0) hash ^= UnitTypeName.GetHashCode();
      if (SortOrder != 0) hash ^= SortOrder.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (Abbreviation.Length != 0) hash ^= Abbreviation.GetHashCode();
      if (MinVal != 0) hash ^= MinVal.GetHashCode();
      if (MaxVal != 0) hash ^= MaxVal.GetHashCode();
      if (IsPublished != false) hash ^= IsPublished.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (PriorityOrder != 0) hash ^= PriorityOrder.GetHashCode();
      if (ItemImportance != 0) hash ^= ItemImportance.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      hash ^= itemValues_.GetHashCode();
      hash ^= customDataTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CategoryId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (DataTypeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DataTypeId);
      }
      if (UnitTypeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnitTypeId);
      }
      if (UnitTypeName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnitTypeName);
      }
      if (SortOrder != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SortOrder);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (IsActive != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsActive);
      }
      if (Abbreviation.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Abbreviation);
      }
      if (MinVal != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinVal);
      }
      if (MaxVal != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxVal);
      }
      if (IsPublished != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPublished);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Icon);
      }
      if (PriorityOrder != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PriorityOrder);
      }
      if (ItemImportance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ItemImportance);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UpdatedBy);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ApplicationId);
      }
      itemValues_.WriteTo(output, _repeated_itemValues_codec);
      customDataTypes_.WriteTo(output, _repeated_customDataTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DataTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataTypeId);
      }
      if (UnitTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTypeId);
      }
      if (UnitTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitTypeName);
      }
      if (SortOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SortOrder);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (Abbreviation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Abbreviation);
      }
      if (MinVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinVal);
      }
      if (MaxVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVal);
      }
      if (IsPublished != false) {
        size += 1 + 1;
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (PriorityOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriorityOrder);
      }
      if (ItemImportance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemImportance);
      }
      if (UpdatedOn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      if (ApplicationId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      size += itemValues_.CalculateSize(_repeated_itemValues_codec);
      size += customDataTypes_.CalculateSize(_repeated_customDataTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DataTypeId != 0) {
        DataTypeId = other.DataTypeId;
      }
      if (other.UnitTypeId != 0) {
        UnitTypeId = other.UnitTypeId;
      }
      if (other.UnitTypeName.Length != 0) {
        UnitTypeName = other.UnitTypeName;
      }
      if (other.SortOrder != 0) {
        SortOrder = other.SortOrder;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.Abbreviation.Length != 0) {
        Abbreviation = other.Abbreviation;
      }
      if (other.MinVal != 0) {
        MinVal = other.MinVal;
      }
      if (other.MaxVal != 0) {
        MaxVal = other.MaxVal;
      }
      if (other.IsPublished != false) {
        IsPublished = other.IsPublished;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.PriorityOrder != 0) {
        PriorityOrder = other.PriorityOrder;
      }
      if (other.ItemImportance != 0) {
        ItemImportance = other.ItemImportance;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      itemValues_.Add(other.itemValues_);
      customDataTypes_.Add(other.customDataTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            DataTypeId = input.ReadInt32();
            break;
          }
          case 40: {
            UnitTypeId = input.ReadInt32();
            break;
          }
          case 50: {
            UnitTypeName = input.ReadString();
            break;
          }
          case 56: {
            SortOrder = input.ReadInt32();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 72: {
            IsActive = input.ReadBool();
            break;
          }
          case 82: {
            Abbreviation = input.ReadString();
            break;
          }
          case 88: {
            MinVal = input.ReadInt32();
            break;
          }
          case 96: {
            MaxVal = input.ReadInt32();
            break;
          }
          case 104: {
            IsPublished = input.ReadBool();
            break;
          }
          case 114: {
            Icon = input.ReadString();
            break;
          }
          case 120: {
            PriorityOrder = input.ReadInt32();
            break;
          }
          case 128: {
            ItemImportance = input.ReadInt32();
            break;
          }
          case 138: {
            UpdatedOn = input.ReadString();
            break;
          }
          case 144: {
            UpdatedBy = input.ReadInt32();
            break;
          }
          case 152: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 162: {
            itemValues_.AddEntriesFrom(input, _repeated_itemValues_codec);
            break;
          }
          case 170: {
            customDataTypes_.AddEntriesFrom(input, _repeated_customDataTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemByCategoryRequest : pb::IMessage<ItemByCategoryRequest> {
    private static readonly pb::MessageParser<ItemByCategoryRequest> _parser = new pb::MessageParser<ItemByCategoryRequest>(() => new ItemByCategoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemByCategoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.ItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemByCategoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemByCategoryRequest(ItemByCategoryRequest other) : this() {
      categoryId_ = other.categoryId_;
      versionId_ = other.versionId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemByCategoryRequest Clone() {
      return new ItemByCategoryRequest(this);
    }

    /// <summary>Field number for the "CategoryId" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private int categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemByCategoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemByCategoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      if (VersionId != other.VersionId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CategoryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CategoryId);
      }
      if (VersionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VersionId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemByCategoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 16: {
            VersionId = input.ReadInt32();
            break;
          }
          case 24: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemList : pb::IMessage<ItemList> {
    private static readonly pb::MessageParser<ItemList> _parser = new pb::MessageParser<ItemList>(() => new ItemList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VehicleData.Service.ProtoClass.ItemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList(ItemList other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList Clone() {
      return new ItemList(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VehicleData.Service.ProtoClass.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::VehicleData.Service.ProtoClass.Item.Parser);
    private readonly pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item> items_ = new pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VehicleData.Service.ProtoClass.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemList other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
