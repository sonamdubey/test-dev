// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EditCMSWindowsService.Messages {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxIVRWRpdENNU1dpbmRvd3NTZXJ2aWNlIhwKB0dy",
            "cGNJbnQSEQoJaW50T3V0cHV0GAEgASgFIk8KEUdycGNGZWF0dXJlQ2FyVVJJ",
            "EhIKCnZlcnNpb25JZHMYASABKAkSEgoKY2F0ZWdvcnlJZBgCIAEoBRISCgpw",
            "bGF0Zm9ybUlkGAMgASgFImEKD0dycGNBcnRpY2xlQmFzZRIPCgdCYXNpY0lk",
            "GAEgASgEEg0KBVRpdGxlGAIgASgJEhIKCkFydGljbGVVcmwYAyABKAkSGgoS",
            "Q29tcGxldGVBcnRpY2xlVXJsGAQgASgJIu4DChJHcnBjQXJ0aWNsZVN1bW1h",
            "cnkSOwoLQXJ0aWNsZUJhc2UYASABKAsyJi5FZGl0Q01TV2luZG93c1NlcnZp",
            "Y2UuR3JwY0FydGljbGVCYXNlEhIKCkNhdGVnb3J5SWQYAiABKA0SDwoHSG9z",
            "dFVybBgDIAEoCRITCgtMYXJnZVBpY1VybBgEIAEoCRITCgtTbWFsbFBpY1Vy",
            "bBgFIAEoCRIWCg5PcmlnaW5hbEltZ1VybBgGIAEoCRITCgtEZXNjcmlwdGlv",
            "bhgHIAEoCRISCgpBdXRob3JOYW1lGAggASgJEhMKC0Rpc3BsYXlEYXRlGAkg",
            "ASgJEg0KBVZpZXdzGAogASgNEhAKCElzU3RpY2t5GAsgASgIEhwKFEZhY2Vi",
            "b29rQ29tbWVudENvdW50GAwgASgNEhAKCE1ha2VOYW1lGA0gASgJEhMKC01h",
            "c2tpbmdOYW1lGA4gASgJEhMKC1N1YkNhdGVnb3J5GA8gASgJEhEKCU1vZGVs",
            "TmFtZRgQIAEoCRIcChRGb3JtYXR0ZWREaXNwbGF5RGF0ZRgRIAEoCRIZChFB",
            "dXRob3JNYXNraW5nTmFtZRgSIAEoCRISCgpJc0ZlYXR1cmVkGBMgASgIEhsK",
            "E0NhdGVnb3J5TWFza2luZ05hbWUYFCABKAkiZgoOR3JwY0NNU0NvbnRlbnQS",
            "EwoLUmVjb3JkQ291bnQYASABKA0SPwoIQXJ0aWNsZXMYAiABKAsyLS5FZGl0",
            "Q01TV2luZG93c1NlcnZpY2UuR3JwY0FydGljbGVTdW1tYXJ5TGlzdCJPCghH",
            "cnBjUGFnZRIOCgZwYWdlSWQYASABKAQSEAoIUHJpb3JpdHkYAiABKA0SEAoI",
            "UGFnZU5hbWUYAyABKAkSDwoHQ29udGVudBgEIAEoCSK0AwoWR3JwY0FydGlj",
            "bGVQYWdlRGV0YWlscxJBCg5BcnRpY2xlU3VtbWFyeRgBIAEoCzIpLkVkaXRD",
            "TVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0aWNsZVN1bW1hcnkSMQoIUGFnZUxp",
            "c3QYAiADKAsyHy5FZGl0Q01TV2luZG93c1NlcnZpY2UuR3JwY1BhZ2USEAoI",
            "VGFnc0xpc3QYAyADKAkSPQoOVmVoaWNsVGFnc0xpc3QYBCADKAsyJS5FZGl0",
            "Q01TV2luZG93c1NlcnZpY2UuR3JwY1ZlaGljbGVUYWcSOwoLTmV4dEFydGlj",
            "bGUYBSABKAsyJi5FZGl0Q01TV2luZG93c1NlcnZpY2UuR3JwY0FydGljbGVC",
            "YXNlEjsKC1ByZXZBcnRpY2xlGAYgASgLMiYuRWRpdENNU1dpbmRvd3NTZXJ2",
            "aWNlLkdycGNBcnRpY2xlQmFzZRIWCg5NYWluSW1nQ2FwdGlvbhgHIAEoCRIW",
            "Cg5Jc01haW5JbWFnZVNldBgIIAEoCBITCgtTaG93R2FsbGVyeRgJIAEoCBIU",
            "CgxDYXRlZ29yeU5hbWUYCiABKAki4wIKEkdycGNBcnRpY2xlRGV0YWlscxIP",
            "CgdDb250ZW50GAEgASgJEhAKCFRhZ3NMaXN0GAIgAygJEj0KDlZlaGljbFRh",
            "Z3NMaXN0GAMgAygLMiUuRWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNWZWhp",
            "Y2xlVGFnEjsKC05leHRBcnRpY2xlGAQgASgLMiYuRWRpdENNU1dpbmRvd3NT",
            "ZXJ2aWNlLkdycGNBcnRpY2xlQmFzZRI7CgtQcmV2QXJ0aWNsZRgFIAEoCzIm",
            "LkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0aWNsZUJhc2USFgoOTWFp",
            "bkltZ0NhcHRpb24YBiABKAkSFgoOSXNNYWluSW1hZ2VTZXQYByABKAgSQQoO",
            "QXJ0aWNsZVN1bW1hcnkYCCABKAsyKS5FZGl0Q01TV2luZG93c1NlcnZpY2Uu",
            "R3JwY0FydGljbGVTdW1tYXJ5ItQBCg5HcnBjVmVoaWNsZVRhZxI+CghNYWtl",
            "QmFzZRgBIAEoCzIsLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQ2FyTWFr",
            "ZUVudGl0eUJhc2USQAoJTW9kZWxCYXNlGAIgASgLMi0uRWRpdENNU1dpbmRv",
            "d3NTZXJ2aWNlLkdycGNDYXJNb2RlbEVudGl0eUJhc2USQAoLVmVyc2lvbkJh",
            "c2UYAyABKAsyKy5FZGl0Q01TV2luZG93c1NlcnZpY2UuR3JwY0NhclZlcnNp",
            "b25FbnRpdHkiUQoWR3JwY0Nhck1vZGVsRW50aXR5QmFzZRIPCgdNb2RlbElk",
            "GAEgASgFEhEKCU1vZGVsTmFtZRgCIAEoCRITCgtNYXNraW5nTmFtZRgDIAEo",
            "CSIwChRHcnBjQ2FyVmVyc2lvbkVudGl0eRIKCgJJZBgBIAEoBRIMCgROYW1l",
            "GAIgASgJIjkKFUdycGNDYXJNYWtlRW50aXR5QmFzZRIOCgZNYWtlSWQYASAB",
            "KAUSEAoITWFrZU5hbWUYAiABKAkimwMKDkdycGNNb2RlbEltYWdlEg8KB0lt",
            "YWdlSWQYASABKA0SDwoHSG9zdFVybBgCIAEoCRIaChJJbWFnZVBhdGhUaHVt",
            "Ym5haWwYAyABKAkSFgoOSW1hZ2VQYXRoTGFyZ2UYBCABKAkSFwoPT3JpZ2lu",
            "YWxJbWdQYXRoGAUgASgJEhkKEU1haW5JbWdDYXRlZ29yeUlkGAYgASgFEhUK",
            "DUltYWdlQ2F0ZWdvcnkYByABKAkSDwoHQ2FwdGlvbhgIIAEoCRIRCglJbWFn",
            "ZU5hbWUYCSABKAkSFAoMQWx0SW1hZ2VOYW1lGAogASgJEhIKCkltYWdlVGl0",
            "bGUYCyABKAkSGAoQSW1hZ2VEZXNjcmlwdGlvbhgMIAEoCRI+CghNYWtlQmFz",
            "ZRgNIAEoCzIsLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQ2FyTWFrZUVu",
            "dGl0eUJhc2USQAoJTW9kZWxCYXNlGA4gASgLMi0uRWRpdENNU1dpbmRvd3NT",
            "ZXJ2aWNlLkdycGNDYXJNb2RlbEVudGl0eUJhc2UiiwEKE0dycGNBcnRpY2xl",
            "QnlDYXRVUkkSFgoOQ2F0ZWdvcnlJZExpc3QYASABKAkSFQoNQXBwbGljYXRp",
            "b25JZBgCIAEoDRISCgpTdGFydEluZGV4GAMgASgNEhAKCEVuZEluZGV4GAQg",
            "ASgNEg4KBk1ha2VJZBgFIAEoBRIPCgdNb2RlbElkGAYgASgFIigKFUdycGNB",
            "cnRpY2xlQ29udGVudFVSSRIPCgdCYXNpY0lkGAEgASgEImcKEUdycGNNb2Rl",
            "bFBob3RvVVJJEhUKDUFwcGxpY2F0aW9uSWQYASABKA0SDwoHTW9kZWxJZBgC",
            "IAEoBRIWCg5DYXRlZ29yeUlkTGlzdBgDIAEoCRISCgpQbGF0Zm9ybUlkGAQg",
            "ASgJInoKFEdycGNBcnRpY2xlUmVjZW50VVJJEhUKDUFwcGxpY2F0aW9uSWQY",
            "ASABKA0SFAoMQ29udGVudFR5cGVzGAIgASgJEhQKDFRvdGFsUmVjb3JkcxgD",
            "IAEoDRIOCgZNYWtlSWQYBCABKAUSDwoHTW9kZWxJZBgFIAEoBSJiChZHcnBj",
            "QXJ0aWNsZVN1bW1hcnlMaXN0EkgKFUxzdEdycGNBcnRpY2xlU3VtbWFyeRgB",
            "IAMoCzIpLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0aWNsZVN1bW1h",
            "cnkiVgoSR3JwY01vZGVsSW1hZ2VMaXN0EkAKEUxzdEdycGNNb2RlbEltYWdl",
            "GAEgAygLMiUuRWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNNb2RlbEltYWdl",
            "IoEDCglHcnBjVmlkZW8SEgoKVmlkZW9UaXRsZRgBIAEoCRIQCghWaWRlb1Vy",
            "bBgCIAEoCRIPCgdWaWRlb0lkGAMgASgJEg0KBVZpZXdzGAQgASgFEg0KBUxp",
            "a2VzGAUgASgFEhMKC0Rlc2NyaXB0aW9uGAYgASgJEg8KB0Jhc2ljSWQYByAB",
            "KAUSDAoEVGFncxgIIAEoCRIQCghEdXJhdGlvbhgJIAEoBRIQCghNYWtlTmFt",
            "ZRgLIAEoCRIRCglNb2RlbE5hbWUYDCABKAkSEwoLTWFza2luZ05hbWUYDSAB",
            "KAkSEAoIU3ViQ2F0SWQYDiABKAkSEgoKU3ViQ2F0TmFtZRgPIAEoCRIVCg1W",
            "aWRlb1RpdGxlVXJsGBAgASgJEg8KB0ltZ0hvc3QYESABKAkSFQoNVGh1bWJu",
            "YWlsUGF0aBgSIAEoCRIRCglJbWFnZVBhdGgYEyABKAkSEwoLRGlzcGxheURh",
            "dGUYFCABKAkSEgoKSXNGZWF0dXJlZBgVIAEoCCKMAQoTR3JwY1ZpZGVvTGlz",
            "dEVudGl0eRI1CgZWaWRlb3MYASABKAsyJS5FZGl0Q01TV2luZG93c1NlcnZp",
            "Y2UuR3JwY1ZpZGVvc0xpc3QSFAoMVG90YWxSZWNvcmRzGAIgASgFEhMKC1By",
            "ZXZQYWdlVXJsGAMgASgJEhMKC05leHRQYWdlVXJsGAQgASgJIkkKDkdycGNW",
            "aWRlb3NMaXN0EjcKDUxzdEdycGNWaWRlb3MYASADKAsyIC5FZGl0Q01TV2lu",
            "ZG93c1NlcnZpY2UuR3JwY1ZpZGVvIkoKGkdycGNWaWRlb3NCeVN1YkNhdGVn",
            "b3J5VVJJEhUKDVN1YkNhdGVnb3J5SWQYASABKA0SFQoNQXBwbGljYXRpb25J",
            "ZBgCIAEoDSI2ChFHcnBjVmlkZW9zQnlJZFVSSRIKCgJJZBgBIAEoBRIVCg1B",
            "cHBsaWNhdGlvbklkGAIgASgNIk0KHEdycGNWaWRlb3NCeVN1YkNhdGVnb3Jp",
            "ZXNVUkkSFgoOU3ViQ2F0ZWdvcnlJZHMYASABKAkSFQoNQXBwbGljYXRpb25J",
            "ZBgCIAEoDTL/CwoSRWRpdENNU0dycGNTZXJ2aWNlEnUKFUdldE1vc3RSZWNl",
            "bnRBcnRpY2xlcxIrLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0aWNs",
            "ZVJlY2VudFVSSRotLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0aWNs",
            "ZVN1bW1hcnlMaXN0IgASbwoYR2V0Q29udGVudExpc3RCeUNhdGVnb3J5Eiou",
            "RWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNBcnRpY2xlQnlDYXRVUkkaJS5F",
            "ZGl0Q01TV2luZG93c1NlcnZpY2UuR3JwY0NNU0NvbnRlbnQiABJuChFHZXRD",
            "b250ZW50RGV0YWlscxIsLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjQXJ0",
            "aWNsZUNvbnRlbnRVUkkaKS5FZGl0Q01TV2luZG93c1NlcnZpY2UuR3JwY0Fy",
            "dGljbGVEZXRhaWxzIgAScAoPR2V0Q29udGVudFBhZ2VzEiwuRWRpdENNU1dp",
            "bmRvd3NTZXJ2aWNlLkdycGNBcnRpY2xlQ29udGVudFVSSRotLkVkaXRDTVNX",
            "aW5kb3dzU2VydmljZS5HcnBjQXJ0aWNsZVBhZ2VEZXRhaWxzIgASawoSR2V0",
            "TW9kZWxQaG90b3NMaXN0EiguRWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNN",
            "b2RlbFBob3RvVVJJGikuRWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNNb2Rl",
            "bEltYWdlTGlzdCIAEm0KEEdldEFydGljbGVQaG90b3MSLC5FZGl0Q01TV2lu",
            "ZG93c1NlcnZpY2UuR3JwY0FydGljbGVDb250ZW50VVJJGikuRWRpdENNU1dp",
            "bmRvd3NTZXJ2aWNlLkdycGNNb2RlbEltYWdlTGlzdCIAEmAKEkdycGNHZXRG",
            "ZWF0dXJlZENhchIoLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjRmVhdHVy",
            "ZUNhclVSSRoeLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjSW50IgASdAoW",
            "R2V0VmlkZW9zQnlTdWJDYXRlZ29yeRIxLkVkaXRDTVNXaW5kb3dzU2Vydmlj",
            "ZS5HcnBjVmlkZW9zQnlTdWJDYXRlZ29yeVVSSRolLkVkaXRDTVNXaW5kb3dz",
            "U2VydmljZS5HcnBjVmlkZW9zTGlzdCIAEn0KGEdldFZpZGVvc0J5U3ViQ2F0",
            "ZWdvcmllcxIzLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjVmlkZW9zQnlT",
            "dWJDYXRlZ29yaWVzVVJJGiouRWRpdENNU1dpbmRvd3NTZXJ2aWNlLkdycGNW",
            "aWRlb0xpc3RFbnRpdHkiABJnChJHZXRWaWRlb3NCeU1vZGVsSWQSKC5FZGl0",
            "Q01TV2luZG93c1NlcnZpY2UuR3JwY1ZpZGVvc0J5SWRVUkkaJS5FZGl0Q01T",
            "V2luZG93c1NlcnZpY2UuR3JwY1ZpZGVvc0xpc3QiABJmChFHZXRWaWRlb3NC",
            "eU1ha2VJZBIoLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjVmlkZW9zQnlJ",
            "ZFVSSRolLkVkaXRDTVNXaW5kb3dzU2VydmljZS5HcnBjVmlkZW9zTGlzdCIA",
            "EmUKEEdldFNpbWlsYXJWaWRlb3MSKC5FZGl0Q01TV2luZG93c1NlcnZpY2Uu",
            "R3JwY1ZpZGVvc0J5SWRVUkkaJS5FZGl0Q01TV2luZG93c1NlcnZpY2UuR3Jw",
            "Y1ZpZGVvc0xpc3QiABJhChFHZXRWaWRlb0J5QmFzaWNJZBIoLkVkaXRDTVNX",
            "aW5kb3dzU2VydmljZS5HcnBjVmlkZW9zQnlJZFVSSRogLkVkaXRDTVNXaW5k",
            "b3dzU2VydmljZS5HcnBjVmlkZW8iABJRCg1DaGVja0hlYXJ0Qml0Eh4uRWRp",
            "dENNU1dpbmRvd3NTZXJ2aWNlLkdycGNJbnQaHi5FZGl0Q01TV2luZG93c1Nl",
            "cnZpY2UuR3JwY0ludCIAQiGqAh5FZGl0Q01TV2luZG93c1NlcnZpY2UuTWVz",
            "c2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcInt), global::EditCMSWindowsService.Messages.GrpcInt.Parser, new[]{ "IntOutput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcFeatureCarURI), global::EditCMSWindowsService.Messages.GrpcFeatureCarURI.Parser, new[]{ "VersionIds", "CategoryId", "PlatformId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleBase), global::EditCMSWindowsService.Messages.GrpcArticleBase.Parser, new[]{ "BasicId", "Title", "ArticleUrl", "CompleteArticleUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleSummary), global::EditCMSWindowsService.Messages.GrpcArticleSummary.Parser, new[]{ "ArticleBase", "CategoryId", "HostUrl", "LargePicUrl", "SmallPicUrl", "OriginalImgUrl", "Description", "AuthorName", "DisplayDate", "Views", "IsSticky", "FacebookCommentCount", "MakeName", "MaskingName", "SubCategory", "ModelName", "FormattedDisplayDate", "AuthorMaskingName", "IsFeatured", "CategoryMaskingName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcCMSContent), global::EditCMSWindowsService.Messages.GrpcCMSContent.Parser, new[]{ "RecordCount", "Articles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcPage), global::EditCMSWindowsService.Messages.GrpcPage.Parser, new[]{ "PageId", "Priority", "PageName", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticlePageDetails), global::EditCMSWindowsService.Messages.GrpcArticlePageDetails.Parser, new[]{ "ArticleSummary", "PageList", "TagsList", "VehiclTagsList", "NextArticle", "PrevArticle", "MainImgCaption", "IsMainImageSet", "ShowGallery", "CategoryName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleDetails), global::EditCMSWindowsService.Messages.GrpcArticleDetails.Parser, new[]{ "Content", "TagsList", "VehiclTagsList", "NextArticle", "PrevArticle", "MainImgCaption", "IsMainImageSet", "ArticleSummary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVehicleTag), global::EditCMSWindowsService.Messages.GrpcVehicleTag.Parser, new[]{ "MakeBase", "ModelBase", "VersionBase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase), global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase.Parser, new[]{ "ModelId", "ModelName", "MaskingName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcCarVersionEntity), global::EditCMSWindowsService.Messages.GrpcCarVersionEntity.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase), global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase.Parser, new[]{ "MakeId", "MakeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcModelImage), global::EditCMSWindowsService.Messages.GrpcModelImage.Parser, new[]{ "ImageId", "HostUrl", "ImagePathThumbnail", "ImagePathLarge", "OriginalImgPath", "MainImgCategoryId", "ImageCategory", "Caption", "ImageName", "AltImageName", "ImageTitle", "ImageDescription", "MakeBase", "ModelBase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleByCatURI), global::EditCMSWindowsService.Messages.GrpcArticleByCatURI.Parser, new[]{ "CategoryIdList", "ApplicationId", "StartIndex", "EndIndex", "MakeId", "ModelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleContentURI), global::EditCMSWindowsService.Messages.GrpcArticleContentURI.Parser, new[]{ "BasicId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcModelPhotoURI), global::EditCMSWindowsService.Messages.GrpcModelPhotoURI.Parser, new[]{ "ApplicationId", "ModelId", "CategoryIdList", "PlatformId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleRecentURI), global::EditCMSWindowsService.Messages.GrpcArticleRecentURI.Parser, new[]{ "ApplicationId", "ContentTypes", "TotalRecords", "MakeId", "ModelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcArticleSummaryList), global::EditCMSWindowsService.Messages.GrpcArticleSummaryList.Parser, new[]{ "LstGrpcArticleSummary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcModelImageList), global::EditCMSWindowsService.Messages.GrpcModelImageList.Parser, new[]{ "LstGrpcModelImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideo), global::EditCMSWindowsService.Messages.GrpcVideo.Parser, new[]{ "VideoTitle", "VideoUrl", "VideoId", "Views", "Likes", "Description", "BasicId", "Tags", "Duration", "MakeName", "ModelName", "MaskingName", "SubCatId", "SubCatName", "VideoTitleUrl", "ImgHost", "ThumbnailPath", "ImagePath", "DisplayDate", "IsFeatured" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideoListEntity), global::EditCMSWindowsService.Messages.GrpcVideoListEntity.Parser, new[]{ "Videos", "TotalRecords", "PrevPageUrl", "NextPageUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideosList), global::EditCMSWindowsService.Messages.GrpcVideosList.Parser, new[]{ "LstGrpcVideos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideosBySubCategoryURI), global::EditCMSWindowsService.Messages.GrpcVideosBySubCategoryURI.Parser, new[]{ "SubCategoryId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideosByIdURI), global::EditCMSWindowsService.Messages.GrpcVideosByIdURI.Parser, new[]{ "Id", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EditCMSWindowsService.Messages.GrpcVideosBySubCategoriesURI), global::EditCMSWindowsService.Messages.GrpcVideosBySubCategoriesURI.Parser, new[]{ "SubCategoryIds", "ApplicationId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcInt : pb::IMessage<GrpcInt> {
    private static readonly pb::MessageParser<GrpcInt> _parser = new pb::MessageParser<GrpcInt>(() => new GrpcInt());
    public static pb::MessageParser<GrpcInt> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcInt(GrpcInt other) : this() {
      intOutput_ = other.intOutput_;
    }

    public GrpcInt Clone() {
      return new GrpcInt(this);
    }

    /// <summary>Field number for the "intOutput" field.</summary>
    public const int IntOutputFieldNumber = 1;
    private int intOutput_;
    public int IntOutput {
      get { return intOutput_; }
      set {
        intOutput_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcInt);
    }

    public bool Equals(GrpcInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntOutput != other.IntOutput) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IntOutput != 0) hash ^= IntOutput.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IntOutput != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntOutput);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IntOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntOutput);
      }
      return size;
    }

    public void MergeFrom(GrpcInt other) {
      if (other == null) {
        return;
      }
      if (other.IntOutput != 0) {
        IntOutput = other.IntOutput;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntOutput = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcFeatureCarURI : pb::IMessage<GrpcFeatureCarURI> {
    private static readonly pb::MessageParser<GrpcFeatureCarURI> _parser = new pb::MessageParser<GrpcFeatureCarURI>(() => new GrpcFeatureCarURI());
    public static pb::MessageParser<GrpcFeatureCarURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcFeatureCarURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcFeatureCarURI(GrpcFeatureCarURI other) : this() {
      versionIds_ = other.versionIds_;
      categoryId_ = other.categoryId_;
      platformId_ = other.platformId_;
    }

    public GrpcFeatureCarURI Clone() {
      return new GrpcFeatureCarURI(this);
    }

    /// <summary>Field number for the "versionIds" field.</summary>
    public const int VersionIdsFieldNumber = 1;
    private string versionIds_ = "";
    public string VersionIds {
      get { return versionIds_; }
      set {
        versionIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 2;
    private int categoryId_;
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "platformId" field.</summary>
    public const int PlatformIdFieldNumber = 3;
    private int platformId_;
    public int PlatformId {
      get { return platformId_; }
      set {
        platformId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcFeatureCarURI);
    }

    public bool Equals(GrpcFeatureCarURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionIds != other.VersionIds) return false;
      if (CategoryId != other.CategoryId) return false;
      if (PlatformId != other.PlatformId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (VersionIds.Length != 0) hash ^= VersionIds.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (PlatformId != 0) hash ^= PlatformId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (VersionIds.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VersionIds);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CategoryId);
      }
      if (PlatformId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlatformId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (VersionIds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionIds);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (PlatformId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformId);
      }
      return size;
    }

    public void MergeFrom(GrpcFeatureCarURI other) {
      if (other == null) {
        return;
      }
      if (other.VersionIds.Length != 0) {
        VersionIds = other.VersionIds;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.PlatformId != 0) {
        PlatformId = other.PlatformId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VersionIds = input.ReadString();
            break;
          }
          case 16: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 24: {
            PlatformId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleBase : pb::IMessage<GrpcArticleBase> {
    private static readonly pb::MessageParser<GrpcArticleBase> _parser = new pb::MessageParser<GrpcArticleBase>(() => new GrpcArticleBase());
    public static pb::MessageParser<GrpcArticleBase> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleBase(GrpcArticleBase other) : this() {
      basicId_ = other.basicId_;
      title_ = other.title_;
      articleUrl_ = other.articleUrl_;
      completeArticleUrl_ = other.completeArticleUrl_;
    }

    public GrpcArticleBase Clone() {
      return new GrpcArticleBase(this);
    }

    /// <summary>Field number for the "BasicId" field.</summary>
    public const int BasicIdFieldNumber = 1;
    private ulong basicId_;
    public ulong BasicId {
      get { return basicId_; }
      set {
        basicId_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArticleUrl" field.</summary>
    public const int ArticleUrlFieldNumber = 3;
    private string articleUrl_ = "";
    public string ArticleUrl {
      get { return articleUrl_; }
      set {
        articleUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompleteArticleUrl" field.</summary>
    public const int CompleteArticleUrlFieldNumber = 4;
    private string completeArticleUrl_ = "";
    public string CompleteArticleUrl {
      get { return completeArticleUrl_; }
      set {
        completeArticleUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleBase);
    }

    public bool Equals(GrpcArticleBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicId != other.BasicId) return false;
      if (Title != other.Title) return false;
      if (ArticleUrl != other.ArticleUrl) return false;
      if (CompleteArticleUrl != other.CompleteArticleUrl) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BasicId != 0UL) hash ^= BasicId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (ArticleUrl.Length != 0) hash ^= ArticleUrl.GetHashCode();
      if (CompleteArticleUrl.Length != 0) hash ^= CompleteArticleUrl.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BasicId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BasicId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (ArticleUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ArticleUrl);
      }
      if (CompleteArticleUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CompleteArticleUrl);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BasicId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BasicId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (ArticleUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArticleUrl);
      }
      if (CompleteArticleUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteArticleUrl);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleBase other) {
      if (other == null) {
        return;
      }
      if (other.BasicId != 0UL) {
        BasicId = other.BasicId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.ArticleUrl.Length != 0) {
        ArticleUrl = other.ArticleUrl;
      }
      if (other.CompleteArticleUrl.Length != 0) {
        CompleteArticleUrl = other.CompleteArticleUrl;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BasicId = input.ReadUInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            ArticleUrl = input.ReadString();
            break;
          }
          case 34: {
            CompleteArticleUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleSummary : pb::IMessage<GrpcArticleSummary> {
    private static readonly pb::MessageParser<GrpcArticleSummary> _parser = new pb::MessageParser<GrpcArticleSummary>(() => new GrpcArticleSummary());
    public static pb::MessageParser<GrpcArticleSummary> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleSummary(GrpcArticleSummary other) : this() {
      ArticleBase = other.articleBase_ != null ? other.ArticleBase.Clone() : null;
      categoryId_ = other.categoryId_;
      hostUrl_ = other.hostUrl_;
      largePicUrl_ = other.largePicUrl_;
      smallPicUrl_ = other.smallPicUrl_;
      originalImgUrl_ = other.originalImgUrl_;
      description_ = other.description_;
      authorName_ = other.authorName_;
      displayDate_ = other.displayDate_;
      views_ = other.views_;
      isSticky_ = other.isSticky_;
      facebookCommentCount_ = other.facebookCommentCount_;
      makeName_ = other.makeName_;
      maskingName_ = other.maskingName_;
      subCategory_ = other.subCategory_;
      modelName_ = other.modelName_;
      formattedDisplayDate_ = other.formattedDisplayDate_;
      authorMaskingName_ = other.authorMaskingName_;
      isFeatured_ = other.isFeatured_;
      categoryMaskingName_ = other.categoryMaskingName_;
    }

    public GrpcArticleSummary Clone() {
      return new GrpcArticleSummary(this);
    }

    /// <summary>Field number for the "ArticleBase" field.</summary>
    public const int ArticleBaseFieldNumber = 1;
    private global::EditCMSWindowsService.Messages.GrpcArticleBase articleBase_;
    public global::EditCMSWindowsService.Messages.GrpcArticleBase ArticleBase {
      get { return articleBase_; }
      set {
        articleBase_ = value;
      }
    }

    /// <summary>Field number for the "CategoryId" field.</summary>
    public const int CategoryIdFieldNumber = 2;
    private uint categoryId_;
    public uint CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "HostUrl" field.</summary>
    public const int HostUrlFieldNumber = 3;
    private string hostUrl_ = "";
    public string HostUrl {
      get { return hostUrl_; }
      set {
        hostUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LargePicUrl" field.</summary>
    public const int LargePicUrlFieldNumber = 4;
    private string largePicUrl_ = "";
    public string LargePicUrl {
      get { return largePicUrl_; }
      set {
        largePicUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SmallPicUrl" field.</summary>
    public const int SmallPicUrlFieldNumber = 5;
    private string smallPicUrl_ = "";
    public string SmallPicUrl {
      get { return smallPicUrl_; }
      set {
        smallPicUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OriginalImgUrl" field.</summary>
    public const int OriginalImgUrlFieldNumber = 6;
    private string originalImgUrl_ = "";
    public string OriginalImgUrl {
      get { return originalImgUrl_; }
      set {
        originalImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AuthorName" field.</summary>
    public const int AuthorNameFieldNumber = 8;
    private string authorName_ = "";
    public string AuthorName {
      get { return authorName_; }
      set {
        authorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayDate" field.</summary>
    public const int DisplayDateFieldNumber = 9;
    private string displayDate_ = "";
    public string DisplayDate {
      get { return displayDate_; }
      set {
        displayDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Views" field.</summary>
    public const int ViewsFieldNumber = 10;
    private uint views_;
    public uint Views {
      get { return views_; }
      set {
        views_ = value;
      }
    }

    /// <summary>Field number for the "IsSticky" field.</summary>
    public const int IsStickyFieldNumber = 11;
    private bool isSticky_;
    public bool IsSticky {
      get { return isSticky_; }
      set {
        isSticky_ = value;
      }
    }

    /// <summary>Field number for the "FacebookCommentCount" field.</summary>
    public const int FacebookCommentCountFieldNumber = 12;
    private uint facebookCommentCount_;
    public uint FacebookCommentCount {
      get { return facebookCommentCount_; }
      set {
        facebookCommentCount_ = value;
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 13;
    private string makeName_ = "";
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 14;
    private string maskingName_ = "";
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubCategory" field.</summary>
    public const int SubCategoryFieldNumber = 15;
    private string subCategory_ = "";
    public string SubCategory {
      get { return subCategory_; }
      set {
        subCategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 16;
    private string modelName_ = "";
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FormattedDisplayDate" field.</summary>
    public const int FormattedDisplayDateFieldNumber = 17;
    private string formattedDisplayDate_ = "";
    public string FormattedDisplayDate {
      get { return formattedDisplayDate_; }
      set {
        formattedDisplayDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AuthorMaskingName" field.</summary>
    public const int AuthorMaskingNameFieldNumber = 18;
    private string authorMaskingName_ = "";
    public string AuthorMaskingName {
      get { return authorMaskingName_; }
      set {
        authorMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsFeatured" field.</summary>
    public const int IsFeaturedFieldNumber = 19;
    private bool isFeatured_;
    public bool IsFeatured {
      get { return isFeatured_; }
      set {
        isFeatured_ = value;
      }
    }

    /// <summary>Field number for the "CategoryMaskingName" field.</summary>
    public const int CategoryMaskingNameFieldNumber = 20;
    private string categoryMaskingName_ = "";
    public string CategoryMaskingName {
      get { return categoryMaskingName_; }
      set {
        categoryMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleSummary);
    }

    public bool Equals(GrpcArticleSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArticleBase, other.ArticleBase)) return false;
      if (CategoryId != other.CategoryId) return false;
      if (HostUrl != other.HostUrl) return false;
      if (LargePicUrl != other.LargePicUrl) return false;
      if (SmallPicUrl != other.SmallPicUrl) return false;
      if (OriginalImgUrl != other.OriginalImgUrl) return false;
      if (Description != other.Description) return false;
      if (AuthorName != other.AuthorName) return false;
      if (DisplayDate != other.DisplayDate) return false;
      if (Views != other.Views) return false;
      if (IsSticky != other.IsSticky) return false;
      if (FacebookCommentCount != other.FacebookCommentCount) return false;
      if (MakeName != other.MakeName) return false;
      if (MaskingName != other.MaskingName) return false;
      if (SubCategory != other.SubCategory) return false;
      if (ModelName != other.ModelName) return false;
      if (FormattedDisplayDate != other.FormattedDisplayDate) return false;
      if (AuthorMaskingName != other.AuthorMaskingName) return false;
      if (IsFeatured != other.IsFeatured) return false;
      if (CategoryMaskingName != other.CategoryMaskingName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (articleBase_ != null) hash ^= ArticleBase.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (HostUrl.Length != 0) hash ^= HostUrl.GetHashCode();
      if (LargePicUrl.Length != 0) hash ^= LargePicUrl.GetHashCode();
      if (SmallPicUrl.Length != 0) hash ^= SmallPicUrl.GetHashCode();
      if (OriginalImgUrl.Length != 0) hash ^= OriginalImgUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AuthorName.Length != 0) hash ^= AuthorName.GetHashCode();
      if (DisplayDate.Length != 0) hash ^= DisplayDate.GetHashCode();
      if (Views != 0) hash ^= Views.GetHashCode();
      if (IsSticky != false) hash ^= IsSticky.GetHashCode();
      if (FacebookCommentCount != 0) hash ^= FacebookCommentCount.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (SubCategory.Length != 0) hash ^= SubCategory.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (FormattedDisplayDate.Length != 0) hash ^= FormattedDisplayDate.GetHashCode();
      if (AuthorMaskingName.Length != 0) hash ^= AuthorMaskingName.GetHashCode();
      if (IsFeatured != false) hash ^= IsFeatured.GetHashCode();
      if (CategoryMaskingName.Length != 0) hash ^= CategoryMaskingName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (articleBase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArticleBase);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CategoryId);
      }
      if (HostUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HostUrl);
      }
      if (LargePicUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LargePicUrl);
      }
      if (SmallPicUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SmallPicUrl);
      }
      if (OriginalImgUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OriginalImgUrl);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (AuthorName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthorName);
      }
      if (DisplayDate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DisplayDate);
      }
      if (Views != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Views);
      }
      if (IsSticky != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsSticky);
      }
      if (FacebookCommentCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FacebookCommentCount);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MakeName);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MaskingName);
      }
      if (SubCategory.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SubCategory);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ModelName);
      }
      if (FormattedDisplayDate.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FormattedDisplayDate);
      }
      if (AuthorMaskingName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AuthorMaskingName);
      }
      if (IsFeatured != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsFeatured);
      }
      if (CategoryMaskingName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CategoryMaskingName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (articleBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArticleBase);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CategoryId);
      }
      if (HostUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostUrl);
      }
      if (LargePicUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LargePicUrl);
      }
      if (SmallPicUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SmallPicUrl);
      }
      if (OriginalImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalImgUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AuthorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorName);
      }
      if (DisplayDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayDate);
      }
      if (Views != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Views);
      }
      if (IsSticky != false) {
        size += 1 + 1;
      }
      if (FacebookCommentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FacebookCommentCount);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (SubCategory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCategory);
      }
      if (ModelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (FormattedDisplayDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FormattedDisplayDate);
      }
      if (AuthorMaskingName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AuthorMaskingName);
      }
      if (IsFeatured != false) {
        size += 2 + 1;
      }
      if (CategoryMaskingName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CategoryMaskingName);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleSummary other) {
      if (other == null) {
        return;
      }
      if (other.articleBase_ != null) {
        if (articleBase_ == null) {
          articleBase_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
        }
        ArticleBase.MergeFrom(other.ArticleBase);
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.HostUrl.Length != 0) {
        HostUrl = other.HostUrl;
      }
      if (other.LargePicUrl.Length != 0) {
        LargePicUrl = other.LargePicUrl;
      }
      if (other.SmallPicUrl.Length != 0) {
        SmallPicUrl = other.SmallPicUrl;
      }
      if (other.OriginalImgUrl.Length != 0) {
        OriginalImgUrl = other.OriginalImgUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AuthorName.Length != 0) {
        AuthorName = other.AuthorName;
      }
      if (other.DisplayDate.Length != 0) {
        DisplayDate = other.DisplayDate;
      }
      if (other.Views != 0) {
        Views = other.Views;
      }
      if (other.IsSticky != false) {
        IsSticky = other.IsSticky;
      }
      if (other.FacebookCommentCount != 0) {
        FacebookCommentCount = other.FacebookCommentCount;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.SubCategory.Length != 0) {
        SubCategory = other.SubCategory;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.FormattedDisplayDate.Length != 0) {
        FormattedDisplayDate = other.FormattedDisplayDate;
      }
      if (other.AuthorMaskingName.Length != 0) {
        AuthorMaskingName = other.AuthorMaskingName;
      }
      if (other.IsFeatured != false) {
        IsFeatured = other.IsFeatured;
      }
      if (other.CategoryMaskingName.Length != 0) {
        CategoryMaskingName = other.CategoryMaskingName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (articleBase_ == null) {
              articleBase_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
            }
            input.ReadMessage(articleBase_);
            break;
          }
          case 16: {
            CategoryId = input.ReadUInt32();
            break;
          }
          case 26: {
            HostUrl = input.ReadString();
            break;
          }
          case 34: {
            LargePicUrl = input.ReadString();
            break;
          }
          case 42: {
            SmallPicUrl = input.ReadString();
            break;
          }
          case 50: {
            OriginalImgUrl = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            AuthorName = input.ReadString();
            break;
          }
          case 74: {
            DisplayDate = input.ReadString();
            break;
          }
          case 80: {
            Views = input.ReadUInt32();
            break;
          }
          case 88: {
            IsSticky = input.ReadBool();
            break;
          }
          case 96: {
            FacebookCommentCount = input.ReadUInt32();
            break;
          }
          case 106: {
            MakeName = input.ReadString();
            break;
          }
          case 114: {
            MaskingName = input.ReadString();
            break;
          }
          case 122: {
            SubCategory = input.ReadString();
            break;
          }
          case 130: {
            ModelName = input.ReadString();
            break;
          }
          case 138: {
            FormattedDisplayDate = input.ReadString();
            break;
          }
          case 146: {
            AuthorMaskingName = input.ReadString();
            break;
          }
          case 152: {
            IsFeatured = input.ReadBool();
            break;
          }
          case 162: {
            CategoryMaskingName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcCMSContent : pb::IMessage<GrpcCMSContent> {
    private static readonly pb::MessageParser<GrpcCMSContent> _parser = new pb::MessageParser<GrpcCMSContent>(() => new GrpcCMSContent());
    public static pb::MessageParser<GrpcCMSContent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcCMSContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcCMSContent(GrpcCMSContent other) : this() {
      recordCount_ = other.recordCount_;
      Articles = other.articles_ != null ? other.Articles.Clone() : null;
    }

    public GrpcCMSContent Clone() {
      return new GrpcCMSContent(this);
    }

    /// <summary>Field number for the "RecordCount" field.</summary>
    public const int RecordCountFieldNumber = 1;
    private uint recordCount_;
    public uint RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    /// <summary>Field number for the "Articles" field.</summary>
    public const int ArticlesFieldNumber = 2;
    private global::EditCMSWindowsService.Messages.GrpcArticleSummaryList articles_;
    public global::EditCMSWindowsService.Messages.GrpcArticleSummaryList Articles {
      get { return articles_; }
      set {
        articles_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcCMSContent);
    }

    public bool Equals(GrpcCMSContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordCount != other.RecordCount) return false;
      if (!object.Equals(Articles, other.Articles)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RecordCount != 0) hash ^= RecordCount.GetHashCode();
      if (articles_ != null) hash ^= Articles.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordCount);
      }
      if (articles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Articles);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordCount);
      }
      if (articles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Articles);
      }
      return size;
    }

    public void MergeFrom(GrpcCMSContent other) {
      if (other == null) {
        return;
      }
      if (other.RecordCount != 0) {
        RecordCount = other.RecordCount;
      }
      if (other.articles_ != null) {
        if (articles_ == null) {
          articles_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummaryList();
        }
        Articles.MergeFrom(other.Articles);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordCount = input.ReadUInt32();
            break;
          }
          case 18: {
            if (articles_ == null) {
              articles_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummaryList();
            }
            input.ReadMessage(articles_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcPage : pb::IMessage<GrpcPage> {
    private static readonly pb::MessageParser<GrpcPage> _parser = new pb::MessageParser<GrpcPage>(() => new GrpcPage());
    public static pb::MessageParser<GrpcPage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcPage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcPage(GrpcPage other) : this() {
      pageId_ = other.pageId_;
      priority_ = other.priority_;
      pageName_ = other.pageName_;
      content_ = other.content_;
    }

    public GrpcPage Clone() {
      return new GrpcPage(this);
    }

    /// <summary>Field number for the "pageId" field.</summary>
    public const int PageIdFieldNumber = 1;
    private ulong pageId_;
    public ulong PageId {
      get { return pageId_; }
      set {
        pageId_ = value;
      }
    }

    /// <summary>Field number for the "Priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "PageName" field.</summary>
    public const int PageNameFieldNumber = 3;
    private string pageName_ = "";
    public string PageName {
      get { return pageName_; }
      set {
        pageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcPage);
    }

    public bool Equals(GrpcPage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageId != other.PageId) return false;
      if (Priority != other.Priority) return false;
      if (PageName != other.PageName) return false;
      if (Content != other.Content) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PageId != 0UL) hash ^= PageId.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (PageName.Length != 0) hash ^= PageName.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PageId);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (PageName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageName);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PageId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PageId);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (PageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageName);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(GrpcPage other) {
      if (other == null) {
        return;
      }
      if (other.PageId != 0UL) {
        PageId = other.PageId;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.PageName.Length != 0) {
        PageName = other.PageName;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageId = input.ReadUInt64();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            PageName = input.ReadString();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticlePageDetails : pb::IMessage<GrpcArticlePageDetails> {
    private static readonly pb::MessageParser<GrpcArticlePageDetails> _parser = new pb::MessageParser<GrpcArticlePageDetails>(() => new GrpcArticlePageDetails());
    public static pb::MessageParser<GrpcArticlePageDetails> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticlePageDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticlePageDetails(GrpcArticlePageDetails other) : this() {
      ArticleSummary = other.articleSummary_ != null ? other.ArticleSummary.Clone() : null;
      pageList_ = other.pageList_.Clone();
      tagsList_ = other.tagsList_.Clone();
      vehiclTagsList_ = other.vehiclTagsList_.Clone();
      NextArticle = other.nextArticle_ != null ? other.NextArticle.Clone() : null;
      PrevArticle = other.prevArticle_ != null ? other.PrevArticle.Clone() : null;
      mainImgCaption_ = other.mainImgCaption_;
      isMainImageSet_ = other.isMainImageSet_;
      showGallery_ = other.showGallery_;
      categoryName_ = other.categoryName_;
    }

    public GrpcArticlePageDetails Clone() {
      return new GrpcArticlePageDetails(this);
    }

    /// <summary>Field number for the "ArticleSummary" field.</summary>
    public const int ArticleSummaryFieldNumber = 1;
    private global::EditCMSWindowsService.Messages.GrpcArticleSummary articleSummary_;
    public global::EditCMSWindowsService.Messages.GrpcArticleSummary ArticleSummary {
      get { return articleSummary_; }
      set {
        articleSummary_ = value;
      }
    }

    /// <summary>Field number for the "PageList" field.</summary>
    public const int PageListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcPage> _repeated_pageList_codec
        = pb::FieldCodec.ForMessage(18, global::EditCMSWindowsService.Messages.GrpcPage.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcPage> pageList_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcPage>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcPage> PageList {
      get { return pageList_; }
    }

    /// <summary>Field number for the "TagsList" field.</summary>
    public const int TagsListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tagsList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tagsList_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TagsList {
      get { return tagsList_; }
    }

    /// <summary>Field number for the "VehiclTagsList" field.</summary>
    public const int VehiclTagsListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcVehicleTag> _repeated_vehiclTagsList_codec
        = pb::FieldCodec.ForMessage(34, global::EditCMSWindowsService.Messages.GrpcVehicleTag.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag> vehiclTagsList_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag> VehiclTagsList {
      get { return vehiclTagsList_; }
    }

    /// <summary>Field number for the "NextArticle" field.</summary>
    public const int NextArticleFieldNumber = 5;
    private global::EditCMSWindowsService.Messages.GrpcArticleBase nextArticle_;
    public global::EditCMSWindowsService.Messages.GrpcArticleBase NextArticle {
      get { return nextArticle_; }
      set {
        nextArticle_ = value;
      }
    }

    /// <summary>Field number for the "PrevArticle" field.</summary>
    public const int PrevArticleFieldNumber = 6;
    private global::EditCMSWindowsService.Messages.GrpcArticleBase prevArticle_;
    public global::EditCMSWindowsService.Messages.GrpcArticleBase PrevArticle {
      get { return prevArticle_; }
      set {
        prevArticle_ = value;
      }
    }

    /// <summary>Field number for the "MainImgCaption" field.</summary>
    public const int MainImgCaptionFieldNumber = 7;
    private string mainImgCaption_ = "";
    public string MainImgCaption {
      get { return mainImgCaption_; }
      set {
        mainImgCaption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsMainImageSet" field.</summary>
    public const int IsMainImageSetFieldNumber = 8;
    private bool isMainImageSet_;
    public bool IsMainImageSet {
      get { return isMainImageSet_; }
      set {
        isMainImageSet_ = value;
      }
    }

    /// <summary>Field number for the "ShowGallery" field.</summary>
    public const int ShowGalleryFieldNumber = 9;
    private bool showGallery_;
    public bool ShowGallery {
      get { return showGallery_; }
      set {
        showGallery_ = value;
      }
    }

    /// <summary>Field number for the "CategoryName" field.</summary>
    public const int CategoryNameFieldNumber = 10;
    private string categoryName_ = "";
    public string CategoryName {
      get { return categoryName_; }
      set {
        categoryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticlePageDetails);
    }

    public bool Equals(GrpcArticlePageDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArticleSummary, other.ArticleSummary)) return false;
      if(!pageList_.Equals(other.pageList_)) return false;
      if(!tagsList_.Equals(other.tagsList_)) return false;
      if(!vehiclTagsList_.Equals(other.vehiclTagsList_)) return false;
      if (!object.Equals(NextArticle, other.NextArticle)) return false;
      if (!object.Equals(PrevArticle, other.PrevArticle)) return false;
      if (MainImgCaption != other.MainImgCaption) return false;
      if (IsMainImageSet != other.IsMainImageSet) return false;
      if (ShowGallery != other.ShowGallery) return false;
      if (CategoryName != other.CategoryName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (articleSummary_ != null) hash ^= ArticleSummary.GetHashCode();
      hash ^= pageList_.GetHashCode();
      hash ^= tagsList_.GetHashCode();
      hash ^= vehiclTagsList_.GetHashCode();
      if (nextArticle_ != null) hash ^= NextArticle.GetHashCode();
      if (prevArticle_ != null) hash ^= PrevArticle.GetHashCode();
      if (MainImgCaption.Length != 0) hash ^= MainImgCaption.GetHashCode();
      if (IsMainImageSet != false) hash ^= IsMainImageSet.GetHashCode();
      if (ShowGallery != false) hash ^= ShowGallery.GetHashCode();
      if (CategoryName.Length != 0) hash ^= CategoryName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (articleSummary_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArticleSummary);
      }
      pageList_.WriteTo(output, _repeated_pageList_codec);
      tagsList_.WriteTo(output, _repeated_tagsList_codec);
      vehiclTagsList_.WriteTo(output, _repeated_vehiclTagsList_codec);
      if (nextArticle_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NextArticle);
      }
      if (prevArticle_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PrevArticle);
      }
      if (MainImgCaption.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MainImgCaption);
      }
      if (IsMainImageSet != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsMainImageSet);
      }
      if (ShowGallery != false) {
        output.WriteRawTag(72);
        output.WriteBool(ShowGallery);
      }
      if (CategoryName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CategoryName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (articleSummary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArticleSummary);
      }
      size += pageList_.CalculateSize(_repeated_pageList_codec);
      size += tagsList_.CalculateSize(_repeated_tagsList_codec);
      size += vehiclTagsList_.CalculateSize(_repeated_vehiclTagsList_codec);
      if (nextArticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextArticle);
      }
      if (prevArticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevArticle);
      }
      if (MainImgCaption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainImgCaption);
      }
      if (IsMainImageSet != false) {
        size += 1 + 1;
      }
      if (ShowGallery != false) {
        size += 1 + 1;
      }
      if (CategoryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryName);
      }
      return size;
    }

    public void MergeFrom(GrpcArticlePageDetails other) {
      if (other == null) {
        return;
      }
      if (other.articleSummary_ != null) {
        if (articleSummary_ == null) {
          articleSummary_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummary();
        }
        ArticleSummary.MergeFrom(other.ArticleSummary);
      }
      pageList_.Add(other.pageList_);
      tagsList_.Add(other.tagsList_);
      vehiclTagsList_.Add(other.vehiclTagsList_);
      if (other.nextArticle_ != null) {
        if (nextArticle_ == null) {
          nextArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
        }
        NextArticle.MergeFrom(other.NextArticle);
      }
      if (other.prevArticle_ != null) {
        if (prevArticle_ == null) {
          prevArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
        }
        PrevArticle.MergeFrom(other.PrevArticle);
      }
      if (other.MainImgCaption.Length != 0) {
        MainImgCaption = other.MainImgCaption;
      }
      if (other.IsMainImageSet != false) {
        IsMainImageSet = other.IsMainImageSet;
      }
      if (other.ShowGallery != false) {
        ShowGallery = other.ShowGallery;
      }
      if (other.CategoryName.Length != 0) {
        CategoryName = other.CategoryName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (articleSummary_ == null) {
              articleSummary_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummary();
            }
            input.ReadMessage(articleSummary_);
            break;
          }
          case 18: {
            pageList_.AddEntriesFrom(input, _repeated_pageList_codec);
            break;
          }
          case 26: {
            tagsList_.AddEntriesFrom(input, _repeated_tagsList_codec);
            break;
          }
          case 34: {
            vehiclTagsList_.AddEntriesFrom(input, _repeated_vehiclTagsList_codec);
            break;
          }
          case 42: {
            if (nextArticle_ == null) {
              nextArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
            }
            input.ReadMessage(nextArticle_);
            break;
          }
          case 50: {
            if (prevArticle_ == null) {
              prevArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
            }
            input.ReadMessage(prevArticle_);
            break;
          }
          case 58: {
            MainImgCaption = input.ReadString();
            break;
          }
          case 64: {
            IsMainImageSet = input.ReadBool();
            break;
          }
          case 72: {
            ShowGallery = input.ReadBool();
            break;
          }
          case 82: {
            CategoryName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleDetails : pb::IMessage<GrpcArticleDetails> {
    private static readonly pb::MessageParser<GrpcArticleDetails> _parser = new pb::MessageParser<GrpcArticleDetails>(() => new GrpcArticleDetails());
    public static pb::MessageParser<GrpcArticleDetails> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleDetails(GrpcArticleDetails other) : this() {
      content_ = other.content_;
      tagsList_ = other.tagsList_.Clone();
      vehiclTagsList_ = other.vehiclTagsList_.Clone();
      NextArticle = other.nextArticle_ != null ? other.NextArticle.Clone() : null;
      PrevArticle = other.prevArticle_ != null ? other.PrevArticle.Clone() : null;
      mainImgCaption_ = other.mainImgCaption_;
      isMainImageSet_ = other.isMainImageSet_;
      ArticleSummary = other.articleSummary_ != null ? other.ArticleSummary.Clone() : null;
    }

    public GrpcArticleDetails Clone() {
      return new GrpcArticleDetails(this);
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TagsList" field.</summary>
    public const int TagsListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tagsList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tagsList_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TagsList {
      get { return tagsList_; }
    }

    /// <summary>Field number for the "VehiclTagsList" field.</summary>
    public const int VehiclTagsListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcVehicleTag> _repeated_vehiclTagsList_codec
        = pb::FieldCodec.ForMessage(26, global::EditCMSWindowsService.Messages.GrpcVehicleTag.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag> vehiclTagsList_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVehicleTag> VehiclTagsList {
      get { return vehiclTagsList_; }
    }

    /// <summary>Field number for the "NextArticle" field.</summary>
    public const int NextArticleFieldNumber = 4;
    private global::EditCMSWindowsService.Messages.GrpcArticleBase nextArticle_;
    public global::EditCMSWindowsService.Messages.GrpcArticleBase NextArticle {
      get { return nextArticle_; }
      set {
        nextArticle_ = value;
      }
    }

    /// <summary>Field number for the "PrevArticle" field.</summary>
    public const int PrevArticleFieldNumber = 5;
    private global::EditCMSWindowsService.Messages.GrpcArticleBase prevArticle_;
    public global::EditCMSWindowsService.Messages.GrpcArticleBase PrevArticle {
      get { return prevArticle_; }
      set {
        prevArticle_ = value;
      }
    }

    /// <summary>Field number for the "MainImgCaption" field.</summary>
    public const int MainImgCaptionFieldNumber = 6;
    private string mainImgCaption_ = "";
    public string MainImgCaption {
      get { return mainImgCaption_; }
      set {
        mainImgCaption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsMainImageSet" field.</summary>
    public const int IsMainImageSetFieldNumber = 7;
    private bool isMainImageSet_;
    public bool IsMainImageSet {
      get { return isMainImageSet_; }
      set {
        isMainImageSet_ = value;
      }
    }

    /// <summary>Field number for the "ArticleSummary" field.</summary>
    public const int ArticleSummaryFieldNumber = 8;
    private global::EditCMSWindowsService.Messages.GrpcArticleSummary articleSummary_;
    public global::EditCMSWindowsService.Messages.GrpcArticleSummary ArticleSummary {
      get { return articleSummary_; }
      set {
        articleSummary_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleDetails);
    }

    public bool Equals(GrpcArticleDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if(!tagsList_.Equals(other.tagsList_)) return false;
      if(!vehiclTagsList_.Equals(other.vehiclTagsList_)) return false;
      if (!object.Equals(NextArticle, other.NextArticle)) return false;
      if (!object.Equals(PrevArticle, other.PrevArticle)) return false;
      if (MainImgCaption != other.MainImgCaption) return false;
      if (IsMainImageSet != other.IsMainImageSet) return false;
      if (!object.Equals(ArticleSummary, other.ArticleSummary)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= tagsList_.GetHashCode();
      hash ^= vehiclTagsList_.GetHashCode();
      if (nextArticle_ != null) hash ^= NextArticle.GetHashCode();
      if (prevArticle_ != null) hash ^= PrevArticle.GetHashCode();
      if (MainImgCaption.Length != 0) hash ^= MainImgCaption.GetHashCode();
      if (IsMainImageSet != false) hash ^= IsMainImageSet.GetHashCode();
      if (articleSummary_ != null) hash ^= ArticleSummary.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      tagsList_.WriteTo(output, _repeated_tagsList_codec);
      vehiclTagsList_.WriteTo(output, _repeated_vehiclTagsList_codec);
      if (nextArticle_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NextArticle);
      }
      if (prevArticle_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PrevArticle);
      }
      if (MainImgCaption.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MainImgCaption);
      }
      if (IsMainImageSet != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsMainImageSet);
      }
      if (articleSummary_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ArticleSummary);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += tagsList_.CalculateSize(_repeated_tagsList_codec);
      size += vehiclTagsList_.CalculateSize(_repeated_vehiclTagsList_codec);
      if (nextArticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextArticle);
      }
      if (prevArticle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevArticle);
      }
      if (MainImgCaption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainImgCaption);
      }
      if (IsMainImageSet != false) {
        size += 1 + 1;
      }
      if (articleSummary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArticleSummary);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleDetails other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      tagsList_.Add(other.tagsList_);
      vehiclTagsList_.Add(other.vehiclTagsList_);
      if (other.nextArticle_ != null) {
        if (nextArticle_ == null) {
          nextArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
        }
        NextArticle.MergeFrom(other.NextArticle);
      }
      if (other.prevArticle_ != null) {
        if (prevArticle_ == null) {
          prevArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
        }
        PrevArticle.MergeFrom(other.PrevArticle);
      }
      if (other.MainImgCaption.Length != 0) {
        MainImgCaption = other.MainImgCaption;
      }
      if (other.IsMainImageSet != false) {
        IsMainImageSet = other.IsMainImageSet;
      }
      if (other.articleSummary_ != null) {
        if (articleSummary_ == null) {
          articleSummary_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummary();
        }
        ArticleSummary.MergeFrom(other.ArticleSummary);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            tagsList_.AddEntriesFrom(input, _repeated_tagsList_codec);
            break;
          }
          case 26: {
            vehiclTagsList_.AddEntriesFrom(input, _repeated_vehiclTagsList_codec);
            break;
          }
          case 34: {
            if (nextArticle_ == null) {
              nextArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
            }
            input.ReadMessage(nextArticle_);
            break;
          }
          case 42: {
            if (prevArticle_ == null) {
              prevArticle_ = new global::EditCMSWindowsService.Messages.GrpcArticleBase();
            }
            input.ReadMessage(prevArticle_);
            break;
          }
          case 50: {
            MainImgCaption = input.ReadString();
            break;
          }
          case 56: {
            IsMainImageSet = input.ReadBool();
            break;
          }
          case 66: {
            if (articleSummary_ == null) {
              articleSummary_ = new global::EditCMSWindowsService.Messages.GrpcArticleSummary();
            }
            input.ReadMessage(articleSummary_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVehicleTag : pb::IMessage<GrpcVehicleTag> {
    private static readonly pb::MessageParser<GrpcVehicleTag> _parser = new pb::MessageParser<GrpcVehicleTag>(() => new GrpcVehicleTag());
    public static pb::MessageParser<GrpcVehicleTag> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVehicleTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVehicleTag(GrpcVehicleTag other) : this() {
      MakeBase = other.makeBase_ != null ? other.MakeBase.Clone() : null;
      ModelBase = other.modelBase_ != null ? other.ModelBase.Clone() : null;
      VersionBase = other.versionBase_ != null ? other.VersionBase.Clone() : null;
    }

    public GrpcVehicleTag Clone() {
      return new GrpcVehicleTag(this);
    }

    /// <summary>Field number for the "MakeBase" field.</summary>
    public const int MakeBaseFieldNumber = 1;
    private global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase makeBase_;
    public global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase MakeBase {
      get { return makeBase_; }
      set {
        makeBase_ = value;
      }
    }

    /// <summary>Field number for the "ModelBase" field.</summary>
    public const int ModelBaseFieldNumber = 2;
    private global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase modelBase_;
    public global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase ModelBase {
      get { return modelBase_; }
      set {
        modelBase_ = value;
      }
    }

    /// <summary>Field number for the "VersionBase" field.</summary>
    public const int VersionBaseFieldNumber = 3;
    private global::EditCMSWindowsService.Messages.GrpcCarVersionEntity versionBase_;
    public global::EditCMSWindowsService.Messages.GrpcCarVersionEntity VersionBase {
      get { return versionBase_; }
      set {
        versionBase_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVehicleTag);
    }

    public bool Equals(GrpcVehicleTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MakeBase, other.MakeBase)) return false;
      if (!object.Equals(ModelBase, other.ModelBase)) return false;
      if (!object.Equals(VersionBase, other.VersionBase)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (makeBase_ != null) hash ^= MakeBase.GetHashCode();
      if (modelBase_ != null) hash ^= ModelBase.GetHashCode();
      if (versionBase_ != null) hash ^= VersionBase.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (makeBase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MakeBase);
      }
      if (modelBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ModelBase);
      }
      if (versionBase_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(VersionBase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (makeBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MakeBase);
      }
      if (modelBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelBase);
      }
      if (versionBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VersionBase);
      }
      return size;
    }

    public void MergeFrom(GrpcVehicleTag other) {
      if (other == null) {
        return;
      }
      if (other.makeBase_ != null) {
        if (makeBase_ == null) {
          makeBase_ = new global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase();
        }
        MakeBase.MergeFrom(other.MakeBase);
      }
      if (other.modelBase_ != null) {
        if (modelBase_ == null) {
          modelBase_ = new global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase();
        }
        ModelBase.MergeFrom(other.ModelBase);
      }
      if (other.versionBase_ != null) {
        if (versionBase_ == null) {
          versionBase_ = new global::EditCMSWindowsService.Messages.GrpcCarVersionEntity();
        }
        VersionBase.MergeFrom(other.VersionBase);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (makeBase_ == null) {
              makeBase_ = new global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase();
            }
            input.ReadMessage(makeBase_);
            break;
          }
          case 18: {
            if (modelBase_ == null) {
              modelBase_ = new global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase();
            }
            input.ReadMessage(modelBase_);
            break;
          }
          case 26: {
            if (versionBase_ == null) {
              versionBase_ = new global::EditCMSWindowsService.Messages.GrpcCarVersionEntity();
            }
            input.ReadMessage(versionBase_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcCarModelEntityBase : pb::IMessage<GrpcCarModelEntityBase> {
    private static readonly pb::MessageParser<GrpcCarModelEntityBase> _parser = new pb::MessageParser<GrpcCarModelEntityBase>(() => new GrpcCarModelEntityBase());
    public static pb::MessageParser<GrpcCarModelEntityBase> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcCarModelEntityBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcCarModelEntityBase(GrpcCarModelEntityBase other) : this() {
      modelId_ = other.modelId_;
      modelName_ = other.modelName_;
      maskingName_ = other.maskingName_;
    }

    public GrpcCarModelEntityBase Clone() {
      return new GrpcCarModelEntityBase(this);
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 2;
    private string modelName_ = "";
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcCarModelEntityBase);
    }

    public bool Equals(GrpcCarModelEntityBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelId != other.ModelId) return false;
      if (ModelName != other.ModelName) return false;
      if (MaskingName != other.MaskingName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelName);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      return size;
    }

    public void MergeFrom(GrpcCarModelEntityBase other) {
      if (other == null) {
        return;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 18: {
            ModelName = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcCarVersionEntity : pb::IMessage<GrpcCarVersionEntity> {
    private static readonly pb::MessageParser<GrpcCarVersionEntity> _parser = new pb::MessageParser<GrpcCarVersionEntity>(() => new GrpcCarVersionEntity());
    public static pb::MessageParser<GrpcCarVersionEntity> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcCarVersionEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcCarVersionEntity(GrpcCarVersionEntity other) : this() {
      id_ = other.id_;
      name_ = other.name_;
    }

    public GrpcCarVersionEntity Clone() {
      return new GrpcCarVersionEntity(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcCarVersionEntity);
    }

    public bool Equals(GrpcCarVersionEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(GrpcCarVersionEntity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcCarMakeEntityBase : pb::IMessage<GrpcCarMakeEntityBase> {
    private static readonly pb::MessageParser<GrpcCarMakeEntityBase> _parser = new pb::MessageParser<GrpcCarMakeEntityBase>(() => new GrpcCarMakeEntityBase());
    public static pb::MessageParser<GrpcCarMakeEntityBase> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcCarMakeEntityBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcCarMakeEntityBase(GrpcCarMakeEntityBase other) : this() {
      makeId_ = other.makeId_;
      makeName_ = other.makeName_;
    }

    public GrpcCarMakeEntityBase Clone() {
      return new GrpcCarMakeEntityBase(this);
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 1;
    private int makeId_;
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 2;
    private string makeName_ = "";
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcCarMakeEntityBase);
    }

    public bool Equals(GrpcCarMakeEntityBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakeId != other.MakeId) return false;
      if (MakeName != other.MakeName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MakeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MakeId);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MakeName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      return size;
    }

    public void MergeFrom(GrpcCarMakeEntityBase other) {
      if (other == null) {
        return;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MakeId = input.ReadInt32();
            break;
          }
          case 18: {
            MakeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcModelImage : pb::IMessage<GrpcModelImage> {
    private static readonly pb::MessageParser<GrpcModelImage> _parser = new pb::MessageParser<GrpcModelImage>(() => new GrpcModelImage());
    public static pb::MessageParser<GrpcModelImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcModelImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcModelImage(GrpcModelImage other) : this() {
      imageId_ = other.imageId_;
      hostUrl_ = other.hostUrl_;
      imagePathThumbnail_ = other.imagePathThumbnail_;
      imagePathLarge_ = other.imagePathLarge_;
      originalImgPath_ = other.originalImgPath_;
      mainImgCategoryId_ = other.mainImgCategoryId_;
      imageCategory_ = other.imageCategory_;
      caption_ = other.caption_;
      imageName_ = other.imageName_;
      altImageName_ = other.altImageName_;
      imageTitle_ = other.imageTitle_;
      imageDescription_ = other.imageDescription_;
      MakeBase = other.makeBase_ != null ? other.MakeBase.Clone() : null;
      ModelBase = other.modelBase_ != null ? other.ModelBase.Clone() : null;
    }

    public GrpcModelImage Clone() {
      return new GrpcModelImage(this);
    }

    /// <summary>Field number for the "ImageId" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private uint imageId_;
    public uint ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "HostUrl" field.</summary>
    public const int HostUrlFieldNumber = 2;
    private string hostUrl_ = "";
    public string HostUrl {
      get { return hostUrl_; }
      set {
        hostUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImagePathThumbnail" field.</summary>
    public const int ImagePathThumbnailFieldNumber = 3;
    private string imagePathThumbnail_ = "";
    public string ImagePathThumbnail {
      get { return imagePathThumbnail_; }
      set {
        imagePathThumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImagePathLarge" field.</summary>
    public const int ImagePathLargeFieldNumber = 4;
    private string imagePathLarge_ = "";
    public string ImagePathLarge {
      get { return imagePathLarge_; }
      set {
        imagePathLarge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OriginalImgPath" field.</summary>
    public const int OriginalImgPathFieldNumber = 5;
    private string originalImgPath_ = "";
    public string OriginalImgPath {
      get { return originalImgPath_; }
      set {
        originalImgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MainImgCategoryId" field.</summary>
    public const int MainImgCategoryIdFieldNumber = 6;
    private int mainImgCategoryId_;
    public int MainImgCategoryId {
      get { return mainImgCategoryId_; }
      set {
        mainImgCategoryId_ = value;
      }
    }

    /// <summary>Field number for the "ImageCategory" field.</summary>
    public const int ImageCategoryFieldNumber = 7;
    private string imageCategory_ = "";
    public string ImageCategory {
      get { return imageCategory_; }
      set {
        imageCategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Caption" field.</summary>
    public const int CaptionFieldNumber = 8;
    private string caption_ = "";
    public string Caption {
      get { return caption_; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImageName" field.</summary>
    public const int ImageNameFieldNumber = 9;
    private string imageName_ = "";
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AltImageName" field.</summary>
    public const int AltImageNameFieldNumber = 10;
    private string altImageName_ = "";
    public string AltImageName {
      get { return altImageName_; }
      set {
        altImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImageTitle" field.</summary>
    public const int ImageTitleFieldNumber = 11;
    private string imageTitle_ = "";
    public string ImageTitle {
      get { return imageTitle_; }
      set {
        imageTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImageDescription" field.</summary>
    public const int ImageDescriptionFieldNumber = 12;
    private string imageDescription_ = "";
    public string ImageDescription {
      get { return imageDescription_; }
      set {
        imageDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeBase" field.</summary>
    public const int MakeBaseFieldNumber = 13;
    private global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase makeBase_;
    public global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase MakeBase {
      get { return makeBase_; }
      set {
        makeBase_ = value;
      }
    }

    /// <summary>Field number for the "ModelBase" field.</summary>
    public const int ModelBaseFieldNumber = 14;
    private global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase modelBase_;
    public global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase ModelBase {
      get { return modelBase_; }
      set {
        modelBase_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcModelImage);
    }

    public bool Equals(GrpcModelImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      if (HostUrl != other.HostUrl) return false;
      if (ImagePathThumbnail != other.ImagePathThumbnail) return false;
      if (ImagePathLarge != other.ImagePathLarge) return false;
      if (OriginalImgPath != other.OriginalImgPath) return false;
      if (MainImgCategoryId != other.MainImgCategoryId) return false;
      if (ImageCategory != other.ImageCategory) return false;
      if (Caption != other.Caption) return false;
      if (ImageName != other.ImageName) return false;
      if (AltImageName != other.AltImageName) return false;
      if (ImageTitle != other.ImageTitle) return false;
      if (ImageDescription != other.ImageDescription) return false;
      if (!object.Equals(MakeBase, other.MakeBase)) return false;
      if (!object.Equals(ModelBase, other.ModelBase)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ImageId != 0) hash ^= ImageId.GetHashCode();
      if (HostUrl.Length != 0) hash ^= HostUrl.GetHashCode();
      if (ImagePathThumbnail.Length != 0) hash ^= ImagePathThumbnail.GetHashCode();
      if (ImagePathLarge.Length != 0) hash ^= ImagePathLarge.GetHashCode();
      if (OriginalImgPath.Length != 0) hash ^= OriginalImgPath.GetHashCode();
      if (MainImgCategoryId != 0) hash ^= MainImgCategoryId.GetHashCode();
      if (ImageCategory.Length != 0) hash ^= ImageCategory.GetHashCode();
      if (Caption.Length != 0) hash ^= Caption.GetHashCode();
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (AltImageName.Length != 0) hash ^= AltImageName.GetHashCode();
      if (ImageTitle.Length != 0) hash ^= ImageTitle.GetHashCode();
      if (ImageDescription.Length != 0) hash ^= ImageDescription.GetHashCode();
      if (makeBase_ != null) hash ^= MakeBase.GetHashCode();
      if (modelBase_ != null) hash ^= ModelBase.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ImageId);
      }
      if (HostUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostUrl);
      }
      if (ImagePathThumbnail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImagePathThumbnail);
      }
      if (ImagePathLarge.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ImagePathLarge);
      }
      if (OriginalImgPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OriginalImgPath);
      }
      if (MainImgCategoryId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MainImgCategoryId);
      }
      if (ImageCategory.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageCategory);
      }
      if (Caption.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Caption);
      }
      if (ImageName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ImageName);
      }
      if (AltImageName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AltImageName);
      }
      if (ImageTitle.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ImageTitle);
      }
      if (ImageDescription.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ImageDescription);
      }
      if (makeBase_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(MakeBase);
      }
      if (modelBase_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ModelBase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageId);
      }
      if (HostUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostUrl);
      }
      if (ImagePathThumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePathThumbnail);
      }
      if (ImagePathLarge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePathLarge);
      }
      if (OriginalImgPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalImgPath);
      }
      if (MainImgCategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainImgCategoryId);
      }
      if (ImageCategory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageCategory);
      }
      if (Caption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (AltImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AltImageName);
      }
      if (ImageTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageTitle);
      }
      if (ImageDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageDescription);
      }
      if (makeBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MakeBase);
      }
      if (modelBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelBase);
      }
      return size;
    }

    public void MergeFrom(GrpcModelImage other) {
      if (other == null) {
        return;
      }
      if (other.ImageId != 0) {
        ImageId = other.ImageId;
      }
      if (other.HostUrl.Length != 0) {
        HostUrl = other.HostUrl;
      }
      if (other.ImagePathThumbnail.Length != 0) {
        ImagePathThumbnail = other.ImagePathThumbnail;
      }
      if (other.ImagePathLarge.Length != 0) {
        ImagePathLarge = other.ImagePathLarge;
      }
      if (other.OriginalImgPath.Length != 0) {
        OriginalImgPath = other.OriginalImgPath;
      }
      if (other.MainImgCategoryId != 0) {
        MainImgCategoryId = other.MainImgCategoryId;
      }
      if (other.ImageCategory.Length != 0) {
        ImageCategory = other.ImageCategory;
      }
      if (other.Caption.Length != 0) {
        Caption = other.Caption;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      if (other.AltImageName.Length != 0) {
        AltImageName = other.AltImageName;
      }
      if (other.ImageTitle.Length != 0) {
        ImageTitle = other.ImageTitle;
      }
      if (other.ImageDescription.Length != 0) {
        ImageDescription = other.ImageDescription;
      }
      if (other.makeBase_ != null) {
        if (makeBase_ == null) {
          makeBase_ = new global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase();
        }
        MakeBase.MergeFrom(other.MakeBase);
      }
      if (other.modelBase_ != null) {
        if (modelBase_ == null) {
          modelBase_ = new global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase();
        }
        ModelBase.MergeFrom(other.ModelBase);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 18: {
            HostUrl = input.ReadString();
            break;
          }
          case 26: {
            ImagePathThumbnail = input.ReadString();
            break;
          }
          case 34: {
            ImagePathLarge = input.ReadString();
            break;
          }
          case 42: {
            OriginalImgPath = input.ReadString();
            break;
          }
          case 48: {
            MainImgCategoryId = input.ReadInt32();
            break;
          }
          case 58: {
            ImageCategory = input.ReadString();
            break;
          }
          case 66: {
            Caption = input.ReadString();
            break;
          }
          case 74: {
            ImageName = input.ReadString();
            break;
          }
          case 82: {
            AltImageName = input.ReadString();
            break;
          }
          case 90: {
            ImageTitle = input.ReadString();
            break;
          }
          case 98: {
            ImageDescription = input.ReadString();
            break;
          }
          case 106: {
            if (makeBase_ == null) {
              makeBase_ = new global::EditCMSWindowsService.Messages.GrpcCarMakeEntityBase();
            }
            input.ReadMessage(makeBase_);
            break;
          }
          case 114: {
            if (modelBase_ == null) {
              modelBase_ = new global::EditCMSWindowsService.Messages.GrpcCarModelEntityBase();
            }
            input.ReadMessage(modelBase_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleByCatURI : pb::IMessage<GrpcArticleByCatURI> {
    private static readonly pb::MessageParser<GrpcArticleByCatURI> _parser = new pb::MessageParser<GrpcArticleByCatURI>(() => new GrpcArticleByCatURI());
    public static pb::MessageParser<GrpcArticleByCatURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleByCatURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleByCatURI(GrpcArticleByCatURI other) : this() {
      categoryIdList_ = other.categoryIdList_;
      applicationId_ = other.applicationId_;
      startIndex_ = other.startIndex_;
      endIndex_ = other.endIndex_;
      makeId_ = other.makeId_;
      modelId_ = other.modelId_;
    }

    public GrpcArticleByCatURI Clone() {
      return new GrpcArticleByCatURI(this);
    }

    /// <summary>Field number for the "CategoryIdList" field.</summary>
    public const int CategoryIdListFieldNumber = 1;
    private string categoryIdList_ = "";
    public string CategoryIdList {
      get { return categoryIdList_; }
      set {
        categoryIdList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "StartIndex" field.</summary>
    public const int StartIndexFieldNumber = 3;
    private uint startIndex_;
    public uint StartIndex {
      get { return startIndex_; }
      set {
        startIndex_ = value;
      }
    }

    /// <summary>Field number for the "EndIndex" field.</summary>
    public const int EndIndexFieldNumber = 4;
    private uint endIndex_;
    public uint EndIndex {
      get { return endIndex_; }
      set {
        endIndex_ = value;
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 5;
    private int makeId_;
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 6;
    private int modelId_;
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleByCatURI);
    }

    public bool Equals(GrpcArticleByCatURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryIdList != other.CategoryIdList) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (StartIndex != other.StartIndex) return false;
      if (EndIndex != other.EndIndex) return false;
      if (MakeId != other.MakeId) return false;
      if (ModelId != other.ModelId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CategoryIdList.Length != 0) hash ^= CategoryIdList.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (StartIndex != 0) hash ^= StartIndex.GetHashCode();
      if (EndIndex != 0) hash ^= EndIndex.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CategoryIdList.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CategoryIdList);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplicationId);
      }
      if (StartIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StartIndex);
      }
      if (EndIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndIndex);
      }
      if (MakeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MakeId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ModelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CategoryIdList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryIdList);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      if (StartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartIndex);
      }
      if (EndIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndIndex);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleByCatURI other) {
      if (other == null) {
        return;
      }
      if (other.CategoryIdList.Length != 0) {
        CategoryIdList = other.CategoryIdList;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.StartIndex != 0) {
        StartIndex = other.StartIndex;
      }
      if (other.EndIndex != 0) {
        EndIndex = other.EndIndex;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CategoryIdList = input.ReadString();
            break;
          }
          case 16: {
            ApplicationId = input.ReadUInt32();
            break;
          }
          case 24: {
            StartIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            EndIndex = input.ReadUInt32();
            break;
          }
          case 40: {
            MakeId = input.ReadInt32();
            break;
          }
          case 48: {
            ModelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleContentURI : pb::IMessage<GrpcArticleContentURI> {
    private static readonly pb::MessageParser<GrpcArticleContentURI> _parser = new pb::MessageParser<GrpcArticleContentURI>(() => new GrpcArticleContentURI());
    public static pb::MessageParser<GrpcArticleContentURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleContentURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleContentURI(GrpcArticleContentURI other) : this() {
      basicId_ = other.basicId_;
    }

    public GrpcArticleContentURI Clone() {
      return new GrpcArticleContentURI(this);
    }

    /// <summary>Field number for the "BasicId" field.</summary>
    public const int BasicIdFieldNumber = 1;
    private ulong basicId_;
    public ulong BasicId {
      get { return basicId_; }
      set {
        basicId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleContentURI);
    }

    public bool Equals(GrpcArticleContentURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicId != other.BasicId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BasicId != 0UL) hash ^= BasicId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BasicId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BasicId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BasicId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BasicId);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleContentURI other) {
      if (other == null) {
        return;
      }
      if (other.BasicId != 0UL) {
        BasicId = other.BasicId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BasicId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcModelPhotoURI : pb::IMessage<GrpcModelPhotoURI> {
    private static readonly pb::MessageParser<GrpcModelPhotoURI> _parser = new pb::MessageParser<GrpcModelPhotoURI>(() => new GrpcModelPhotoURI());
    public static pb::MessageParser<GrpcModelPhotoURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcModelPhotoURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcModelPhotoURI(GrpcModelPhotoURI other) : this() {
      applicationId_ = other.applicationId_;
      modelId_ = other.modelId_;
      categoryIdList_ = other.categoryIdList_;
      platformId_ = other.platformId_;
    }

    public GrpcModelPhotoURI Clone() {
      return new GrpcModelPhotoURI(this);
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "CategoryIdList" field.</summary>
    public const int CategoryIdListFieldNumber = 3;
    private string categoryIdList_ = "";
    public string CategoryIdList {
      get { return categoryIdList_; }
      set {
        categoryIdList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 4;
    private string platformId_ = "";
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcModelPhotoURI);
    }

    public bool Equals(GrpcModelPhotoURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      if (ModelId != other.ModelId) return false;
      if (CategoryIdList != other.CategoryIdList) return false;
      if (PlatformId != other.PlatformId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (CategoryIdList.Length != 0) hash ^= CategoryIdList.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ApplicationId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (CategoryIdList.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CategoryIdList);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlatformId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (CategoryIdList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryIdList);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      return size;
    }

    public void MergeFrom(GrpcModelPhotoURI other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.CategoryIdList.Length != 0) {
        CategoryIdList = other.CategoryIdList;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicationId = input.ReadUInt32();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 26: {
            CategoryIdList = input.ReadString();
            break;
          }
          case 34: {
            PlatformId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleRecentURI : pb::IMessage<GrpcArticleRecentURI> {
    private static readonly pb::MessageParser<GrpcArticleRecentURI> _parser = new pb::MessageParser<GrpcArticleRecentURI>(() => new GrpcArticleRecentURI());
    public static pb::MessageParser<GrpcArticleRecentURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleRecentURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleRecentURI(GrpcArticleRecentURI other) : this() {
      applicationId_ = other.applicationId_;
      contentTypes_ = other.contentTypes_;
      totalRecords_ = other.totalRecords_;
      makeId_ = other.makeId_;
      modelId_ = other.modelId_;
    }

    public GrpcArticleRecentURI Clone() {
      return new GrpcArticleRecentURI(this);
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "ContentTypes" field.</summary>
    public const int ContentTypesFieldNumber = 2;
    private string contentTypes_ = "";
    public string ContentTypes {
      get { return contentTypes_; }
      set {
        contentTypes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TotalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private uint totalRecords_;
    public uint TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 4;
    private int makeId_;
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 5;
    private int modelId_;
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleRecentURI);
    }

    public bool Equals(GrpcArticleRecentURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      if (ContentTypes != other.ContentTypes) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (MakeId != other.MakeId) return false;
      if (ModelId != other.ModelId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (ContentTypes.Length != 0) hash ^= ContentTypes.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ApplicationId);
      }
      if (ContentTypes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContentTypes);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalRecords);
      }
      if (MakeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MakeId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      if (ContentTypes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentTypes);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRecords);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      return size;
    }

    public void MergeFrom(GrpcArticleRecentURI other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.ContentTypes.Length != 0) {
        ContentTypes = other.ContentTypes;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicationId = input.ReadUInt32();
            break;
          }
          case 18: {
            ContentTypes = input.ReadString();
            break;
          }
          case 24: {
            TotalRecords = input.ReadUInt32();
            break;
          }
          case 32: {
            MakeId = input.ReadInt32();
            break;
          }
          case 40: {
            ModelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcArticleSummaryList : pb::IMessage<GrpcArticleSummaryList> {
    private static readonly pb::MessageParser<GrpcArticleSummaryList> _parser = new pb::MessageParser<GrpcArticleSummaryList>(() => new GrpcArticleSummaryList());
    public static pb::MessageParser<GrpcArticleSummaryList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcArticleSummaryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcArticleSummaryList(GrpcArticleSummaryList other) : this() {
      lstGrpcArticleSummary_ = other.lstGrpcArticleSummary_.Clone();
    }

    public GrpcArticleSummaryList Clone() {
      return new GrpcArticleSummaryList(this);
    }

    /// <summary>Field number for the "LstGrpcArticleSummary" field.</summary>
    public const int LstGrpcArticleSummaryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcArticleSummary> _repeated_lstGrpcArticleSummary_codec
        = pb::FieldCodec.ForMessage(10, global::EditCMSWindowsService.Messages.GrpcArticleSummary.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcArticleSummary> lstGrpcArticleSummary_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcArticleSummary>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcArticleSummary> LstGrpcArticleSummary {
      get { return lstGrpcArticleSummary_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcArticleSummaryList);
    }

    public bool Equals(GrpcArticleSummaryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lstGrpcArticleSummary_.Equals(other.lstGrpcArticleSummary_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= lstGrpcArticleSummary_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lstGrpcArticleSummary_.WriteTo(output, _repeated_lstGrpcArticleSummary_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lstGrpcArticleSummary_.CalculateSize(_repeated_lstGrpcArticleSummary_codec);
      return size;
    }

    public void MergeFrom(GrpcArticleSummaryList other) {
      if (other == null) {
        return;
      }
      lstGrpcArticleSummary_.Add(other.lstGrpcArticleSummary_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lstGrpcArticleSummary_.AddEntriesFrom(input, _repeated_lstGrpcArticleSummary_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcModelImageList : pb::IMessage<GrpcModelImageList> {
    private static readonly pb::MessageParser<GrpcModelImageList> _parser = new pb::MessageParser<GrpcModelImageList>(() => new GrpcModelImageList());
    public static pb::MessageParser<GrpcModelImageList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcModelImageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcModelImageList(GrpcModelImageList other) : this() {
      lstGrpcModelImage_ = other.lstGrpcModelImage_.Clone();
    }

    public GrpcModelImageList Clone() {
      return new GrpcModelImageList(this);
    }

    /// <summary>Field number for the "LstGrpcModelImage" field.</summary>
    public const int LstGrpcModelImageFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcModelImage> _repeated_lstGrpcModelImage_codec
        = pb::FieldCodec.ForMessage(10, global::EditCMSWindowsService.Messages.GrpcModelImage.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcModelImage> lstGrpcModelImage_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcModelImage>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcModelImage> LstGrpcModelImage {
      get { return lstGrpcModelImage_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcModelImageList);
    }

    public bool Equals(GrpcModelImageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lstGrpcModelImage_.Equals(other.lstGrpcModelImage_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= lstGrpcModelImage_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lstGrpcModelImage_.WriteTo(output, _repeated_lstGrpcModelImage_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lstGrpcModelImage_.CalculateSize(_repeated_lstGrpcModelImage_codec);
      return size;
    }

    public void MergeFrom(GrpcModelImageList other) {
      if (other == null) {
        return;
      }
      lstGrpcModelImage_.Add(other.lstGrpcModelImage_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lstGrpcModelImage_.AddEntriesFrom(input, _repeated_lstGrpcModelImage_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideo : pb::IMessage<GrpcVideo> {
    private static readonly pb::MessageParser<GrpcVideo> _parser = new pb::MessageParser<GrpcVideo>(() => new GrpcVideo());
    public static pb::MessageParser<GrpcVideo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideo(GrpcVideo other) : this() {
      videoTitle_ = other.videoTitle_;
      videoUrl_ = other.videoUrl_;
      videoId_ = other.videoId_;
      views_ = other.views_;
      likes_ = other.likes_;
      description_ = other.description_;
      basicId_ = other.basicId_;
      tags_ = other.tags_;
      duration_ = other.duration_;
      makeName_ = other.makeName_;
      modelName_ = other.modelName_;
      maskingName_ = other.maskingName_;
      subCatId_ = other.subCatId_;
      subCatName_ = other.subCatName_;
      videoTitleUrl_ = other.videoTitleUrl_;
      imgHost_ = other.imgHost_;
      thumbnailPath_ = other.thumbnailPath_;
      imagePath_ = other.imagePath_;
      displayDate_ = other.displayDate_;
      isFeatured_ = other.isFeatured_;
    }

    public GrpcVideo Clone() {
      return new GrpcVideo(this);
    }

    /// <summary>Field number for the "VideoTitle" field.</summary>
    public const int VideoTitleFieldNumber = 1;
    private string videoTitle_ = "";
    public string VideoTitle {
      get { return videoTitle_; }
      set {
        videoTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VideoUrl" field.</summary>
    public const int VideoUrlFieldNumber = 2;
    private string videoUrl_ = "";
    public string VideoUrl {
      get { return videoUrl_; }
      set {
        videoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VideoId" field.</summary>
    public const int VideoIdFieldNumber = 3;
    private string videoId_ = "";
    public string VideoId {
      get { return videoId_; }
      set {
        videoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Views" field.</summary>
    public const int ViewsFieldNumber = 4;
    private int views_;
    public int Views {
      get { return views_; }
      set {
        views_ = value;
      }
    }

    /// <summary>Field number for the "Likes" field.</summary>
    public const int LikesFieldNumber = 5;
    private int likes_;
    public int Likes {
      get { return likes_; }
      set {
        likes_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicId" field.</summary>
    public const int BasicIdFieldNumber = 7;
    private int basicId_;
    public int BasicId {
      get { return basicId_; }
      set {
        basicId_ = value;
      }
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private string tags_ = "";
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 9;
    private int duration_;
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 11;
    private string makeName_ = "";
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 12;
    private string modelName_ = "";
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 13;
    private string maskingName_ = "";
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubCatId" field.</summary>
    public const int SubCatIdFieldNumber = 14;
    private string subCatId_ = "";
    public string SubCatId {
      get { return subCatId_; }
      set {
        subCatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubCatName" field.</summary>
    public const int SubCatNameFieldNumber = 15;
    private string subCatName_ = "";
    public string SubCatName {
      get { return subCatName_; }
      set {
        subCatName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VideoTitleUrl" field.</summary>
    public const int VideoTitleUrlFieldNumber = 16;
    private string videoTitleUrl_ = "";
    public string VideoTitleUrl {
      get { return videoTitleUrl_; }
      set {
        videoTitleUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImgHost" field.</summary>
    public const int ImgHostFieldNumber = 17;
    private string imgHost_ = "";
    public string ImgHost {
      get { return imgHost_; }
      set {
        imgHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ThumbnailPath" field.</summary>
    public const int ThumbnailPathFieldNumber = 18;
    private string thumbnailPath_ = "";
    public string ThumbnailPath {
      get { return thumbnailPath_; }
      set {
        thumbnailPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImagePath" field.</summary>
    public const int ImagePathFieldNumber = 19;
    private string imagePath_ = "";
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayDate" field.</summary>
    public const int DisplayDateFieldNumber = 20;
    private string displayDate_ = "";
    public string DisplayDate {
      get { return displayDate_; }
      set {
        displayDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsFeatured" field.</summary>
    public const int IsFeaturedFieldNumber = 21;
    private bool isFeatured_;
    public bool IsFeatured {
      get { return isFeatured_; }
      set {
        isFeatured_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideo);
    }

    public bool Equals(GrpcVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoTitle != other.VideoTitle) return false;
      if (VideoUrl != other.VideoUrl) return false;
      if (VideoId != other.VideoId) return false;
      if (Views != other.Views) return false;
      if (Likes != other.Likes) return false;
      if (Description != other.Description) return false;
      if (BasicId != other.BasicId) return false;
      if (Tags != other.Tags) return false;
      if (Duration != other.Duration) return false;
      if (MakeName != other.MakeName) return false;
      if (ModelName != other.ModelName) return false;
      if (MaskingName != other.MaskingName) return false;
      if (SubCatId != other.SubCatId) return false;
      if (SubCatName != other.SubCatName) return false;
      if (VideoTitleUrl != other.VideoTitleUrl) return false;
      if (ImgHost != other.ImgHost) return false;
      if (ThumbnailPath != other.ThumbnailPath) return false;
      if (ImagePath != other.ImagePath) return false;
      if (DisplayDate != other.DisplayDate) return false;
      if (IsFeatured != other.IsFeatured) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (VideoTitle.Length != 0) hash ^= VideoTitle.GetHashCode();
      if (VideoUrl.Length != 0) hash ^= VideoUrl.GetHashCode();
      if (VideoId.Length != 0) hash ^= VideoId.GetHashCode();
      if (Views != 0) hash ^= Views.GetHashCode();
      if (Likes != 0) hash ^= Likes.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (BasicId != 0) hash ^= BasicId.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (SubCatId.Length != 0) hash ^= SubCatId.GetHashCode();
      if (SubCatName.Length != 0) hash ^= SubCatName.GetHashCode();
      if (VideoTitleUrl.Length != 0) hash ^= VideoTitleUrl.GetHashCode();
      if (ImgHost.Length != 0) hash ^= ImgHost.GetHashCode();
      if (ThumbnailPath.Length != 0) hash ^= ThumbnailPath.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      if (DisplayDate.Length != 0) hash ^= DisplayDate.GetHashCode();
      if (IsFeatured != false) hash ^= IsFeatured.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoTitle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VideoTitle);
      }
      if (VideoUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VideoUrl);
      }
      if (VideoId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VideoId);
      }
      if (Views != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Views);
      }
      if (Likes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Likes);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (BasicId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BasicId);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Tags);
      }
      if (Duration != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Duration);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MakeName);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ModelName);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MaskingName);
      }
      if (SubCatId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SubCatId);
      }
      if (SubCatName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SubCatName);
      }
      if (VideoTitleUrl.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(VideoTitleUrl);
      }
      if (ImgHost.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ImgHost);
      }
      if (ThumbnailPath.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ThumbnailPath);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ImagePath);
      }
      if (DisplayDate.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(DisplayDate);
      }
      if (IsFeatured != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsFeatured);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (VideoTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoTitle);
      }
      if (VideoUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoUrl);
      }
      if (VideoId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoId);
      }
      if (Views != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Views);
      }
      if (Likes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Likes);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (BasicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BasicId);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (SubCatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCatId);
      }
      if (SubCatName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCatName);
      }
      if (VideoTitleUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VideoTitleUrl);
      }
      if (ImgHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImgHost);
      }
      if (ThumbnailPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ThumbnailPath);
      }
      if (ImagePath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      if (DisplayDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DisplayDate);
      }
      if (IsFeatured != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(GrpcVideo other) {
      if (other == null) {
        return;
      }
      if (other.VideoTitle.Length != 0) {
        VideoTitle = other.VideoTitle;
      }
      if (other.VideoUrl.Length != 0) {
        VideoUrl = other.VideoUrl;
      }
      if (other.VideoId.Length != 0) {
        VideoId = other.VideoId;
      }
      if (other.Views != 0) {
        Views = other.Views;
      }
      if (other.Likes != 0) {
        Likes = other.Likes;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.BasicId != 0) {
        BasicId = other.BasicId;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.SubCatId.Length != 0) {
        SubCatId = other.SubCatId;
      }
      if (other.SubCatName.Length != 0) {
        SubCatName = other.SubCatName;
      }
      if (other.VideoTitleUrl.Length != 0) {
        VideoTitleUrl = other.VideoTitleUrl;
      }
      if (other.ImgHost.Length != 0) {
        ImgHost = other.ImgHost;
      }
      if (other.ThumbnailPath.Length != 0) {
        ThumbnailPath = other.ThumbnailPath;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
      if (other.DisplayDate.Length != 0) {
        DisplayDate = other.DisplayDate;
      }
      if (other.IsFeatured != false) {
        IsFeatured = other.IsFeatured;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VideoTitle = input.ReadString();
            break;
          }
          case 18: {
            VideoUrl = input.ReadString();
            break;
          }
          case 26: {
            VideoId = input.ReadString();
            break;
          }
          case 32: {
            Views = input.ReadInt32();
            break;
          }
          case 40: {
            Likes = input.ReadInt32();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 56: {
            BasicId = input.ReadInt32();
            break;
          }
          case 66: {
            Tags = input.ReadString();
            break;
          }
          case 72: {
            Duration = input.ReadInt32();
            break;
          }
          case 90: {
            MakeName = input.ReadString();
            break;
          }
          case 98: {
            ModelName = input.ReadString();
            break;
          }
          case 106: {
            MaskingName = input.ReadString();
            break;
          }
          case 114: {
            SubCatId = input.ReadString();
            break;
          }
          case 122: {
            SubCatName = input.ReadString();
            break;
          }
          case 130: {
            VideoTitleUrl = input.ReadString();
            break;
          }
          case 138: {
            ImgHost = input.ReadString();
            break;
          }
          case 146: {
            ThumbnailPath = input.ReadString();
            break;
          }
          case 154: {
            ImagePath = input.ReadString();
            break;
          }
          case 162: {
            DisplayDate = input.ReadString();
            break;
          }
          case 168: {
            IsFeatured = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideoListEntity : pb::IMessage<GrpcVideoListEntity> {
    private static readonly pb::MessageParser<GrpcVideoListEntity> _parser = new pb::MessageParser<GrpcVideoListEntity>(() => new GrpcVideoListEntity());
    public static pb::MessageParser<GrpcVideoListEntity> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideoListEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideoListEntity(GrpcVideoListEntity other) : this() {
      Videos = other.videos_ != null ? other.Videos.Clone() : null;
      totalRecords_ = other.totalRecords_;
      prevPageUrl_ = other.prevPageUrl_;
      nextPageUrl_ = other.nextPageUrl_;
    }

    public GrpcVideoListEntity Clone() {
      return new GrpcVideoListEntity(this);
    }

    /// <summary>Field number for the "Videos" field.</summary>
    public const int VideosFieldNumber = 1;
    private global::EditCMSWindowsService.Messages.GrpcVideosList videos_;
    public global::EditCMSWindowsService.Messages.GrpcVideosList Videos {
      get { return videos_; }
      set {
        videos_ = value;
      }
    }

    /// <summary>Field number for the "TotalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 2;
    private int totalRecords_;
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "PrevPageUrl" field.</summary>
    public const int PrevPageUrlFieldNumber = 3;
    private string prevPageUrl_ = "";
    public string PrevPageUrl {
      get { return prevPageUrl_; }
      set {
        prevPageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NextPageUrl" field.</summary>
    public const int NextPageUrlFieldNumber = 4;
    private string nextPageUrl_ = "";
    public string NextPageUrl {
      get { return nextPageUrl_; }
      set {
        nextPageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideoListEntity);
    }

    public bool Equals(GrpcVideoListEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Videos, other.Videos)) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (PrevPageUrl != other.PrevPageUrl) return false;
      if (NextPageUrl != other.NextPageUrl) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (videos_ != null) hash ^= Videos.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (PrevPageUrl.Length != 0) hash ^= PrevPageUrl.GetHashCode();
      if (NextPageUrl.Length != 0) hash ^= NextPageUrl.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (videos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Videos);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalRecords);
      }
      if (PrevPageUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrevPageUrl);
      }
      if (NextPageUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NextPageUrl);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (videos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Videos);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (PrevPageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevPageUrl);
      }
      if (NextPageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageUrl);
      }
      return size;
    }

    public void MergeFrom(GrpcVideoListEntity other) {
      if (other == null) {
        return;
      }
      if (other.videos_ != null) {
        if (videos_ == null) {
          videos_ = new global::EditCMSWindowsService.Messages.GrpcVideosList();
        }
        Videos.MergeFrom(other.Videos);
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.PrevPageUrl.Length != 0) {
        PrevPageUrl = other.PrevPageUrl;
      }
      if (other.NextPageUrl.Length != 0) {
        NextPageUrl = other.NextPageUrl;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videos_ == null) {
              videos_ = new global::EditCMSWindowsService.Messages.GrpcVideosList();
            }
            input.ReadMessage(videos_);
            break;
          }
          case 16: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 26: {
            PrevPageUrl = input.ReadString();
            break;
          }
          case 34: {
            NextPageUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideosList : pb::IMessage<GrpcVideosList> {
    private static readonly pb::MessageParser<GrpcVideosList> _parser = new pb::MessageParser<GrpcVideosList>(() => new GrpcVideosList());
    public static pb::MessageParser<GrpcVideosList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideosList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideosList(GrpcVideosList other) : this() {
      lstGrpcVideos_ = other.lstGrpcVideos_.Clone();
    }

    public GrpcVideosList Clone() {
      return new GrpcVideosList(this);
    }

    /// <summary>Field number for the "LstGrpcVideos" field.</summary>
    public const int LstGrpcVideosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EditCMSWindowsService.Messages.GrpcVideo> _repeated_lstGrpcVideos_codec
        = pb::FieldCodec.ForMessage(10, global::EditCMSWindowsService.Messages.GrpcVideo.Parser);
    private readonly pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVideo> lstGrpcVideos_ = new pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVideo>();
    public pbc::RepeatedField<global::EditCMSWindowsService.Messages.GrpcVideo> LstGrpcVideos {
      get { return lstGrpcVideos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideosList);
    }

    public bool Equals(GrpcVideosList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lstGrpcVideos_.Equals(other.lstGrpcVideos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= lstGrpcVideos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lstGrpcVideos_.WriteTo(output, _repeated_lstGrpcVideos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += lstGrpcVideos_.CalculateSize(_repeated_lstGrpcVideos_codec);
      return size;
    }

    public void MergeFrom(GrpcVideosList other) {
      if (other == null) {
        return;
      }
      lstGrpcVideos_.Add(other.lstGrpcVideos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lstGrpcVideos_.AddEntriesFrom(input, _repeated_lstGrpcVideos_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideosBySubCategoryURI : pb::IMessage<GrpcVideosBySubCategoryURI> {
    private static readonly pb::MessageParser<GrpcVideosBySubCategoryURI> _parser = new pb::MessageParser<GrpcVideosBySubCategoryURI>(() => new GrpcVideosBySubCategoryURI());
    public static pb::MessageParser<GrpcVideosBySubCategoryURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideosBySubCategoryURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideosBySubCategoryURI(GrpcVideosBySubCategoryURI other) : this() {
      subCategoryId_ = other.subCategoryId_;
      applicationId_ = other.applicationId_;
    }

    public GrpcVideosBySubCategoryURI Clone() {
      return new GrpcVideosBySubCategoryURI(this);
    }

    /// <summary>Field number for the "SubCategoryId" field.</summary>
    public const int SubCategoryIdFieldNumber = 1;
    private uint subCategoryId_;
    public uint SubCategoryId {
      get { return subCategoryId_; }
      set {
        subCategoryId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideosBySubCategoryURI);
    }

    public bool Equals(GrpcVideosBySubCategoryURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubCategoryId != other.SubCategoryId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SubCategoryId != 0) hash ^= SubCategoryId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SubCategoryId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SubCategoryId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplicationId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SubCategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubCategoryId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      return size;
    }

    public void MergeFrom(GrpcVideosBySubCategoryURI other) {
      if (other == null) {
        return;
      }
      if (other.SubCategoryId != 0) {
        SubCategoryId = other.SubCategoryId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SubCategoryId = input.ReadUInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideosByIdURI : pb::IMessage<GrpcVideosByIdURI> {
    private static readonly pb::MessageParser<GrpcVideosByIdURI> _parser = new pb::MessageParser<GrpcVideosByIdURI>(() => new GrpcVideosByIdURI());
    public static pb::MessageParser<GrpcVideosByIdURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideosByIdURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideosByIdURI(GrpcVideosByIdURI other) : this() {
      id_ = other.id_;
      applicationId_ = other.applicationId_;
    }

    public GrpcVideosByIdURI Clone() {
      return new GrpcVideosByIdURI(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideosByIdURI);
    }

    public bool Equals(GrpcVideosByIdURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplicationId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      return size;
    }

    public void MergeFrom(GrpcVideosByIdURI other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GrpcVideosBySubCategoriesURI : pb::IMessage<GrpcVideosBySubCategoriesURI> {
    private static readonly pb::MessageParser<GrpcVideosBySubCategoriesURI> _parser = new pb::MessageParser<GrpcVideosBySubCategoriesURI>(() => new GrpcVideosBySubCategoriesURI());
    public static pb::MessageParser<GrpcVideosBySubCategoriesURI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::EditCMSWindowsService.Messages.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GrpcVideosBySubCategoriesURI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GrpcVideosBySubCategoriesURI(GrpcVideosBySubCategoriesURI other) : this() {
      subCategoryIds_ = other.subCategoryIds_;
      applicationId_ = other.applicationId_;
    }

    public GrpcVideosBySubCategoriesURI Clone() {
      return new GrpcVideosBySubCategoriesURI(this);
    }

    /// <summary>Field number for the "SubCategoryIds" field.</summary>
    public const int SubCategoryIdsFieldNumber = 1;
    private string subCategoryIds_ = "";
    public string SubCategoryIds {
      get { return subCategoryIds_; }
      set {
        subCategoryIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private uint applicationId_;
    public uint ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GrpcVideosBySubCategoriesURI);
    }

    public bool Equals(GrpcVideosBySubCategoriesURI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubCategoryIds != other.SubCategoryIds) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SubCategoryIds.Length != 0) hash ^= SubCategoryIds.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SubCategoryIds.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubCategoryIds);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplicationId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SubCategoryIds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCategoryIds);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplicationId);
      }
      return size;
    }

    public void MergeFrom(GrpcVideosBySubCategoriesURI other) {
      if (other == null) {
        return;
      }
      if (other.SubCategoryIds.Length != 0) {
        SubCategoryIds = other.SubCategoryIds;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubCategoryIds = input.ReadString();
            break;
          }
          case 16: {
            ApplicationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
