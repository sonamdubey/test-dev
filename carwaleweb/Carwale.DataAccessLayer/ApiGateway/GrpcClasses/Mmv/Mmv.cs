// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmv.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MMV.Service.ProtoClass {

  /// <summary>Holder for reflection information generated from mmv.proto</summary>
  public static partial class MmvReflection {

    #region Descriptor
    /// <summary>File descriptor for mmv.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MmvReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgltbXYucHJvdG8SA01NViIrChJBcHBsaWNhdGlvblJlcXVlc3QSFQoNQXBw",
            "bGljYXRpb25JZBgBIAEoBSJVChBNb2RlbFR5cGVSZXF1ZXN0Eg4KBk1ha2VJ",
            "ZBgBIAEoBRIVCg1BcHBsaWNhdGlvbklkGAIgASgFEhoKBFR5cGUYAyABKA4y",
            "DC5NTVYuTW12VHlwZSJdChVNb2RlbEJ5U3ViTWFrZVJlcXVlc3QSEQoJU3Vi",
            "TWFrZUlkGAEgASgFEhUKDUFwcGxpY2F0aW9uSWQYAiABKAUSGgoEVHlwZRgD",
            "IAEoDjIMLk1NVi5NbXZUeXBlIlgKElZlcnNpb25UeXBlUmVxdWVzdBIPCgdN",
            "b2RlbElkGAEgASgFEhUKDUFwcGxpY2F0aW9uSWQYAiABKAUSGgoEVHlwZRgD",
            "IAEoDjIMLk1NVi5NbXZUeXBlIlkKFFZlcnNpb25CeU1ha2VSZXF1ZXN0Eg4K",
            "Bk1ha2VJZBgBIAEoBRIVCg1BcHBsaWNhdGlvbklkGAIgASgFEhoKBFR5cGUY",
            "AyABKA4yDC5NTVYuTW12VHlwZSJECg9NYWtlVHlwZVJlcXVlc3QSFQoNQXBw",
            "bGljYXRpb25JZBgBIAEoBRIaCgRUeXBlGAIgASgOMgwuTU1WLk1tdlR5cGUi",
            "GQoIR3JwY0Jvb2wSDQoFdmFsdWUYASABKAgiRQoXTW9kZWxNYXNraW5nTmFt",
            "ZVJlcXVlc3QSEwoLTWFza2luZ05hbWUYASABKAkSFQoNQXBwbGljYXRpb25J",
            "ZBgCIAEoBSJrChlWZXJzaW9uTWFza2luZ05hbWVSZXF1ZXN0EhMKC01hc2tp",
            "bmdOYW1lGAEgASgJEg8KB01vZGVsSWQYAiABKAUSEQoJVmVyc2lvbklkGAMg",
            "ASgFEhUKDUFwcGxpY2F0aW9uSWQYBCABKAUiGAoHR3JwY0ludBINCgV2YWx1",
            "ZRgBIAEoBSLfAQoTTWFza2luZ05hbWVSZXNwb25zZRIOCgZNYWtlSWQYASAB",
            "KAUSFwoPTWFrZU1hc2tpbmdOYW1lGAIgASgJEg8KB01vZGVsSWQYAyABKAUS",
            "GAoQTW9kZWxNYXNraW5nTmFtZRgEIAEoCRIRCglWZXJzaW9uSWQYBSABKAUS",
            "GgoSVmVyc2lvbk1hc2tpbmdOYW1lGAYgASgJEg4KBlJvb3RJZBgHIAEoBRIQ",
            "CghSb290TmFtZRgIIAEoCRISCgpJc1JlZGlyZWN0GAkgASgIEg8KB0lzVmFs",
            "aWQYCiABKAgiuwEKBE1ha2USCgoCSWQYASABKAUSDAoETmFtZRgCIAEoCRIT",
            "CgtNYXNraW5nTmFtZRgDIAEoCRIeCgZTdGF0dXMYBCABKA4yDi5NTVYuTW12",
            "U3RhdHVzEg8KB0xvZ29VcmwYBSABKAkSEQoJQ3JlYXRlZE9uGAYgASgJEhYK",
            "DkRpc2NvbnRpbnVlZE9uGAcgASgJEhUKDUFwcGxpY2F0aW9uSWQYCCABKAUS",
            "EQoJVXBkYXRlZE9uGAkgASgJIjUKEE1vZGVsU3VtbWFyeUxpc3QSIQoGTW9k",
            "ZWxzGAEgAygLMhEuTU1WLk1vZGVsU3VtbWFyeSLYAQoMTW9kZWxTdW1tYXJ5",
            "EgoKAklkGAEgASgFEgwKBE5hbWUYAiABKAkSEwoLTWFza2luZ05hbWUYAyAB",
            "KAkSIwoLTW9kZWxTdGF0dXMYBCABKA4yDi5NTVYuTW12U3RhdHVzEg4KBk1h",
            "a2VJZBgFIAEoBRIQCghNYWtlTmFtZRgGIAEoCRIXCg9NYWtlTWFza2luZ05h",
            "bWUYByABKAkSEQoJU3ViTWFrZUlkGAggASgFEhMKC1N1Yk1ha2VOYW1lGAkg",
            "ASgJEhEKCVVwZGF0ZWRPbhgKIAEoCSKjAwoFTW9kZWwSCgoCSWQYASABKAUS",
            "DAoETmFtZRgCIAEoCRITCgtNYXNraW5nTmFtZRgDIAEoCRIOCgZNYWtlSWQY",
            "BCABKAUSHgoGU3RhdHVzGAUgASgOMg4uTU1WLk1tdlN0YXR1cxIOCgZJbmRp",
            "YW4YBiABKAgSEAoISW1wb3J0ZWQYByABKAgSDwoHQ2xhc3NpYxgIIAEoCBIQ",
            "CghNb2RpZmllZBgJIAEoCBIXCg9SZXBsYWNlZE1vZGVsSWQYCiABKAUSDgoG",
            "Um9vdElkGAsgASgFEhEKCUNyZWF0ZWRPbhgMIAEoCRISCgpMYXVuY2hlZE9u",
            "GA0gASgJEhYKDkRpc2NvbnRpbnVlZE9uGA4gASgJEhUKDUFwcGxpY2F0aW9u",
            "SWQYDyABKAUSEQoJVXBkYXRlZEJ5GBAgASgFEhEKCVN1Yk1ha2VJZBgRIAEo",
            "BRITCgtTdWJNYWtlTmFtZRgSIAEoCRIRCglVcGRhdGVkT24YEyABKAkSEAoI",
            "TWFrZU5hbWUYFCABKAkSFwoPTWFrZU1hc2tpbmdOYW1lGBUgASgJIq0DCgpN",
            "bXZWZXJzaW9uEgoKAklkGAEgASgFEgwKBE5hbWUYAiABKAkSEwoLTWFza2lu",
            "Z05hbWUYAyABKAkSDgoGTWFrZUlkGAQgASgFEg8KB01vZGVsSWQYBSABKAUS",
            "HgoGU3RhdHVzGAYgASgOMg4uTU1WLk1tdlN0YXR1cxIOCgZJbmRpYW4YByAB",
            "KAgSEAoISW1wb3J0ZWQYCCABKAgSDwoHQ2xhc3NpYxgJIAEoCBIQCghNb2Rp",
            "ZmllZBgKIAEoCBIWCg5TcGVjaWFsVmVyc2lvbhgLIAEoCBIRCglDcmVhdGVk",
            "T24YDCABKAkSEgoKTGF1bmNoZWRPbhgNIAEoCRIWCg5EaXNjb250aW51ZWRP",
            "bhgOIAEoCRIVCg1BcHBsaWNhdGlvbklkGA8gASgFEhEKCVVwZGF0ZWRCeRgQ",
            "IAEoBRIRCglVcGRhdGVkT24YESABKAkSEQoJTW9kZWxOYW1lGBIgASgJEhgK",
            "EE1vZGVsTWFza2luZ05hbWUYEyABKAkSEAoITWFrZU5hbWUYFCABKAkSFwoP",
            "TWFrZU1hc2tpbmdOYW1lGBUgASgJIoIBCgdTdWJNYWtlEgoKAklkGAEgASgF",
            "EgwKBE5hbWUYAiABKAkSDgoGTWFrZUlkGAMgASgFEhAKCElzQWN0aXZlGAQg",
            "ASgIEhUKDUFwcGxpY2F0aW9uSWQYBSABKAUSEQoJVXBkYXRlZE9uGAYgASgJ",
            "EhEKCVVwZGF0ZWRCeRgHIAEoBSIkCghNYWtlTGlzdBIYCgVNYWtlcxgBIAMo",
            "CzIJLk1NVi5NYWtlIi0KC1N1Yk1ha2VMaXN0Eh4KCFN1Yk1ha2VzGAEgAygL",
            "MgwuTU1WLlN1Yk1ha2UiJwoJTW9kZWxMaXN0EhoKBk1vZGVscxgBIAMoCzIK",
            "Lk1NVi5Nb2RlbCIwCgtWZXJzaW9uTGlzdBIhCghWZXJzaW9ucxgBIAMoCzIP",
            "Lk1NVi5NbXZWZXJzaW9uInEKCU1vZGVsUm9vdBIKCgJJZBgBIAEoBRIMCgRO",
            "YW1lGAIgASgJEg4KBk1ha2VJZBgDIAEoBRIRCglDcmVhdGVkT24YBCABKAkS",
            "FQoNQXBwbGljYXRpb25JZBgFIAEoBRIQCghJc0FjdGl2ZRgGIAEoCCIzCg1N",
            "b2RlbFJvb3RMaXN0EiIKCk1vZGVsUm9vdHMYASADKAsyDi5NTVYuTW9kZWxS",
            "b290IusBCg5WZXJzaW9uU3VtbWFyeRIKCgJJZBgBIAEoBRIMCgROYW1lGAIg",
            "ASgJEhMKC01hc2tpbmdOYW1lGAMgASgJEg4KBk1ha2VJZBgEIAEoBRIQCghN",
            "YWtlTmFtZRgFIAEoCRIXCg9NYWtlTWFza2luZ05hbWUYBiABKAkSDwoHTW9k",
            "ZWxJZBgHIAEoBRIRCglNb2RlbE5hbWUYCCABKAkSGAoQTW9kZWxNYXNraW5n",
            "TmFtZRgJIAEoCRIeCgZTdGF0dXMYCiABKA4yDi5NTVYuTW12U3RhdHVzEhEK",
            "CVVwZGF0ZWRPbhgLIAEoCSI7ChJWZXJzaW9uU3VtbWFyeUxpc3QSJQoIVmVy",
            "c2lvbnMYASADKAsyEy5NTVYuVmVyc2lvblN1bW1hcnkqTgoJTW12U3RhdHVz",
            "EggKBE5vbmUQABIOCgpGdXR1cmlzdGljEAESBwoDTmV3EAISEAoMRGlzY29u",
            "dGludWVkEAMSDAoISW5BY3RpdmUQBCpnCgdNbXZUeXBlEg8KC1R5cGVfQWN0",
            "aXZlEAASEwoPVHlwZV9GdXR1cmlzdGljEAESDAoIVHlwZV9OZXcQAhIVChFU",
            "eXBlX0Rpc2NvbnRpbnVlZBADEhEKDVR5cGVfSW5BY3RpdmUQBDKCEAoKTW12",
            "U2VydmljZRJRChVHZXRNb2RlbEJ5TWFza2luZ05hbWUSHC5NTVYuTW9kZWxN",
            "YXNraW5nTmFtZVJlcXVlc3QaGC5NTVYuTWFza2luZ05hbWVSZXNwb25zZSIA",
            "ElUKF0dldFZlcnNpb25CeU1hc2tpbmdOYW1lEh4uTU1WLlZlcnNpb25NYXNr",
            "aW5nTmFtZVJlcXVlc3QaGC5NTVYuTWFza2luZ05hbWVSZXNwb25zZSIAEigK",
            "C0dldE1ha2VCeUlkEgwuTU1WLkdycGNJbnQaCS5NTVYuTWFrZSIAEi4KDkdl",
            "dFN1Yk1ha2VCeUlkEgwuTU1WLkdycGNJbnQaDC5NTVYuU3ViTWFrZSIAEioK",
            "DEdldE1vZGVsQnlJZBIMLk1NVi5HcnBjSW50GgouTU1WLk1vZGVsIgASMQoO",
            "R2V0VmVyc2lvbkJ5SWQSDC5NTVYuR3JwY0ludBoPLk1NVi5NbXZWZXJzaW9u",
            "IgASMgoQR2V0TW9kZWxSb290QnlJZBIMLk1NVi5HcnBjSW50Gg4uTU1WLk1v",
            "ZGVsUm9vdCIAEjcKC0dldEFsbE1ha2VzEhcuTU1WLkFwcGxpY2F0aW9uUmVx",
            "dWVzdBoNLk1NVi5NYWtlTGlzdCIAEjkKDEdldEFsbE1vZGVscxIXLk1NVi5B",
            "cHBsaWNhdGlvblJlcXVlc3QaDi5NTVYuTW9kZWxMaXN0IgASPQoOR2V0QWxs",
            "VmVyc2lvbnMSFy5NTVYuQXBwbGljYXRpb25SZXF1ZXN0GhAuTU1WLlZlcnNp",
            "b25MaXN0IgASQQoQR2V0QWxsTW9kZWxSb290cxIXLk1NVi5BcHBsaWNhdGlv",
            "blJlcXVlc3QaEi5NTVYuTW9kZWxSb290TGlzdCIAEjMKEUdldE1vZGVsc0J5",
            "TWFrZUlkEgwuTU1WLkdycGNJbnQaDi5NTVYuTW9kZWxMaXN0IgASSQoSR2V0",
            "TW9kZWxzQnlTdWJNYWtlEhouTU1WLk1vZGVsQnlTdWJNYWtlUmVxdWVzdBoV",
            "Lk1NVi5Nb2RlbFN1bW1hcnlMaXN0IgASOAoUR2V0VmVyc2lvbnNCeU1vZGVs",
            "SWQSDC5NTVYuR3JwY0ludBoQLk1NVi5WZXJzaW9uTGlzdCIAEjcKDkdldE1h",
            "a2VzQnlUeXBlEhQuTU1WLk1ha2VUeXBlUmVxdWVzdBoNLk1NVi5NYWtlTGlz",
            "dCIAEkAKDkdldE1vZGVsQnlUeXBlEhUuTU1WLk1vZGVsVHlwZVJlcXVlc3Qa",
            "FS5NTVYuTW9kZWxTdW1tYXJ5TGlzdCIAEkYKEEdldFZlcnNpb25CeVR5cGUS",
            "Fy5NTVYuVmVyc2lvblR5cGVSZXF1ZXN0GhcuTU1WLlZlcnNpb25TdW1tYXJ5",
            "TGlzdCIAEkgKEEdldFZlcnNpb25CeU1ha2USGS5NTVYuVmVyc2lvbkJ5TWFr",
            "ZVJlcXVlc3QaFy5NTVYuVmVyc2lvblN1bW1hcnlMaXN0IgASNwoTR2V0U3Vi",
            "TWFrZXNCeU1ha2VJZBIMLk1NVi5HcnBjSW50GhAuTU1WLlN1Yk1ha2VMaXN0",
            "IgASKAoKVXBkYXRlTWFrZRIJLk1NVi5NYWtlGg0uTU1WLkdycGNCb29sIgAS",
            "LgoNVXBkYXRlU3ViTWFrZRIMLk1NVi5TdWJNYWtlGg0uTU1WLkdycGNCb29s",
            "IgASKgoLVXBkYXRlTW9kZWwSCi5NTVYuTW9kZWwaDS5NTVYuR3JwY0Jvb2wi",
            "ABIxCg1VcGRhdGVWZXJzaW9uEg8uTU1WLk1tdlZlcnNpb24aDS5NTVYuR3Jw",
            "Y0Jvb2wiABIyCg9VcGRhdGVNb2RlbFJvb3QSDi5NTVYuTW9kZWxSb290Gg0u",
            "TU1WLkdycGNCb29sIgASMAoPRGVsZXRlTW9kZWxCeUlkEgwuTU1WLkdycGNJ",
            "bnQaDS5NTVYuR3JwY0Jvb2wiABIvCg5EZWxldGVNYWtlQnlJZBIMLk1NVi5H",
            "cnBjSW50Gg0uTU1WLkdycGNCb29sIgASMgoRRGVsZXRlU3ViTWFrZUJ5SWQS",
            "DC5NTVYuR3JwY0ludBoNLk1NVi5HcnBjQm9vbCIAEjIKEURlbGV0ZVZlcnNp",
            "b25CeUlkEgwuTU1WLkdycGNJbnQaDS5NTVYuR3JwY0Jvb2wiABIvCg5EZWxl",
            "dGVSb290QnlJZBIMLk1NVi5HcnBjSW50Gg0uTU1WLkdycGNCb29sIgASJwoK",
            "Q3JlYXRlTWFrZRIJLk1NVi5NYWtlGgwuTU1WLkdycGNJbnQiABItCg1DcmVh",
            "dGVTdWJNYWtlEgwuTU1WLlN1Yk1ha2UaDC5NTVYuR3JwY0ludCIAEikKC0Ny",
            "ZWF0ZU1vZGVsEgouTU1WLk1vZGVsGgwuTU1WLkdycGNJbnQiABIwCg1DcmVh",
            "dGVWZXJzaW9uEg8uTU1WLk1tdlZlcnNpb24aDC5NTVYuR3JwY0ludCIAEjEK",
            "D0NyZWF0ZU1vZGVsUm9vdBIOLk1NVi5Nb2RlbFJvb3QaDC5NTVYuR3JwY0lu",
            "dCIAEi0KD0Rpc2NvbnRpbnVlTWFrZRIJLk1NVi5NYWtlGg0uTU1WLkdycGNC",
            "b29sIgASLwoQRGlzY29udGludWVNb2RlbBIKLk1NVi5Nb2RlbBoNLk1NVi5H",
            "cnBjQm9vbCIAEjYKEkRpc2NvbnRpbnVlVmVyc2lvbhIPLk1NVi5NbXZWZXJz",
            "aW9uGg0uTU1WLkdycGNCb29sIgBCGaoCFk1NVi5TZXJ2aWNlLlByb3RvQ2xh",
            "c3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MMV.Service.ProtoClass.MmvStatus), typeof(global::MMV.Service.ProtoClass.MmvType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ApplicationRequest), global::MMV.Service.ProtoClass.ApplicationRequest.Parser, new[]{ "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelTypeRequest), global::MMV.Service.ProtoClass.ModelTypeRequest.Parser, new[]{ "MakeId", "ApplicationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelBySubMakeRequest), global::MMV.Service.ProtoClass.ModelBySubMakeRequest.Parser, new[]{ "SubMakeId", "ApplicationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionTypeRequest), global::MMV.Service.ProtoClass.VersionTypeRequest.Parser, new[]{ "ModelId", "ApplicationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionByMakeRequest), global::MMV.Service.ProtoClass.VersionByMakeRequest.Parser, new[]{ "MakeId", "ApplicationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.MakeTypeRequest), global::MMV.Service.ProtoClass.MakeTypeRequest.Parser, new[]{ "ApplicationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.GrpcBool), global::MMV.Service.ProtoClass.GrpcBool.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelMaskingNameRequest), global::MMV.Service.ProtoClass.ModelMaskingNameRequest.Parser, new[]{ "MaskingName", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionMaskingNameRequest), global::MMV.Service.ProtoClass.VersionMaskingNameRequest.Parser, new[]{ "MaskingName", "ModelId", "VersionId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.GrpcInt), global::MMV.Service.ProtoClass.GrpcInt.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.MaskingNameResponse), global::MMV.Service.ProtoClass.MaskingNameResponse.Parser, new[]{ "MakeId", "MakeMaskingName", "ModelId", "ModelMaskingName", "VersionId", "VersionMaskingName", "RootId", "RootName", "IsRedirect", "IsValid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.Make), global::MMV.Service.ProtoClass.Make.Parser, new[]{ "Id", "Name", "MaskingName", "Status", "LogoUrl", "CreatedOn", "DiscontinuedOn", "ApplicationId", "UpdatedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelSummaryList), global::MMV.Service.ProtoClass.ModelSummaryList.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelSummary), global::MMV.Service.ProtoClass.ModelSummary.Parser, new[]{ "Id", "Name", "MaskingName", "ModelStatus", "MakeId", "MakeName", "MakeMaskingName", "SubMakeId", "SubMakeName", "UpdatedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.Model), global::MMV.Service.ProtoClass.Model.Parser, new[]{ "Id", "Name", "MaskingName", "MakeId", "Status", "Indian", "Imported", "Classic", "Modified", "ReplacedModelId", "RootId", "CreatedOn", "LaunchedOn", "DiscontinuedOn", "ApplicationId", "UpdatedBy", "SubMakeId", "SubMakeName", "UpdatedOn", "MakeName", "MakeMaskingName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.MmvVersion), global::MMV.Service.ProtoClass.MmvVersion.Parser, new[]{ "Id", "Name", "MaskingName", "MakeId", "ModelId", "Status", "Indian", "Imported", "Classic", "Modified", "SpecialVersion", "CreatedOn", "LaunchedOn", "DiscontinuedOn", "ApplicationId", "UpdatedBy", "UpdatedOn", "ModelName", "ModelMaskingName", "MakeName", "MakeMaskingName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.SubMake), global::MMV.Service.ProtoClass.SubMake.Parser, new[]{ "Id", "Name", "MakeId", "IsActive", "ApplicationId", "UpdatedOn", "UpdatedBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.MakeList), global::MMV.Service.ProtoClass.MakeList.Parser, new[]{ "Makes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.SubMakeList), global::MMV.Service.ProtoClass.SubMakeList.Parser, new[]{ "SubMakes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelList), global::MMV.Service.ProtoClass.ModelList.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionList), global::MMV.Service.ProtoClass.VersionList.Parser, new[]{ "Versions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelRoot), global::MMV.Service.ProtoClass.ModelRoot.Parser, new[]{ "Id", "Name", "MakeId", "CreatedOn", "ApplicationId", "IsActive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.ModelRootList), global::MMV.Service.ProtoClass.ModelRootList.Parser, new[]{ "ModelRoots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionSummary), global::MMV.Service.ProtoClass.VersionSummary.Parser, new[]{ "Id", "Name", "MaskingName", "MakeId", "MakeName", "MakeMaskingName", "ModelId", "ModelName", "ModelMaskingName", "Status", "UpdatedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MMV.Service.ProtoClass.VersionSummaryList), global::MMV.Service.ProtoClass.VersionSummaryList.Parser, new[]{ "Versions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MmvStatus {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Futuristic")] Futuristic = 1,
    [pbr::OriginalName("New")] New = 2,
    [pbr::OriginalName("Discontinued")] Discontinued = 3,
    [pbr::OriginalName("InActive")] InActive = 4,
  }

  public enum MmvType {
    [pbr::OriginalName("Type_Active")] TypeActive = 0,
    [pbr::OriginalName("Type_Futuristic")] TypeFuturistic = 1,
    [pbr::OriginalName("Type_New")] TypeNew = 2,
    [pbr::OriginalName("Type_Discontinued")] TypeDiscontinued = 3,
    [pbr::OriginalName("Type_InActive")] TypeInActive = 4,
  }

  #endregion

  #region Messages
  public sealed partial class ApplicationRequest : pb::IMessage<ApplicationRequest> {
    private static readonly pb::MessageParser<ApplicationRequest> _parser = new pb::MessageParser<ApplicationRequest>(() => new ApplicationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationRequest(ApplicationRequest other) : this() {
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationRequest Clone() {
      return new ApplicationRequest(this);
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelTypeRequest : pb::IMessage<ModelTypeRequest> {
    private static readonly pb::MessageParser<ModelTypeRequest> _parser = new pb::MessageParser<ModelTypeRequest>(() => new ModelTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRequest(ModelTypeRequest other) : this() {
      makeId_ = other.makeId_;
      applicationId_ = other.applicationId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRequest Clone() {
      return new ModelTypeRequest(this);
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 1;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MMV.Service.ProtoClass.MmvType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakeId != other.MakeId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MakeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MakeId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MakeId = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::MMV.Service.ProtoClass.MmvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelBySubMakeRequest : pb::IMessage<ModelBySubMakeRequest> {
    private static readonly pb::MessageParser<ModelBySubMakeRequest> _parser = new pb::MessageParser<ModelBySubMakeRequest>(() => new ModelBySubMakeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelBySubMakeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelBySubMakeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelBySubMakeRequest(ModelBySubMakeRequest other) : this() {
      subMakeId_ = other.subMakeId_;
      applicationId_ = other.applicationId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelBySubMakeRequest Clone() {
      return new ModelBySubMakeRequest(this);
    }

    /// <summary>Field number for the "SubMakeId" field.</summary>
    public const int SubMakeIdFieldNumber = 1;
    private int subMakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubMakeId {
      get { return subMakeId_; }
      set {
        subMakeId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MMV.Service.ProtoClass.MmvType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelBySubMakeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelBySubMakeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubMakeId != other.SubMakeId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubMakeId != 0) hash ^= SubMakeId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubMakeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SubMakeId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubMakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubMakeId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelBySubMakeRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubMakeId != 0) {
        SubMakeId = other.SubMakeId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SubMakeId = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::MMV.Service.ProtoClass.MmvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionTypeRequest : pb::IMessage<VersionTypeRequest> {
    private static readonly pb::MessageParser<VersionTypeRequest> _parser = new pb::MessageParser<VersionTypeRequest>(() => new VersionTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionTypeRequest(VersionTypeRequest other) : this() {
      modelId_ = other.modelId_;
      applicationId_ = other.applicationId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionTypeRequest Clone() {
      return new VersionTypeRequest(this);
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MMV.Service.ProtoClass.MmvType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelId != other.ModelId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::MMV.Service.ProtoClass.MmvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionByMakeRequest : pb::IMessage<VersionByMakeRequest> {
    private static readonly pb::MessageParser<VersionByMakeRequest> _parser = new pb::MessageParser<VersionByMakeRequest>(() => new VersionByMakeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionByMakeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionByMakeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionByMakeRequest(VersionByMakeRequest other) : this() {
      makeId_ = other.makeId_;
      applicationId_ = other.applicationId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionByMakeRequest Clone() {
      return new VersionByMakeRequest(this);
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 1;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::MMV.Service.ProtoClass.MmvType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionByMakeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionByMakeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakeId != other.MakeId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MakeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MakeId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionByMakeRequest other) {
      if (other == null) {
        return;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MakeId = input.ReadInt32();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 24: {
            type_ = (global::MMV.Service.ProtoClass.MmvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeTypeRequest : pb::IMessage<MakeTypeRequest> {
    private static readonly pb::MessageParser<MakeTypeRequest> _parser = new pb::MessageParser<MakeTypeRequest>(() => new MakeTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeTypeRequest(MakeTypeRequest other) : this() {
      applicationId_ = other.applicationId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeTypeRequest Clone() {
      return new MakeTypeRequest(this);
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::MMV.Service.ProtoClass.MmvType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicationId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::MMV.Service.ProtoClass.MmvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrpcBool : pb::IMessage<GrpcBool> {
    private static readonly pb::MessageParser<GrpcBool> _parser = new pb::MessageParser<GrpcBool>(() => new GrpcBool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcBool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool(GrpcBool other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcBool Clone() {
      return new GrpcBool(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcBool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcBool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcBool other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelMaskingNameRequest : pb::IMessage<ModelMaskingNameRequest> {
    private static readonly pb::MessageParser<ModelMaskingNameRequest> _parser = new pb::MessageParser<ModelMaskingNameRequest>(() => new ModelMaskingNameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelMaskingNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelMaskingNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelMaskingNameRequest(ModelMaskingNameRequest other) : this() {
      maskingName_ = other.maskingName_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelMaskingNameRequest Clone() {
      return new ModelMaskingNameRequest(this);
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 1;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelMaskingNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelMaskingNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaskingName != other.MaskingName) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaskingName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MaskingName);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelMaskingNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MaskingName = input.ReadString();
            break;
          }
          case 16: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionMaskingNameRequest : pb::IMessage<VersionMaskingNameRequest> {
    private static readonly pb::MessageParser<VersionMaskingNameRequest> _parser = new pb::MessageParser<VersionMaskingNameRequest>(() => new VersionMaskingNameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionMaskingNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionMaskingNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionMaskingNameRequest(VersionMaskingNameRequest other) : this() {
      maskingName_ = other.maskingName_;
      modelId_ = other.modelId_;
      versionId_ = other.versionId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionMaskingNameRequest Clone() {
      return new VersionMaskingNameRequest(this);
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 1;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 3;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 4;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionMaskingNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionMaskingNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaskingName != other.MaskingName) return false;
      if (ModelId != other.ModelId) return false;
      if (VersionId != other.VersionId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaskingName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MaskingName);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (VersionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VersionId);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionMaskingNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MaskingName = input.ReadString();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 24: {
            VersionId = input.ReadInt32();
            break;
          }
          case 32: {
            ApplicationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrpcInt : pb::IMessage<GrpcInt> {
    private static readonly pb::MessageParser<GrpcInt> _parser = new pb::MessageParser<GrpcInt>(() => new GrpcInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt(GrpcInt other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcInt Clone() {
      return new GrpcInt(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcInt other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MaskingNameResponse : pb::IMessage<MaskingNameResponse> {
    private static readonly pb::MessageParser<MaskingNameResponse> _parser = new pb::MessageParser<MaskingNameResponse>(() => new MaskingNameResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaskingNameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskingNameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskingNameResponse(MaskingNameResponse other) : this() {
      makeId_ = other.makeId_;
      makeMaskingName_ = other.makeMaskingName_;
      modelId_ = other.modelId_;
      modelMaskingName_ = other.modelMaskingName_;
      versionId_ = other.versionId_;
      versionMaskingName_ = other.versionMaskingName_;
      rootId_ = other.rootId_;
      rootName_ = other.rootName_;
      isRedirect_ = other.isRedirect_;
      isValid_ = other.isValid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskingNameResponse Clone() {
      return new MaskingNameResponse(this);
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 1;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "MakeMaskingName" field.</summary>
    public const int MakeMaskingNameFieldNumber = 2;
    private string makeMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeMaskingName {
      get { return makeMaskingName_; }
      set {
        makeMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ModelMaskingName" field.</summary>
    public const int ModelMaskingNameFieldNumber = 4;
    private string modelMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelMaskingName {
      get { return modelMaskingName_; }
      set {
        modelMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 5;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "VersionMaskingName" field.</summary>
    public const int VersionMaskingNameFieldNumber = 6;
    private string versionMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionMaskingName {
      get { return versionMaskingName_; }
      set {
        versionMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RootId" field.</summary>
    public const int RootIdFieldNumber = 7;
    private int rootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RootId {
      get { return rootId_; }
      set {
        rootId_ = value;
      }
    }

    /// <summary>Field number for the "RootName" field.</summary>
    public const int RootNameFieldNumber = 8;
    private string rootName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootName {
      get { return rootName_; }
      set {
        rootName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsRedirect" field.</summary>
    public const int IsRedirectFieldNumber = 9;
    private bool isRedirect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRedirect {
      get { return isRedirect_; }
      set {
        isRedirect_ = value;
      }
    }

    /// <summary>Field number for the "IsValid" field.</summary>
    public const int IsValidFieldNumber = 10;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaskingNameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaskingNameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakeId != other.MakeId) return false;
      if (MakeMaskingName != other.MakeMaskingName) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelMaskingName != other.ModelMaskingName) return false;
      if (VersionId != other.VersionId) return false;
      if (VersionMaskingName != other.VersionMaskingName) return false;
      if (RootId != other.RootId) return false;
      if (RootName != other.RootName) return false;
      if (IsRedirect != other.IsRedirect) return false;
      if (IsValid != other.IsValid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (MakeMaskingName.Length != 0) hash ^= MakeMaskingName.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelMaskingName.Length != 0) hash ^= ModelMaskingName.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (VersionMaskingName.Length != 0) hash ^= VersionMaskingName.GetHashCode();
      if (RootId != 0) hash ^= RootId.GetHashCode();
      if (RootName.Length != 0) hash ^= RootName.GetHashCode();
      if (IsRedirect != false) hash ^= IsRedirect.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MakeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MakeId);
      }
      if (MakeMaskingName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MakeMaskingName);
      }
      if (ModelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelId);
      }
      if (ModelMaskingName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelMaskingName);
      }
      if (VersionId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VersionId);
      }
      if (VersionMaskingName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VersionMaskingName);
      }
      if (RootId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RootId);
      }
      if (RootName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RootName);
      }
      if (IsRedirect != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRedirect);
      }
      if (IsValid != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsValid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (MakeMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeMaskingName);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelMaskingName);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (VersionMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionMaskingName);
      }
      if (RootId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootId);
      }
      if (RootName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootName);
      }
      if (IsRedirect != false) {
        size += 1 + 1;
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaskingNameResponse other) {
      if (other == null) {
        return;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.MakeMaskingName.Length != 0) {
        MakeMaskingName = other.MakeMaskingName;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelMaskingName.Length != 0) {
        ModelMaskingName = other.ModelMaskingName;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.VersionMaskingName.Length != 0) {
        VersionMaskingName = other.VersionMaskingName;
      }
      if (other.RootId != 0) {
        RootId = other.RootId;
      }
      if (other.RootName.Length != 0) {
        RootName = other.RootName;
      }
      if (other.IsRedirect != false) {
        IsRedirect = other.IsRedirect;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MakeId = input.ReadInt32();
            break;
          }
          case 18: {
            MakeMaskingName = input.ReadString();
            break;
          }
          case 24: {
            ModelId = input.ReadInt32();
            break;
          }
          case 34: {
            ModelMaskingName = input.ReadString();
            break;
          }
          case 40: {
            VersionId = input.ReadInt32();
            break;
          }
          case 50: {
            VersionMaskingName = input.ReadString();
            break;
          }
          case 56: {
            RootId = input.ReadInt32();
            break;
          }
          case 66: {
            RootName = input.ReadString();
            break;
          }
          case 72: {
            IsRedirect = input.ReadBool();
            break;
          }
          case 80: {
            IsValid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Make : pb::IMessage<Make> {
    private static readonly pb::MessageParser<Make> _parser = new pb::MessageParser<Make>(() => new Make());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Make> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make(Make other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maskingName_ = other.maskingName_;
      status_ = other.status_;
      logoUrl_ = other.logoUrl_;
      createdOn_ = other.createdOn_;
      discontinuedOn_ = other.discontinuedOn_;
      applicationId_ = other.applicationId_;
      updatedOn_ = other.updatedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make Clone() {
      return new Make(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::MMV.Service.ProtoClass.MmvStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "LogoUrl" field.</summary>
    public const int LogoUrlFieldNumber = 5;
    private string logoUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogoUrl {
      get { return logoUrl_; }
      set {
        logoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 6;
    private string createdOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscontinuedOn" field.</summary>
    public const int DiscontinuedOnFieldNumber = 7;
    private string discontinuedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscontinuedOn {
      get { return discontinuedOn_; }
      set {
        discontinuedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 8;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 9;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Make);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Make other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaskingName != other.MaskingName) return false;
      if (Status != other.Status) return false;
      if (LogoUrl != other.LogoUrl) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (DiscontinuedOn != other.DiscontinuedOn) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LogoUrl.Length != 0) hash ^= LogoUrl.GetHashCode();
      if (CreatedOn.Length != 0) hash ^= CreatedOn.GetHashCode();
      if (DiscontinuedOn.Length != 0) hash ^= DiscontinuedOn.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (LogoUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogoUrl);
      }
      if (CreatedOn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CreatedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ApplicationId);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UpdatedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LogoUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogoUrl);
      }
      if (CreatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (UpdatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Make other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LogoUrl.Length != 0) {
        LogoUrl = other.LogoUrl;
      }
      if (other.CreatedOn.Length != 0) {
        CreatedOn = other.CreatedOn;
      }
      if (other.DiscontinuedOn.Length != 0) {
        DiscontinuedOn = other.DiscontinuedOn;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
          case 32: {
            status_ = (global::MMV.Service.ProtoClass.MmvStatus) input.ReadEnum();
            break;
          }
          case 42: {
            LogoUrl = input.ReadString();
            break;
          }
          case 50: {
            CreatedOn = input.ReadString();
            break;
          }
          case 58: {
            DiscontinuedOn = input.ReadString();
            break;
          }
          case 64: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 74: {
            UpdatedOn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelSummaryList : pb::IMessage<ModelSummaryList> {
    private static readonly pb::MessageParser<ModelSummaryList> _parser = new pb::MessageParser<ModelSummaryList>(() => new ModelSummaryList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSummaryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummaryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummaryList(ModelSummaryList other) : this() {
      models_ = other.models_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummaryList Clone() {
      return new ModelSummaryList(this);
    }

    /// <summary>Field number for the "Models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.ModelSummary> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.ModelSummary.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelSummary> models_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelSummary> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSummaryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSummaryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSummaryList other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelSummary : pb::IMessage<ModelSummary> {
    private static readonly pb::MessageParser<ModelSummary> _parser = new pb::MessageParser<ModelSummary>(() => new ModelSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummary(ModelSummary other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maskingName_ = other.maskingName_;
      modelStatus_ = other.modelStatus_;
      makeId_ = other.makeId_;
      makeName_ = other.makeName_;
      makeMaskingName_ = other.makeMaskingName_;
      subMakeId_ = other.subMakeId_;
      subMakeName_ = other.subMakeName_;
      updatedOn_ = other.updatedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelSummary Clone() {
      return new ModelSummary(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelStatus" field.</summary>
    public const int ModelStatusFieldNumber = 4;
    private global::MMV.Service.ProtoClass.MmvStatus modelStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvStatus ModelStatus {
      get { return modelStatus_; }
      set {
        modelStatus_ = value;
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 5;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 6;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeMaskingName" field.</summary>
    public const int MakeMaskingNameFieldNumber = 7;
    private string makeMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeMaskingName {
      get { return makeMaskingName_; }
      set {
        makeMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubMakeId" field.</summary>
    public const int SubMakeIdFieldNumber = 8;
    private int subMakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubMakeId {
      get { return subMakeId_; }
      set {
        subMakeId_ = value;
      }
    }

    /// <summary>Field number for the "SubMakeName" field.</summary>
    public const int SubMakeNameFieldNumber = 9;
    private string subMakeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubMakeName {
      get { return subMakeName_; }
      set {
        subMakeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 10;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaskingName != other.MaskingName) return false;
      if (ModelStatus != other.ModelStatus) return false;
      if (MakeId != other.MakeId) return false;
      if (MakeName != other.MakeName) return false;
      if (MakeMaskingName != other.MakeMaskingName) return false;
      if (SubMakeId != other.SubMakeId) return false;
      if (SubMakeName != other.SubMakeName) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (ModelStatus != 0) hash ^= ModelStatus.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (MakeMaskingName.Length != 0) hash ^= MakeMaskingName.GetHashCode();
      if (SubMakeId != 0) hash ^= SubMakeId.GetHashCode();
      if (SubMakeName.Length != 0) hash ^= SubMakeName.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
      if (ModelStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ModelStatus);
      }
      if (MakeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MakeId);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MakeMaskingName);
      }
      if (SubMakeId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubMakeId);
      }
      if (SubMakeName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SubMakeName);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UpdatedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (ModelStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModelStatus);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeMaskingName);
      }
      if (SubMakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubMakeId);
      }
      if (SubMakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubMakeName);
      }
      if (UpdatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelSummary other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.ModelStatus != 0) {
        ModelStatus = other.ModelStatus;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.MakeMaskingName.Length != 0) {
        MakeMaskingName = other.MakeMaskingName;
      }
      if (other.SubMakeId != 0) {
        SubMakeId = other.SubMakeId;
      }
      if (other.SubMakeName.Length != 0) {
        SubMakeName = other.SubMakeName;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
          case 32: {
            modelStatus_ = (global::MMV.Service.ProtoClass.MmvStatus) input.ReadEnum();
            break;
          }
          case 40: {
            MakeId = input.ReadInt32();
            break;
          }
          case 50: {
            MakeName = input.ReadString();
            break;
          }
          case 58: {
            MakeMaskingName = input.ReadString();
            break;
          }
          case 64: {
            SubMakeId = input.ReadInt32();
            break;
          }
          case 74: {
            SubMakeName = input.ReadString();
            break;
          }
          case 82: {
            UpdatedOn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Model : pb::IMessage<Model> {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maskingName_ = other.maskingName_;
      makeId_ = other.makeId_;
      status_ = other.status_;
      indian_ = other.indian_;
      imported_ = other.imported_;
      classic_ = other.classic_;
      modified_ = other.modified_;
      replacedModelId_ = other.replacedModelId_;
      rootId_ = other.rootId_;
      createdOn_ = other.createdOn_;
      launchedOn_ = other.launchedOn_;
      discontinuedOn_ = other.discontinuedOn_;
      applicationId_ = other.applicationId_;
      updatedBy_ = other.updatedBy_;
      subMakeId_ = other.subMakeId_;
      subMakeName_ = other.subMakeName_;
      updatedOn_ = other.updatedOn_;
      makeName_ = other.makeName_;
      makeMaskingName_ = other.makeMaskingName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 4;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::MMV.Service.ProtoClass.MmvStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Indian" field.</summary>
    public const int IndianFieldNumber = 6;
    private bool indian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Indian {
      get { return indian_; }
      set {
        indian_ = value;
      }
    }

    /// <summary>Field number for the "Imported" field.</summary>
    public const int ImportedFieldNumber = 7;
    private bool imported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Imported {
      get { return imported_; }
      set {
        imported_ = value;
      }
    }

    /// <summary>Field number for the "Classic" field.</summary>
    public const int ClassicFieldNumber = 8;
    private bool classic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Classic {
      get { return classic_; }
      set {
        classic_ = value;
      }
    }

    /// <summary>Field number for the "Modified" field.</summary>
    public const int ModifiedFieldNumber = 9;
    private bool modified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Modified {
      get { return modified_; }
      set {
        modified_ = value;
      }
    }

    /// <summary>Field number for the "ReplacedModelId" field.</summary>
    public const int ReplacedModelIdFieldNumber = 10;
    private int replacedModelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplacedModelId {
      get { return replacedModelId_; }
      set {
        replacedModelId_ = value;
      }
    }

    /// <summary>Field number for the "RootId" field.</summary>
    public const int RootIdFieldNumber = 11;
    private int rootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RootId {
      get { return rootId_; }
      set {
        rootId_ = value;
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 12;
    private string createdOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LaunchedOn" field.</summary>
    public const int LaunchedOnFieldNumber = 13;
    private string launchedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaunchedOn {
      get { return launchedOn_; }
      set {
        launchedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscontinuedOn" field.</summary>
    public const int DiscontinuedOnFieldNumber = 14;
    private string discontinuedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscontinuedOn {
      get { return discontinuedOn_; }
      set {
        discontinuedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 15;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 16;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    /// <summary>Field number for the "SubMakeId" field.</summary>
    public const int SubMakeIdFieldNumber = 17;
    private int subMakeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubMakeId {
      get { return subMakeId_; }
      set {
        subMakeId_ = value;
      }
    }

    /// <summary>Field number for the "SubMakeName" field.</summary>
    public const int SubMakeNameFieldNumber = 18;
    private string subMakeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubMakeName {
      get { return subMakeName_; }
      set {
        subMakeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 19;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 20;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeMaskingName" field.</summary>
    public const int MakeMaskingNameFieldNumber = 21;
    private string makeMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeMaskingName {
      get { return makeMaskingName_; }
      set {
        makeMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaskingName != other.MaskingName) return false;
      if (MakeId != other.MakeId) return false;
      if (Status != other.Status) return false;
      if (Indian != other.Indian) return false;
      if (Imported != other.Imported) return false;
      if (Classic != other.Classic) return false;
      if (Modified != other.Modified) return false;
      if (ReplacedModelId != other.ReplacedModelId) return false;
      if (RootId != other.RootId) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (LaunchedOn != other.LaunchedOn) return false;
      if (DiscontinuedOn != other.DiscontinuedOn) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      if (SubMakeId != other.SubMakeId) return false;
      if (SubMakeName != other.SubMakeName) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      if (MakeName != other.MakeName) return false;
      if (MakeMaskingName != other.MakeMaskingName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Indian != false) hash ^= Indian.GetHashCode();
      if (Imported != false) hash ^= Imported.GetHashCode();
      if (Classic != false) hash ^= Classic.GetHashCode();
      if (Modified != false) hash ^= Modified.GetHashCode();
      if (ReplacedModelId != 0) hash ^= ReplacedModelId.GetHashCode();
      if (RootId != 0) hash ^= RootId.GetHashCode();
      if (CreatedOn.Length != 0) hash ^= CreatedOn.GetHashCode();
      if (LaunchedOn.Length != 0) hash ^= LaunchedOn.GetHashCode();
      if (DiscontinuedOn.Length != 0) hash ^= DiscontinuedOn.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      if (SubMakeId != 0) hash ^= SubMakeId.GetHashCode();
      if (SubMakeName.Length != 0) hash ^= SubMakeName.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (MakeMaskingName.Length != 0) hash ^= MakeMaskingName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
      if (MakeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MakeId);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (Indian != false) {
        output.WriteRawTag(48);
        output.WriteBool(Indian);
      }
      if (Imported != false) {
        output.WriteRawTag(56);
        output.WriteBool(Imported);
      }
      if (Classic != false) {
        output.WriteRawTag(64);
        output.WriteBool(Classic);
      }
      if (Modified != false) {
        output.WriteRawTag(72);
        output.WriteBool(Modified);
      }
      if (ReplacedModelId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReplacedModelId);
      }
      if (RootId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RootId);
      }
      if (CreatedOn.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CreatedOn);
      }
      if (LaunchedOn.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LaunchedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ApplicationId);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(UpdatedBy);
      }
      if (SubMakeId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SubMakeId);
      }
      if (SubMakeName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(SubMakeName);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UpdatedOn);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(MakeMaskingName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Indian != false) {
        size += 1 + 1;
      }
      if (Imported != false) {
        size += 1 + 1;
      }
      if (Classic != false) {
        size += 1 + 1;
      }
      if (Modified != false) {
        size += 1 + 1;
      }
      if (ReplacedModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplacedModelId);
      }
      if (RootId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootId);
      }
      if (CreatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedOn);
      }
      if (LaunchedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaunchedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (UpdatedBy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      if (SubMakeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubMakeId);
      }
      if (SubMakeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubMakeName);
      }
      if (UpdatedOn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      if (MakeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeMaskingName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Indian != false) {
        Indian = other.Indian;
      }
      if (other.Imported != false) {
        Imported = other.Imported;
      }
      if (other.Classic != false) {
        Classic = other.Classic;
      }
      if (other.Modified != false) {
        Modified = other.Modified;
      }
      if (other.ReplacedModelId != 0) {
        ReplacedModelId = other.ReplacedModelId;
      }
      if (other.RootId != 0) {
        RootId = other.RootId;
      }
      if (other.CreatedOn.Length != 0) {
        CreatedOn = other.CreatedOn;
      }
      if (other.LaunchedOn.Length != 0) {
        LaunchedOn = other.LaunchedOn;
      }
      if (other.DiscontinuedOn.Length != 0) {
        DiscontinuedOn = other.DiscontinuedOn;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
      if (other.SubMakeId != 0) {
        SubMakeId = other.SubMakeId;
      }
      if (other.SubMakeName.Length != 0) {
        SubMakeName = other.SubMakeName;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.MakeMaskingName.Length != 0) {
        MakeMaskingName = other.MakeMaskingName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
          case 32: {
            MakeId = input.ReadInt32();
            break;
          }
          case 40: {
            status_ = (global::MMV.Service.ProtoClass.MmvStatus) input.ReadEnum();
            break;
          }
          case 48: {
            Indian = input.ReadBool();
            break;
          }
          case 56: {
            Imported = input.ReadBool();
            break;
          }
          case 64: {
            Classic = input.ReadBool();
            break;
          }
          case 72: {
            Modified = input.ReadBool();
            break;
          }
          case 80: {
            ReplacedModelId = input.ReadInt32();
            break;
          }
          case 88: {
            RootId = input.ReadInt32();
            break;
          }
          case 98: {
            CreatedOn = input.ReadString();
            break;
          }
          case 106: {
            LaunchedOn = input.ReadString();
            break;
          }
          case 114: {
            DiscontinuedOn = input.ReadString();
            break;
          }
          case 120: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 128: {
            UpdatedBy = input.ReadInt32();
            break;
          }
          case 136: {
            SubMakeId = input.ReadInt32();
            break;
          }
          case 146: {
            SubMakeName = input.ReadString();
            break;
          }
          case 154: {
            UpdatedOn = input.ReadString();
            break;
          }
          case 162: {
            MakeName = input.ReadString();
            break;
          }
          case 170: {
            MakeMaskingName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MmvVersion : pb::IMessage<MmvVersion> {
    private static readonly pb::MessageParser<MmvVersion> _parser = new pb::MessageParser<MmvVersion>(() => new MmvVersion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MmvVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MmvVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MmvVersion(MmvVersion other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maskingName_ = other.maskingName_;
      makeId_ = other.makeId_;
      modelId_ = other.modelId_;
      status_ = other.status_;
      indian_ = other.indian_;
      imported_ = other.imported_;
      classic_ = other.classic_;
      modified_ = other.modified_;
      specialVersion_ = other.specialVersion_;
      createdOn_ = other.createdOn_;
      launchedOn_ = other.launchedOn_;
      discontinuedOn_ = other.discontinuedOn_;
      applicationId_ = other.applicationId_;
      updatedBy_ = other.updatedBy_;
      updatedOn_ = other.updatedOn_;
      modelName_ = other.modelName_;
      modelMaskingName_ = other.modelMaskingName_;
      makeName_ = other.makeName_;
      makeMaskingName_ = other.makeMaskingName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MmvVersion Clone() {
      return new MmvVersion(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 4;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 5;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::MMV.Service.ProtoClass.MmvStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Indian" field.</summary>
    public const int IndianFieldNumber = 7;
    private bool indian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Indian {
      get { return indian_; }
      set {
        indian_ = value;
      }
    }

    /// <summary>Field number for the "Imported" field.</summary>
    public const int ImportedFieldNumber = 8;
    private bool imported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Imported {
      get { return imported_; }
      set {
        imported_ = value;
      }
    }

    /// <summary>Field number for the "Classic" field.</summary>
    public const int ClassicFieldNumber = 9;
    private bool classic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Classic {
      get { return classic_; }
      set {
        classic_ = value;
      }
    }

    /// <summary>Field number for the "Modified" field.</summary>
    public const int ModifiedFieldNumber = 10;
    private bool modified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Modified {
      get { return modified_; }
      set {
        modified_ = value;
      }
    }

    /// <summary>Field number for the "SpecialVersion" field.</summary>
    public const int SpecialVersionFieldNumber = 11;
    private bool specialVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpecialVersion {
      get { return specialVersion_; }
      set {
        specialVersion_ = value;
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 12;
    private string createdOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LaunchedOn" field.</summary>
    public const int LaunchedOnFieldNumber = 13;
    private string launchedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaunchedOn {
      get { return launchedOn_; }
      set {
        launchedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DiscontinuedOn" field.</summary>
    public const int DiscontinuedOnFieldNumber = 14;
    private string discontinuedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscontinuedOn {
      get { return discontinuedOn_; }
      set {
        discontinuedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 15;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 16;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 17;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 18;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelMaskingName" field.</summary>
    public const int ModelMaskingNameFieldNumber = 19;
    private string modelMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelMaskingName {
      get { return modelMaskingName_; }
      set {
        modelMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 20;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeMaskingName" field.</summary>
    public const int MakeMaskingNameFieldNumber = 21;
    private string makeMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeMaskingName {
      get { return makeMaskingName_; }
      set {
        makeMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MmvVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MmvVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaskingName != other.MaskingName) return false;
      if (MakeId != other.MakeId) return false;
      if (ModelId != other.ModelId) return false;
      if (Status != other.Status) return false;
      if (Indian != other.Indian) return false;
      if (Imported != other.Imported) return false;
      if (Classic != other.Classic) return false;
      if (Modified != other.Modified) return false;
      if (SpecialVersion != other.SpecialVersion) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (LaunchedOn != other.LaunchedOn) return false;
      if (DiscontinuedOn != other.DiscontinuedOn) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      if (ModelName != other.ModelName) return false;
      if (ModelMaskingName != other.ModelMaskingName) return false;
      if (MakeName != other.MakeName) return false;
      if (MakeMaskingName != other.MakeMaskingName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Indian != false) hash ^= Indian.GetHashCode();
      if (Imported != false) hash ^= Imported.GetHashCode();
      if (Classic != false) hash ^= Classic.GetHashCode();
      if (Modified != false) hash ^= Modified.GetHashCode();
      if (SpecialVersion != false) hash ^= SpecialVersion.GetHashCode();
      if (CreatedOn.Length != 0) hash ^= CreatedOn.GetHashCode();
      if (LaunchedOn.Length != 0) hash ^= LaunchedOn.GetHashCode();
      if (DiscontinuedOn.Length != 0) hash ^= DiscontinuedOn.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelMaskingName.Length != 0) hash ^= ModelMaskingName.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (MakeMaskingName.Length != 0) hash ^= MakeMaskingName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
      if (MakeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MakeId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModelId);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (Indian != false) {
        output.WriteRawTag(56);
        output.WriteBool(Indian);
      }
      if (Imported != false) {
        output.WriteRawTag(64);
        output.WriteBool(Imported);
      }
      if (Classic != false) {
        output.WriteRawTag(72);
        output.WriteBool(Classic);
      }
      if (Modified != false) {
        output.WriteRawTag(80);
        output.WriteBool(Modified);
      }
      if (SpecialVersion != false) {
        output.WriteRawTag(88);
        output.WriteBool(SpecialVersion);
      }
      if (CreatedOn.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CreatedOn);
      }
      if (LaunchedOn.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LaunchedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ApplicationId);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(UpdatedBy);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(UpdatedOn);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ModelName);
      }
      if (ModelMaskingName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ModelMaskingName);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(MakeMaskingName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Indian != false) {
        size += 1 + 1;
      }
      if (Imported != false) {
        size += 1 + 1;
      }
      if (Classic != false) {
        size += 1 + 1;
      }
      if (Modified != false) {
        size += 1 + 1;
      }
      if (SpecialVersion != false) {
        size += 1 + 1;
      }
      if (CreatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedOn);
      }
      if (LaunchedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaunchedOn);
      }
      if (DiscontinuedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscontinuedOn);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (UpdatedBy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      if (UpdatedOn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      if (ModelName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelMaskingName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelMaskingName);
      }
      if (MakeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeMaskingName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MmvVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Indian != false) {
        Indian = other.Indian;
      }
      if (other.Imported != false) {
        Imported = other.Imported;
      }
      if (other.Classic != false) {
        Classic = other.Classic;
      }
      if (other.Modified != false) {
        Modified = other.Modified;
      }
      if (other.SpecialVersion != false) {
        SpecialVersion = other.SpecialVersion;
      }
      if (other.CreatedOn.Length != 0) {
        CreatedOn = other.CreatedOn;
      }
      if (other.LaunchedOn.Length != 0) {
        LaunchedOn = other.LaunchedOn;
      }
      if (other.DiscontinuedOn.Length != 0) {
        DiscontinuedOn = other.DiscontinuedOn;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelMaskingName.Length != 0) {
        ModelMaskingName = other.ModelMaskingName;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.MakeMaskingName.Length != 0) {
        MakeMaskingName = other.MakeMaskingName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
          case 32: {
            MakeId = input.ReadInt32();
            break;
          }
          case 40: {
            ModelId = input.ReadInt32();
            break;
          }
          case 48: {
            status_ = (global::MMV.Service.ProtoClass.MmvStatus) input.ReadEnum();
            break;
          }
          case 56: {
            Indian = input.ReadBool();
            break;
          }
          case 64: {
            Imported = input.ReadBool();
            break;
          }
          case 72: {
            Classic = input.ReadBool();
            break;
          }
          case 80: {
            Modified = input.ReadBool();
            break;
          }
          case 88: {
            SpecialVersion = input.ReadBool();
            break;
          }
          case 98: {
            CreatedOn = input.ReadString();
            break;
          }
          case 106: {
            LaunchedOn = input.ReadString();
            break;
          }
          case 114: {
            DiscontinuedOn = input.ReadString();
            break;
          }
          case 120: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 128: {
            UpdatedBy = input.ReadInt32();
            break;
          }
          case 138: {
            UpdatedOn = input.ReadString();
            break;
          }
          case 146: {
            ModelName = input.ReadString();
            break;
          }
          case 154: {
            ModelMaskingName = input.ReadString();
            break;
          }
          case 162: {
            MakeName = input.ReadString();
            break;
          }
          case 170: {
            MakeMaskingName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubMake : pb::IMessage<SubMake> {
    private static readonly pb::MessageParser<SubMake> _parser = new pb::MessageParser<SubMake>(() => new SubMake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubMake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMake(SubMake other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      makeId_ = other.makeId_;
      isActive_ = other.isActive_;
      applicationId_ = other.applicationId_;
      updatedOn_ = other.updatedOn_;
      updatedBy_ = other.updatedBy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMake Clone() {
      return new SubMake(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 3;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 4;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 5;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 6;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatedBy" field.</summary>
    public const int UpdatedByFieldNumber = 7;
    private int updatedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdatedBy {
      get { return updatedBy_; }
      set {
        updatedBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubMake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubMake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MakeId != other.MakeId) return false;
      if (IsActive != other.IsActive) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      if (UpdatedBy != other.UpdatedBy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      if (UpdatedBy != 0) hash ^= UpdatedBy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MakeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MakeId);
      }
      if (IsActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsActive);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ApplicationId);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UpdatedBy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (UpdatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      if (UpdatedBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatedBy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubMake other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
      if (other.UpdatedBy != 0) {
        UpdatedBy = other.UpdatedBy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MakeId = input.ReadInt32();
            break;
          }
          case 32: {
            IsActive = input.ReadBool();
            break;
          }
          case 40: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 50: {
            UpdatedOn = input.ReadString();
            break;
          }
          case 56: {
            UpdatedBy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeList : pb::IMessage<MakeList> {
    private static readonly pb::MessageParser<MakeList> _parser = new pb::MessageParser<MakeList>(() => new MakeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeList(MakeList other) : this() {
      makes_ = other.makes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeList Clone() {
      return new MakeList(this);
    }

    /// <summary>Field number for the "Makes" field.</summary>
    public const int MakesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.Make> _repeated_makes_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.Make.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.Make> makes_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.Make>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.Make> Makes {
      get { return makes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!makes_.Equals(other.makes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= makes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      makes_.WriteTo(output, _repeated_makes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += makes_.CalculateSize(_repeated_makes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeList other) {
      if (other == null) {
        return;
      }
      makes_.Add(other.makes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            makes_.AddEntriesFrom(input, _repeated_makes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubMakeList : pb::IMessage<SubMakeList> {
    private static readonly pb::MessageParser<SubMakeList> _parser = new pb::MessageParser<SubMakeList>(() => new SubMakeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubMakeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMakeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMakeList(SubMakeList other) : this() {
      subMakes_ = other.subMakes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubMakeList Clone() {
      return new SubMakeList(this);
    }

    /// <summary>Field number for the "SubMakes" field.</summary>
    public const int SubMakesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.SubMake> _repeated_subMakes_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.SubMake.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.SubMake> subMakes_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.SubMake>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.SubMake> SubMakes {
      get { return subMakes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubMakeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubMakeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subMakes_.Equals(other.subMakes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subMakes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subMakes_.WriteTo(output, _repeated_subMakes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subMakes_.CalculateSize(_repeated_subMakes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubMakeList other) {
      if (other == null) {
        return;
      }
      subMakes_.Add(other.subMakes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            subMakes_.AddEntriesFrom(input, _repeated_subMakes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelList : pb::IMessage<ModelList> {
    private static readonly pb::MessageParser<ModelList> _parser = new pb::MessageParser<ModelList>(() => new ModelList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList(ModelList other) : this() {
      models_ = other.models_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelList Clone() {
      return new ModelList(this);
    }

    /// <summary>Field number for the "Models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.Model> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.Model.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.Model> models_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.Model>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.Model> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelList other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionList : pb::IMessage<VersionList> {
    private static readonly pb::MessageParser<VersionList> _parser = new pb::MessageParser<VersionList>(() => new VersionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionList(VersionList other) : this() {
      versions_ = other.versions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionList Clone() {
      return new VersionList(this);
    }

    /// <summary>Field number for the "Versions" field.</summary>
    public const int VersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.MmvVersion> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.MmvVersion.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.MmvVersion> versions_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.MmvVersion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.MmvVersion> Versions {
      get { return versions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versions_.Equals(other.versions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versions_.WriteTo(output, _repeated_versions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versions_.CalculateSize(_repeated_versions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionList other) {
      if (other == null) {
        return;
      }
      versions_.Add(other.versions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelRoot : pb::IMessage<ModelRoot> {
    private static readonly pb::MessageParser<ModelRoot> _parser = new pb::MessageParser<ModelRoot>(() => new ModelRoot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRoot(ModelRoot other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      makeId_ = other.makeId_;
      createdOn_ = other.createdOn_;
      applicationId_ = other.applicationId_;
      isActive_ = other.isActive_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRoot Clone() {
      return new ModelRoot(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 3;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 4;
    private string createdOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 5;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 6;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MakeId != other.MakeId) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (IsActive != other.IsActive) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (CreatedOn.Length != 0) hash ^= CreatedOn.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MakeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MakeId);
      }
      if (CreatedOn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CreatedOn);
      }
      if (ApplicationId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ApplicationId);
      }
      if (IsActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsActive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (CreatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedOn);
      }
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelRoot other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.CreatedOn.Length != 0) {
        CreatedOn = other.CreatedOn;
      }
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MakeId = input.ReadInt32();
            break;
          }
          case 34: {
            CreatedOn = input.ReadString();
            break;
          }
          case 40: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 48: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelRootList : pb::IMessage<ModelRootList> {
    private static readonly pb::MessageParser<ModelRootList> _parser = new pb::MessageParser<ModelRootList>(() => new ModelRootList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelRootList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRootList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRootList(ModelRootList other) : this() {
      modelRoots_ = other.modelRoots_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelRootList Clone() {
      return new ModelRootList(this);
    }

    /// <summary>Field number for the "ModelRoots" field.</summary>
    public const int ModelRootsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.ModelRoot> _repeated_modelRoots_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.ModelRoot.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelRoot> modelRoots_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelRoot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.ModelRoot> ModelRoots {
      get { return modelRoots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelRootList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelRootList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!modelRoots_.Equals(other.modelRoots_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= modelRoots_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      modelRoots_.WriteTo(output, _repeated_modelRoots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += modelRoots_.CalculateSize(_repeated_modelRoots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelRootList other) {
      if (other == null) {
        return;
      }
      modelRoots_.Add(other.modelRoots_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            modelRoots_.AddEntriesFrom(input, _repeated_modelRoots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionSummary : pb::IMessage<VersionSummary> {
    private static readonly pb::MessageParser<VersionSummary> _parser = new pb::MessageParser<VersionSummary>(() => new VersionSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummary(VersionSummary other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maskingName_ = other.maskingName_;
      makeId_ = other.makeId_;
      makeName_ = other.makeName_;
      makeMaskingName_ = other.makeMaskingName_;
      modelId_ = other.modelId_;
      modelName_ = other.modelName_;
      modelMaskingName_ = other.modelMaskingName_;
      status_ = other.status_;
      updatedOn_ = other.updatedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummary Clone() {
      return new VersionSummary(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaskingName" field.</summary>
    public const int MaskingNameFieldNumber = 3;
    private string maskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingName {
      get { return maskingName_; }
      set {
        maskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeId" field.</summary>
    public const int MakeIdFieldNumber = 4;
    private int makeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MakeId {
      get { return makeId_; }
      set {
        makeId_ = value;
      }
    }

    /// <summary>Field number for the "MakeName" field.</summary>
    public const int MakeNameFieldNumber = 5;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MakeMaskingName" field.</summary>
    public const int MakeMaskingNameFieldNumber = 6;
    private string makeMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeMaskingName {
      get { return makeMaskingName_; }
      set {
        makeMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 7;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 8;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelMaskingName" field.</summary>
    public const int ModelMaskingNameFieldNumber = 9;
    private string modelMaskingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelMaskingName {
      get { return modelMaskingName_; }
      set {
        modelMaskingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::MMV.Service.ProtoClass.MmvStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MMV.Service.ProtoClass.MmvStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "UpdatedOn" field.</summary>
    public const int UpdatedOnFieldNumber = 11;
    private string updatedOn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedOn {
      get { return updatedOn_; }
      set {
        updatedOn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaskingName != other.MaskingName) return false;
      if (MakeId != other.MakeId) return false;
      if (MakeName != other.MakeName) return false;
      if (MakeMaskingName != other.MakeMaskingName) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelName != other.ModelName) return false;
      if (ModelMaskingName != other.ModelMaskingName) return false;
      if (Status != other.Status) return false;
      if (UpdatedOn != other.UpdatedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaskingName.Length != 0) hash ^= MaskingName.GetHashCode();
      if (MakeId != 0) hash ^= MakeId.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (MakeMaskingName.Length != 0) hash ^= MakeMaskingName.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelMaskingName.Length != 0) hash ^= ModelMaskingName.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (UpdatedOn.Length != 0) hash ^= UpdatedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaskingName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaskingName);
      }
      if (MakeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MakeId);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MakeMaskingName);
      }
      if (ModelId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ModelId);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ModelName);
      }
      if (ModelMaskingName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ModelMaskingName);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (UpdatedOn.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UpdatedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingName);
      }
      if (MakeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MakeId);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (MakeMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeMaskingName);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelMaskingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelMaskingName);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UpdatedOn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionSummary other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaskingName.Length != 0) {
        MaskingName = other.MaskingName;
      }
      if (other.MakeId != 0) {
        MakeId = other.MakeId;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.MakeMaskingName.Length != 0) {
        MakeMaskingName = other.MakeMaskingName;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelMaskingName.Length != 0) {
        ModelMaskingName = other.ModelMaskingName;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.UpdatedOn.Length != 0) {
        UpdatedOn = other.UpdatedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaskingName = input.ReadString();
            break;
          }
          case 32: {
            MakeId = input.ReadInt32();
            break;
          }
          case 42: {
            MakeName = input.ReadString();
            break;
          }
          case 50: {
            MakeMaskingName = input.ReadString();
            break;
          }
          case 56: {
            ModelId = input.ReadInt32();
            break;
          }
          case 66: {
            ModelName = input.ReadString();
            break;
          }
          case 74: {
            ModelMaskingName = input.ReadString();
            break;
          }
          case 80: {
            status_ = (global::MMV.Service.ProtoClass.MmvStatus) input.ReadEnum();
            break;
          }
          case 90: {
            UpdatedOn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionSummaryList : pb::IMessage<VersionSummaryList> {
    private static readonly pb::MessageParser<VersionSummaryList> _parser = new pb::MessageParser<VersionSummaryList>(() => new VersionSummaryList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionSummaryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MMV.Service.ProtoClass.MmvReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummaryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummaryList(VersionSummaryList other) : this() {
      versions_ = other.versions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionSummaryList Clone() {
      return new VersionSummaryList(this);
    }

    /// <summary>Field number for the "Versions" field.</summary>
    public const int VersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MMV.Service.ProtoClass.VersionSummary> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(10, global::MMV.Service.ProtoClass.VersionSummary.Parser);
    private readonly pbc::RepeatedField<global::MMV.Service.ProtoClass.VersionSummary> versions_ = new pbc::RepeatedField<global::MMV.Service.ProtoClass.VersionSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MMV.Service.ProtoClass.VersionSummary> Versions {
      get { return versions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionSummaryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionSummaryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versions_.Equals(other.versions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versions_.WriteTo(output, _repeated_versions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versions_.CalculateSize(_repeated_versions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionSummaryList other) {
      if (other == null) {
        return;
      }
      versions_.Add(other.versions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
